{
    "0": {
        "0": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d,0,-1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        iFac = math.factorial(i - 1)\n        index = n // iFac\n        n %= iFac\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be at least 1\")\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        idx = n // fac\n        n %= fac\n        perm += digs[idx]\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # adjust n to be 0-indexed\n    while d > 0:\n        d -= 1\n        n, index = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        i -= 1\n        idx, n = divmod(n, math.factorial(i))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get factorial number of system\n        a = math.factorial(d)\n        # get index of current digit\n        index, n = divmod(n, a)\n        # append current digit to result\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10 inclusive\")\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        permutation += digits[index]\n        digits.pop(index)\n        n %= fact\n    return permutation"
        ],
        "1": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while digits:\n        d_fact = math.factorial(len(digits) - 1)\n        index = n // d_fact\n        n %= d_fact\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be at least 1\")\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n, d):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    \n    for i in range(d, 0, -1):\n        i_fact = math.factorial(i - 1)\n        index, n = divmod(n, i_fact)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d > 10 or d < 1:\n        return \"d must be between 1 and 10\"\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        result += digits[index]\n        digits.pop(index)\n    return result"
        ],
        "2": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while digits:\n        d_fact = math.factorial(len(digits) - 1)\n        index = n // d_fact\n        n %= d_fact\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n, d):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    \n    for i in range(d, 0, -1):\n        i_fact = math.factorial(i - 1)\n        idx = n // i_fact\n        n %= i_fact\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx, n = divmod(n, fact)\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return str(n-1)\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n -= idx * fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation"
        ],
        "3": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while digits:\n        d_fact = math.factorial(len(digits) - 1)\n        index = n // d_fact\n        n %= d_fact\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n, d):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        del digits[index]\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx, n = divmod(n, fact)\n        result += digits[idx]\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        factorial = math.factorial(len(digits) - 1)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n -= idx * fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation"
        ],
        "4": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d,0,-1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while digits:\n        d -= 1\n        q, r = divmod(n, math.factorial(d))\n        perm += digits[q]\n        digits.pop(q)\n        n = r\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n, d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = []\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm.append(digits[index])\n        digits.pop(index)\n    return ''.join(perm)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        result += digits.pop(first_index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx, n = divmod(n, fact)\n        perm += digits[idx]\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    if d == 1:\n        return str(n-1)\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result"
        ]
    },
    "1": {
        "0": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        idx = n // fac\n        n %= fac\n        perm += digs[idx]\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # adjust n to be 0-indexed\n    while d > 0:\n        d -= 1\n        n, index = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        i -= 1\n        idx, n = divmod(n, math.factorial(i))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while digits:\n        digit_index, n = divmod(n, math.factorial(len(digits) - 1))\n        perm += digits[digit_index]\n        del digits[digit_index]\n    return perm"
        ],
        "1": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get factorial number of system\n        a = math.factorial(d)\n        # get index of current digit\n        index, n = divmod(n, a)\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n -= idx * fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d > 10 or d < 1:\n        return \"d must be between 1 and 10\"\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        result += digits[index]\n        digits.pop(index)\n        n %= factorial\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr_perm_count = math.factorial(d)\n        idx = n // curr_perm_count\n        result += digits[idx]\n        digits.pop(idx)\n        n %= curr_perm_count\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index, n = divmod(n, perms_for_d)\n        \n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index, n = divmod(n, fact)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation"
        ],
        "2": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx, n = divmod(n, fact)\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n -= idx * fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.remove(digits[a])\n    return perm",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr, n = divmod(n, math.factorial(d))\n        result += digits[curr]\n        digits.pop(curr)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms = math.factorial(d)\n        \n        # find the index of current digit\n        index = n // perms\n        \n        # append the current digit\n        permutation += digits[index]\n        \n        # remove the current digit from the list\n        digits.pop(index)\n        \n        # update n\n        n %= perms\n    \n    return permutation"
        ],
        "3": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get factorial number of system\n        a = math.factorial(d)\n        # get index of current digit\n        index, n = divmod(n, a)\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx, n = divmod(n, fact)\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return str(n-1)\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr, n = divmod(n, math.factorial(d))\n        result += digits[curr]\n        digits.pop(curr)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index = n // perms_for_d\n        n %= perms_for_d\n        \n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation"
        ],
        "4": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        result += digits.pop(first_index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx, n = divmod(n, fact)\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Adjust n to be 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    if d == 1:\n        return str(n-1)\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr_perm_count = math.factorial(d)\n        index = n // curr_perm_count\n        n %= curr_perm_count\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index = n // perms_for_d\n        n %= perms_for_d\n        \n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm"
        ]
    },
    "2": {
        "0": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while digits:\n        digit_index, n = divmod(n, math.factorial(len(digits) - 1))\n        perm += digits[digit_index]\n        del digits[digit_index]\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    n -= 1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        n, idx = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return ''\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        permutation += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return permutation",
            "def nth_perm(n, d):\n    nums = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while nums:\n        n, i = divmod(n, math.factorial(len(nums) - 1))\n        result += nums.pop(i)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index, n = divmod(n, fact)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm"
        ],
        "1": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    if d > 10 or d < 1:\n        return \"d must be between 1 and 10\"\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr_perm_count = math.factorial(d)\n        idx = n // curr_perm_count\n        result += digits[idx]\n        digits.pop(idx)\n        n %= curr_perm_count\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index, n = divmod(n, perms_for_d)\n        \n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # number of permutations that contains one certain leftmost digit\n        a = math.factorial(d)\n        # index of current digit in digits\n        index, n = divmod(n, a)\n        perm += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while len(digits) > 0:\n        d_factorial = math.factorial(len(digits) - 1)\n        index = n // d_factorial\n        n %= d_factorial\n        permutation += digits[index]\n        digits.pop(index)\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    n -= 1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        del digits[index]\n    return result",
            "def nth_perm(n, d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be greater than 0\")\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation"
        ],
        "2": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return str(n-1)\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.remove(digits[a])\n    return perm",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr, n = divmod(n, math.factorial(d))\n        result += digits[curr]\n        digits.pop(curr)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits.pop(index)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms = math.factorial(d)\n        \n        # find the index of current digit\n        index = n // perms\n        \n        # append the current digit\n        permutation += digits[index]\n        \n        # remove the current digit from the list\n        digits.pop(index)\n        \n        # update n\n        n %= perms\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.pop(a)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n    \n    return permutation",
            "def nth_perm(n, d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be greater than 0\")\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    n -= 1  # to make n 0-indexed\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = n // fact\n        permutation += digits[index]\n        digits.pop(index)\n        n %= fact\n    return permutation"
        ],
        "3": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n -= idx * fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr, n = divmod(n, math.factorial(d))\n        result += digits[curr]\n        digits.pop(curr)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index = n // perms_for_d\n        n %= perms_for_d\n        \n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # number of permutations that contains a certain digit\n        perms = math.factorial(d)\n        # determine the digit\n        idx, n = divmod(n, perms)\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.pop(a)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n    \n    return permutation",
            "def nth_perm(n, d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be greater than 0\")\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    n -= 1  # to make n 0-indexed\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = n // fact\n        permutation += digits[index]\n        digits.pop(index)\n        n %= fact\n    return permutation"
        ],
        "4": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Adjust n to be 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return str(n-1)\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        curr, n = divmod(n, math.factorial(d))\n        result += digits[curr]\n        digits.pop(curr)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms = math.factorial(d)\n        \n        # find the index of current digit\n        index = n // perms\n        \n        # append current digit to the permutation\n        permutation += digits[index]\n        \n        # remove handled digit\n        digits.pop(index)\n        \n        # update n\n        n %= perms\n    \n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_num, n = divmod(n, math.factorial(d))\n        perm += digits[perm_num]\n        digits.pop(perm_num)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        del digits[index]\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return ''\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        result += digits[index]\n        digits.pop(index)\n    return result"
        ]
    }
}