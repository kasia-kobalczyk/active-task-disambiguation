{
    "0": {
        "0": [
            "import math\ndef nth_perm(n,d):\n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Loop through each digit position\n    for i in range(d):\n        # Calculate the number of permutations of the remaining digits\n        perm_count = math.factorial(d - i - 1)\n        \n        # Calculate the index of the current digit\n        digit_index = n // perm_count\n        \n        # Add the digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update n to the remaining permutation index\n        n %= perm_count\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        n = n % div\n        \n        result += str(digits[index])\n        digits.pop(index)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    perm = \"\"\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        n = n % fact\n        perm += str(digits[index])\n        digits.pop(index)\n    return perm",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    while digits:\n        total_perms = math.factorial(len(digits) - 1)\n        i = (n - 1) // total_perms\n        result += str(digits.pop(i))\n        n = n - (i * total_perms)\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.floor(n / math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        n %= div\n        result.append(digits.pop(index))\n    return ''.join(str(d) for d in result)",
            "def L(n,d):\n    digits = list(range(d))\n    result = ''\n    for i in range(d-1, -1, -1):\n        idx = n // math.factorial(i)\n        result += str(digits[idx])\n        digits.remove(digits[idx])\n        n %= math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = list(range(d))\n    # create an empty string to store the result\n    result = ''\n    # iterate over the digits\n    for i in range(d):\n        # calculate the factorial of d-i-1\n        fact = math.factorial(d-i-1)\n        # calculate the index of the digit to add to the result\n        index = n // fact\n        # add the digit to the result\n        result += str(digits[index])\n        # remove the digit from the list\n        del digits[index]\n        # update n to the remainder of n divided by fact\n        n %= fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Initialize an empty result string\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Find the index of the digit to add to the result string\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n %= factorial\n        factorial //= i\n        \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "def L(n, d):\n    digits = list(range(d))\n    permutation = ''\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        n = n % fact\n        digit = digits[index]\n        permutation += str(digit)\n        digits.remove(digit)\n    return permutation",
            "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n    n = n-1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += nums[index]\n        nums.pop(index)\n    return result\n\nprint(nth_perm(7, 4)) #should return '1023'\nprint(nth_perm(4, 4)) #should return '0231'",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    result = []\n    \n    # Convert n to a 0-based index\n    n -= 1\n    \n    while d > 0:\n        perm_count //= d\n        digit_index = n // perm_count\n        result.append(digits[digit_index])\n        digits.pop(digit_index)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        factorial = math.factorial(i)\n        index = (n // factorial) % len(digits)\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        \n    result += digits[0]\n    \n    return result\n\n# Testing\nprint(nth_perm(7, 4))  # '1023'\nprint(nth_perm(4, 4))  # '0231'",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]  # create a list of digits\n    \n    result = \"\"\n    \n    # calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # if n is larger than the number of permutations, return an empty string\n    if n > num_permutations:\n        return \"\"\n    \n    for i in range(d, 0, -1):\n        # calculate the index of the current digit in the permutation\n        index = (n % math.factorial(i)) // math.factorial(i-1)\n        \n        # append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # remove the used digit from the list\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        quotient, remainder = divmod(n, divisor)\n        result += str(digits.pop(quotient))\n        n = remainder\n    \n    return result"
        ],
        "1": [
            "def nth_perm(n,d):\n    digits = list(map(str, range(d)))\n    perms = math.factorial(d)\n    if n <= 0 or n > perms:\n        return \"Invalid input\"\n\n    result = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index = n // perms\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n <= 0 or n > perm_count:\n        return \"Invalid input\"\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = n // perm_count\n        result.append(digits.pop(index))\n        n %= perm_count\n    return ''.join(result)",
            "import math\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    num_digits = math.factorial(d)\n    if n >= num_digits or n < 1:\n        return \"Invalid input\"\n    permutation = []\n    n -= 1\n    for i in range(d - 1, -1, -1):\n        index = n // math.factorial(i)\n        permutation.append(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i)\n    return ''.join(permutation)",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    if n > num_perm:\n        return \"Invalid input\"\n    result = []\n    while d > 0:\n        num_perm /= d\n        index = int(math.ceil(n / num_perm) - 1)\n        result.append(digits.pop(index))\n        n -= num_perm * index\n        d -= 1\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the result\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1 # adjust for zero-based index\n    for i in range(d - 1, -1, -1):\n        f = math.factorial(i)\n        idx = n // f\n        n %= f\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d):\n        # calculate the factorial of (d - 1 - i)\n        fact = math.factorial(d - 1 - i)\n        \n        # find the index of the next digit\n        index = math.ceil(n / fact) - 1\n        \n        # append the digit to the result string\n        result += str(digits[index])\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n for the next iteration\n        n %= fact\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n // perms)\n        result += digits[index]\n        digits.pop(index)\n        n %= perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = \"\"\n\n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n\n        # Find the index of the digit to append to the result\n        index = n // factorial\n\n        # Append the digit to the result\n        result += digits[index]\n\n        # Remove the digit from the digits list\n        digits.pop(index)\n\n        # Update n to the remaining permutation\n        n %= factorial\n\n    return result",
            "def nth_perm(n, d):\n    items = [str(i) for i in range(d)]\n    num_perms = math.factorial(d)\n    if n > num_perms or n <= 0:\n        return \"Invalid input\"\n    result = \"\"\n    n -= 1\n    for i in range(d):\n        num_perms = num_perms / (d - i)\n        index = int(n / num_perms)\n        result += items[index]\n        items.pop(index)\n        n = n % num_perms\n    return result\n\nprint(nth_perm(7,4))",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n -= 1\n    \n    for i in range(d-1,0,-1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n %= fact\n        fact //= i\n    \n    result += digits[0]\n    return result",
            "def nth_perm(n,d):\n    def factorial(num):\n        fact = 1\n        for i in range(1,num+1):\n            fact *= i\n        return fact\n\n    def find_index(n,fact):\n        i = 0\n        while fact < n:\n            fact *= (i+1)\n            i += 1\n        return i\n\n    def find_permutation(n,index,digits,fact):\n        result = \"\"\n        while len(digits) > 0:\n            i = n // fact\n            result += str(digits[i])\n            digits.remove(digits[i])\n            n -= i * fact\n            if index > 1:\n                fact = math.factorial(index-1)\n                index -= 1\n        return result\n\n    digits = [i for i in range(d)]\n    fact = factorial(d-1)\n    index = find_index(n,fact)\n    result = find_permutation(n,index,digits,fact)\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        n = n % fact\n        permutation += digits.pop(index)\n    \n    return permutation"
        ],
        "2": [
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1  # Convert to zero-based index\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the digit to add to the result\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        # Remove the digit from the list\n        digits.remove(digits[index])\n        # Update n to the remainder\n        n = n % math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while d > 0:\n        fac = math.factorial(d-1)\n        index = (n-1) // fac\n        result += digits[index]\n        digits.pop(index)\n        n = (n-1) % fac + 1\n        d -= 1\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while d > 0:\n        # calculate the index of the current digit\n        index = (n-1) // math.factorial(d-1)\n        # add the current digit to the result\n        result += digits[index]\n        # remove the current digit from the list\n        digits.pop(index)\n        # update n and d\n        n = n - index * math.factorial(d-1)\n        d -= 1\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = []\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index = (n - 1) // fact\n        perms.append(digits[index])\n        digits.pop(index)\n        n = n - index * fact\n    return ''.join(perms)",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1))\n        result += digits[index-1]\n        digits.pop(index-1)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-indexed\n    n -= 1\n    \n    # Create a list of digits\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the factorial of d-i-1\n        factorial //= (d - i)\n        \n        # Calculate the index of the digit in the list\n        index = n // factorial\n        \n        # Append the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n = n - 1\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % math.factorial(i-1)\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = '0123456789'[:d]\n    num_permutations = math.factorial(d)\n    \n    if n < 1 or n > num_permutations:\n        return \"Invalid n\"\n    \n    result = \"\"\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n = n % math.factorial(i)\n    \n    return result",
            "def nth_perm(n,d):\n    # create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the number of permutations for d digits\n    total_perms = math.factorial(d)\n    \n    # if n is greater than total_perms, return None\n    if n > total_perms:\n        return None\n    \n    # create an empty string to store the result\n    result = ''\n    \n    # iterate through each digit\n    for i in range(d):\n        # calculate the number of permutations for remaining digits\n        perms = total_perms // (d - i)\n        \n        # calculate the index of the digit to add to the result\n        index = (n - 1) // perms\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list of digits\n        digits.pop(index)\n        \n        # update n and total_perms\n        n = n % perms\n        total_perms = perms\n    \n    # return the result\n    return result",
            "def nth_perm(n, d):\n    digits = '0123456789'[:d]\n    perms = math.factorial(d)\n    n -= 1\n    result = ''\n    \n    for i in range(d):\n        perms //= d - i\n        index = n // perms\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n %= perms\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = (n-1) // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return result",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    \n    result += digits[0]\n    \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = ''\n\n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n\n    # Iterate through the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the index of the current digit\n        index = (n - 1) // (factorial // i)\n\n        # Append the digit at the calculated index to the result\n        result += digits[index]\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n and factorial for the next iteration\n        n = n - (index * factorial // i)\n        factorial = factorial // i\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while len(digits) > 0:\n        size = math.factorial(len(digits)-1)\n        index = (n-1) // size\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        n -= size * index\n    return result",
            "import math\ndef nth_perm(n,d):\n    # convert n to 0-indexed\n    n -= 1\n    \n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize an empty result string\n    result = \"\"\n    \n    # loop through all digits\n    for i in range(d):\n        # calculate the factorial of d-i-1\n        factorial = math.factorial(d-i-1)\n        \n        # find the index of the digit to be added to the result string\n        index = n // factorial\n        \n        # add the digit to the result string\n        result += digits[index]\n        \n        # remove the digit from the list of digits\n        digits.pop(index)\n        \n        # update n\n        n = n % factorial\n    \n    # return the result string\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    while len(result) < d:\n        total_permutations = math.factorial(d - 1 - len(result))\n        \n        index = math.ceil(n / total_permutations) - 1\n        result.append(digits[index])\n        digits.pop(index)\n        \n        n %= total_permutations\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    perm = \"\"\n    n = n - 1\n\n    for i in range(d):\n        factorial = math.factorial(d - i - 1)\n        digit_index = n // factorial\n        digit = digits[digit_index]\n        perm += str(digit)\n        digits.remove(digit)\n        n = n % factorial\n\n    return perm",
            "def nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = ''\n    while d > 0:\n        f = math.factorial(d-1)\n        idx = (n-1) // f\n        result += nums[idx]\n        nums.pop(idx)\n        n -= idx * f\n        d -= 1\n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n = n % div\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit in the permutation\n        index = (n // fact) % i\n        \n        # Add the digit at the index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update the value of n\n        n %= fact\n        \n        # Update the value of fact\n        fact //= i\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits[index]\n        digits.remove(digit)\n        permutation += str(digit)\n        n = n % math.factorial(d - i - 1)\n    return permutation"
        ],
        "3": [
            "def nth_perm(n, d):\n    nums = [str(i) for i in range(d)]\n    perm = \"\"\n    total_perm = math.factorial(d)\n    n -= 1\n    while d > 0:\n        total_perm //= d\n        index = n // total_perm\n        digit = nums[index]\n        perm += digit\n        nums.remove(digit)\n        n %= total_perm\n        d -= 1\n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    permutation = []\n    n -= 1  # Adjust n to start from 0\n    for i in range(d):\n        fact = math.factorial(d-i-1)\n        index = n // fact\n        digit = digits[index]\n        permutation.append(str(digit))\n        digits.remove(digit)\n        n = n % fact\n    return ''.join(permutation)",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n < 1 or n > total_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Calculate the index of the current digit in the list of digits\n    index = n - 1\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        total_permutations //= d - i\n        \n        # Calculate the index of the current digit in the list of digits\n        digit_index = index // total_permutations\n        \n        # Add the current digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the current digit from the list of digits\n        digits.remove(digits[digit_index])\n        \n        # Update the index\n        index %= total_permutations\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i - 1)) - 1\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i - 1)\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.pop(index)\n        n -= index * math.factorial(i)\n        \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d - 1)\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through each digit position\n    for i in range(d - 1, 0, -1):\n        # Calculate the index of the next digit in digits\n        index = (n - 1) // fact\n        \n        # Add the next digit to the result\n        result += digits[index]\n        \n        # Remove the next digit from digits\n        digits.pop(index)\n        \n        # Update n and fact for the next iteration\n        n = n - index * fact\n        fact = fact // i\n    \n    # Add the last digit to the result\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        idx = math.ceil(n / math.factorial(i-1)) - 1\n        result += digits[idx]\n        digits.remove(digits[idx])\n        n = n % math.factorial(i-1)\n        \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        digit = digits[index]\n        permutation += str(digit)\n        digits.remove(digit)\n        n %= div\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        # Find the index of the next digit\n        index = n // math.factorial(d-1)\n        result += digits[index]\n        \n        # Remove the digit from the list of available digits\n        digits.remove(digits[index])\n        \n        # Update n and d for the next iteration\n        n %= math.factorial(d-1)\n        d -= 1\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n\n    result = ''\n    for i in range(d, 0, -1):\n        index = math.floor((n-1) / math.factorial(i-1))\n        result += digits.pop(index)\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1  # adjust n to account for 0-based indexing\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        result.append(digits[index])\n        digits.pop(index)\n        n %= fact\n    return ''.join(result)",
            "def nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize the result string\n    result = \"\"\n    \n    # calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # iterate through the digits\n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to add to the result\n        index = (n-1) // fact\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n and fact\n        n = n - index * fact\n        fact = fact // i\n        \n    # add the last digit to the result\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        n %= math.factorial(i)\n        permutation += str(digits[index])\n        digits.pop(index)\n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    digits = ''.join([str(i) for i in range(d)])\n    num_perm = math.factorial(d)\n    \n    if n > num_perm or n <= 0:\n        return \"Invalid input\"\n    \n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = n // num_perm\n        n %= num_perm\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n    \n    return result"
        ],
        "4": [
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)] # Create a list of digits from 0 to d-1\n    \n    result = ''\n    n -= 1 # Decrement n by 1 to account for 0-based indexing\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(d - i - 1)\n    return permutation",
            "def nth_perm(n,d):\n    # Convert n to zero-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Compute the factorial of the current digit\n        factorial = math.factorial(i)\n        \n        # Compute the index of the current digit in the permutation\n        index = n // factorial\n        \n        # Append the digit at the computed index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n to the remaining index\n        n %= factorial\n    \n    # Return the result string\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Generate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n %= factorial\n        if i > 0:\n            factorial //= i\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i - 1)) - 1\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = ''\n    \n    while len(result) < d:\n        count = math.factorial(d - len(result) - 1)\n        index = math.ceil(n / count) - 1\n        result += digits[index]\n        digits.pop(index)\n        n %= count\n    \n    return result",
            "def nth_perm(n, d):\n    digits = '0123456789'\n    result = ''\n    \n    # calculate the number of permutations\n    perms = math.factorial(d)\n    \n    # decrement n to start at 0 index\n    n -= 1\n    \n    # iterate over the digits\n    for i in range(d, 0, -1):\n        perms //= i\n        \n        # find the index of the current digit\n        index = n // perms\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list of available digits\n        digits = digits[:index] + digits[index+1:]\n        \n        # update n to the remaining permutation\n        n %= perms\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d)) # create a list of digits from 0 to d-1\n    result = [] # create an empty list to store the result\n    n -= 1 # decrement n by 1 to account for 0-based indexing\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1) # calculate the index of the current digit\n        digit = digits[index] # get the digit at the calculated index\n        result.append(str(digit)) # add the digit to the result list\n        digits.remove(digit) # remove the digit from the available digits list\n        n %= math.factorial(d-i-1) # update n to be the remainder\n    \n    return ''.join(result) # return the result as a string\n\nprint(nth_perm(1,3))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 4))\nprint(nth_perm(8, 10))",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d - 1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    result += digits[0]\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n = n - index * math.factorial(i-1)\n        \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n -= index * math.factorial(i-1)\n    return result\n\nprint(nth_perm(1,3)) # '012'\nprint(nth_perm(7,4)) # '1023'\nprint(nth_perm(1,4)) # '0123'\nprint(nth_perm(8,10)) # '0123457698'",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    for i in range(d - 1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d - 1, 0, -1):\n        div = math.factorial(i)\n        index = n // div\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % div\n\n    result += str(digits[0])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    \n    while d > 0:\n        f = math.factorial(d - 1)\n        index = n // f\n        perm += digits[index]\n        digits.pop(index)\n        n = n % f\n        d -= 1\n    \n    return perm"
        ]
    },
    "1": {
        "0": [
            "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n    n = n-1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += nums[index]\n        nums.pop(index)\n    return result\n\nprint(nth_perm(7, 4)) #should return '1023'\nprint(nth_perm(4, 4)) #should return '0231'",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    result = []\n    \n    # Convert n to a 0-based index\n    n -= 1\n    \n    while d > 0:\n        perm_count //= d\n        digit_index = n // perm_count\n        result.append(digits[digit_index])\n        digits.pop(digit_index)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        factorial = math.factorial(i)\n        index = (n // factorial) % len(digits)\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        \n    result += digits[0]\n    \n    return result\n\n# Testing\nprint(nth_perm(7, 4))  # '1023'\nprint(nth_perm(4, 4))  # '0231'",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]  # create a list of digits\n    \n    result = \"\"\n    \n    # calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # if n is larger than the number of permutations, return an empty string\n    if n > num_permutations:\n        return \"\"\n    \n    for i in range(d, 0, -1):\n        # calculate the index of the current digit in the permutation\n        index = (n % math.factorial(i)) // math.factorial(i-1)\n        \n        # append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # remove the used digit from the list\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        quotient, remainder = divmod(n, divisor)\n        result += str(digits.pop(quotient))\n        n = remainder\n    \n    return result",
            "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits.pop(index)\n        result += str(digit)\n\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result.append(digits.pop(index))\n        \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty string to store the permutation\n    perm = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # Calculate the index of the digit to use\n        index = n // fact\n        \n        # Update n for the next iteration\n        n = n % fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the used digit from the list\n        digits.remove(digits[index])\n    \n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_digits = []\n    for i in range(d-1, -1, -1):\n        count = math.factorial(i)\n        index = math.ceil(n/count) - 1\n        digit = digits[index]\n        perm_digits.append(digit)\n        digits.remove(digit)\n        n = n % count\n    return ''.join(perm_digits)"
        ],
        "1": [
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n <= 0 or n > perm_count:\n        return \"Invalid input\"\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = n // perm_count\n        result.append(digits.pop(index))\n        n %= perm_count\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    if n > num_perm:\n        return \"Invalid input\"\n    result = []\n    while d > 0:\n        num_perm /= d\n        index = int(math.ceil(n / num_perm) - 1)\n        result.append(digits.pop(index))\n        n -= num_perm * index\n        d -= 1\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the result\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1 # adjust for zero-based index\n    for i in range(d - 1, -1, -1):\n        f = math.factorial(i)\n        idx = n // f\n        n %= f\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d):\n        # calculate the factorial of (d - 1 - i)\n        fact = math.factorial(d - 1 - i)\n        \n        # find the index of the next digit\n        index = math.ceil(n / fact) - 1\n        \n        # append the digit to the result string\n        result += str(digits[index])\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n for the next iteration\n        n %= fact\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n // perms)\n        result += digits[index]\n        digits.pop(index)\n        n %= perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = \"\"\n\n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n\n        # Find the index of the digit to append to the result\n        index = n // factorial\n\n        # Append the digit to the result\n        result += digits[index]\n\n        # Remove the digit from the digits list\n        digits.pop(index)\n\n        # Update n to the remaining permutation\n        n %= factorial\n\n    return result",
            "def nth_perm(n, d):\n    items = [str(i) for i in range(d)]\n    num_perms = math.factorial(d)\n    if n > num_perms or n <= 0:\n        return \"Invalid input\"\n    result = \"\"\n    n -= 1\n    for i in range(d):\n        num_perms = num_perms / (d - i)\n        index = int(n / num_perms)\n        result += items[index]\n        items.pop(index)\n        n = n % num_perms\n    return result\n\nprint(nth_perm(7,4))",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n -= 1\n    \n    for i in range(d-1,0,-1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n %= fact\n        fact //= i\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        n = n % fact\n        permutation += digits.pop(index)\n    \n    return permutation",
            "def nth_perm(n, d):\n    digits = ''.join(str(x) for x in range(d))\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return None\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        total_perms //= i\n        index = n // total_perms\n        digit = digits[index]\n        result.append(digit)\n        \n        digits = digits[:index] + digits[index+1:]\n        n %= total_perms\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    return ''.join(sorted(digits, key=lambda x: int(x)**n))",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))  # List of digits from 0 to d-1\n    num_permutations = math.factorial(d)  # Total number of permutations\n\n    if n < 1 or n > num_permutations:\n        return \"Invalid input\"\n\n    result = \"\"\n    n -= 1  # Adjust n to be zero-based\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)  # Calculate index of current digit\n        result += digits.pop(index)  # Add current digit to result\n        n %= math.factorial(i-1)  # Update n to get index for next digit\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n = n - 1\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        perm += digits[index]\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return perm"
        ],
        "2": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n = n - 1\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % math.factorial(i-1)\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = '0123456789'[:d]\n    num_permutations = math.factorial(d)\n    \n    if n < 1 or n > num_permutations:\n        return \"Invalid n\"\n    \n    result = \"\"\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n = n % math.factorial(i)\n    \n    return result",
            "def nth_perm(n,d):\n    # create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the number of permutations for d digits\n    total_perms = math.factorial(d)\n    \n    # if n is greater than total_perms, return None\n    if n > total_perms:\n        return None\n    \n    # create an empty string to store the result\n    result = ''\n    \n    # iterate through each digit\n    for i in range(d):\n        # calculate the number of permutations for remaining digits\n        perms = total_perms // (d - i)\n        \n        # calculate the index of the digit to add to the result\n        index = (n - 1) // perms\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list of digits\n        digits.pop(index)\n        \n        # update n and total_perms\n        n = n % perms\n        total_perms = perms\n    \n    # return the result\n    return result",
            "def nth_perm(n, d):\n    digits = '0123456789'[:d]\n    perms = math.factorial(d)\n    n -= 1\n    result = ''\n    \n    for i in range(d):\n        perms //= d - i\n        index = n // perms\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n %= perms\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = (n-1) // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return result",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    \n    result += digits[0]\n    \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = ''\n\n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n\n    # Iterate through the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the index of the current digit\n        index = (n - 1) // (factorial // i)\n\n        # Append the digit at the calculated index to the result\n        result += digits[index]\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n and factorial for the next iteration\n        n = n - (index * factorial // i)\n        factorial = factorial // i\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while len(digits) > 0:\n        size = math.factorial(len(digits)-1)\n        index = (n-1) // size\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        n -= size * index\n    return result",
            "import math\ndef nth_perm(n,d):\n    # convert n to 0-indexed\n    n -= 1\n    \n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize an empty result string\n    result = \"\"\n    \n    # loop through all digits\n    for i in range(d):\n        # calculate the factorial of d-i-1\n        factorial = math.factorial(d-i-1)\n        \n        # find the index of the digit to be added to the result string\n        index = n // factorial\n        \n        # add the digit to the result string\n        result += digits[index]\n        \n        # remove the digit from the list of digits\n        digits.pop(index)\n        \n        # update n\n        n = n % factorial\n    \n    # return the result string\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    while len(result) < d:\n        total_permutations = math.factorial(d - 1 - len(result))\n        \n        index = math.ceil(n / total_permutations) - 1\n        result.append(digits[index])\n        digits.pop(index)\n        \n        n %= total_permutations\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = ''\n    while d > 0:\n        f = math.factorial(d-1)\n        idx = (n-1) // f\n        result += nums[idx]\n        nums.pop(idx)\n        n -= idx * f\n        d -= 1\n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n = n % div\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit in the permutation\n        index = (n // fact) % i\n        \n        # Add the digit at the index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update the value of n\n        n %= fact\n        \n        # Update the value of fact\n        fact //= i\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits[index]\n        digits.remove(digit)\n        permutation += str(digit)\n        n = n % math.factorial(d - i - 1)\n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n\n    result = ''\n    while d > 0:\n        fact = math.factorial(d - 1)\n        index = math.ceil(n / fact) - 1\n\n        result += str(digits[index])\n        digits.pop(index)\n\n        n = n % fact\n        d -= 1\n\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of (d-1)\n    factorial = math.factorial(d - 1)\n    \n    # Iterate through each digit\n    for i in range(d):\n        # Calculate the index of the next digit\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n = n % factorial\n        if i < d - 1:\n            factorial = factorial // (d - 1 - i)\n    \n    # Return the result string\n    return result\n\n# Testing the function\nprint(nth_perm(1, 3))  # should return '012'\nprint(nth_perm(7, 4))  # should return '1023'",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i)\n    result += digits[0]\n    return result",
            "def nth_perm(n, d):\n    nums = []\n    for i in range(d):\n        nums.append(i)\n    \n    perms = math.factorial(d)\n    if n > perms:\n        return None\n    \n    result = ''\n    n -= 1\n    while d > 0:\n        perms //= d\n        index = n // perms\n        result += str(nums[index])\n        nums.pop(index)\n        n %= perms\n        d -= 1\n    \n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = list(range(d))\n    \n    # Initialize the result string\n    result = ''\n    \n    # Loop through the digits in reverse order\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit to add to the result\n        index = n // factorial\n        \n        # Add the digit to the result\n        result += str(digits[index])\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n %= factorial\n    \n    return result"
        ],
        "3": [
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.pop(index)\n        n -= index * math.factorial(i)\n        \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d - 1)\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through each digit position\n    for i in range(d - 1, 0, -1):\n        # Calculate the index of the next digit in digits\n        index = (n - 1) // fact\n        \n        # Add the next digit to the result\n        result += digits[index]\n        \n        # Remove the next digit from digits\n        digits.pop(index)\n        \n        # Update n and fact for the next iteration\n        n = n - index * fact\n        fact = fact // i\n    \n    # Add the last digit to the result\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        idx = math.ceil(n / math.factorial(i-1)) - 1\n        result += digits[idx]\n        digits.remove(digits[idx])\n        n = n % math.factorial(i-1)\n        \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        digit = digits[index]\n        permutation += str(digit)\n        digits.remove(digit)\n        n %= div\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        # Find the index of the next digit\n        index = n // math.factorial(d-1)\n        result += digits[index]\n        \n        # Remove the digit from the list of available digits\n        digits.remove(digits[index])\n        \n        # Update n and d for the next iteration\n        n %= math.factorial(d-1)\n        d -= 1\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n\n    result = ''\n    for i in range(d, 0, -1):\n        index = math.floor((n-1) / math.factorial(i-1))\n        result += digits.pop(index)\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1  # adjust n to account for 0-based indexing\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        result.append(digits[index])\n        digits.pop(index)\n        n %= fact\n    return ''.join(result)",
            "def nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize the result string\n    result = \"\"\n    \n    # calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # iterate through the digits\n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to add to the result\n        index = (n-1) // fact\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n and fact\n        n = n - index * fact\n        fact = fact // i\n        \n    # add the last digit to the result\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        n %= math.factorial(i)\n        permutation += str(digits[index])\n        digits.pop(index)\n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    digits = ''.join([str(i) for i in range(d)])\n    num_perm = math.factorial(d)\n    \n    if n > num_perm or n <= 0:\n        return \"Invalid input\"\n    \n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = n // num_perm\n        n %= num_perm\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n    \n    return result",
            "def nth_perm(n, d):\n    # Convert n and d to strings\n    n = str(n)\n    d = str(d)\n\n    # Calculate the total number of permutations for d digits\n    total_permutations = math.factorial(int(d))\n\n    # Calculate the permutation index within the total permutations\n    permutation_index = int(n) - 1\n\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(int(d))]\n\n    # Create a result list to store the selected digits\n    result = []\n\n    # Iterate over the digits\n    for i in range(int(d)):\n        # Calculate the factorial for the remaining digits\n        factorial = math.factorial(int(d) - i - 1)\n\n        # Calculate the index of the digit to select\n        index = permutation_index // factorial\n\n        # Select the digit at the calculated index\n        digit = digits[index]\n\n        # Add the selected digit to the result list\n        result.append(digit)\n\n        # Remove the selected digit from the digits list\n        digits.remove(digit)\n\n        # Update the permutation index\n        permutation_index %= factorial\n\n    # Join the result list and return the result as a string\n    return ''.join(result)\n\n# Testing the function\nprint(nth_perm(1, 3))  # Output: '012'\nprint(nth_perm(7, 4))  # Output: '1023'\nprint(nth_perm(1, 4))  # Output: '0123'",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    permutation = \"\"\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        # calculate the factorial of d\n        factorial = math.factorial(d)\n\n        # calculate the index of the digit to add to the permutation\n        index = n // factorial\n\n        # add the digit to the permutation\n        permutation += str(digits[index])\n\n        # remove the digit from the list\n        digits.pop(index)\n\n        # update the value of n\n        n %= factorial\n\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(index)\n    \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the number of permutations for the remaining digits\n        perms = math.factorial(i - 1)\n        \n        # Calculate the index of the digit to append to the result\n        index = (n - 1) // perms\n        \n        # Append the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n to find the next digit\n        n = n - (perms * index)\n    \n    return result"
        ],
        "4": [
            "def nth_perm(n,d):\n    # Convert n to zero-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Compute the factorial of the current digit\n        factorial = math.factorial(i)\n        \n        # Compute the index of the current digit in the permutation\n        index = n // factorial\n        \n        # Append the digit at the computed index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n to the remaining index\n        n %= factorial\n    \n    # Return the result string\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Generate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n %= factorial\n        if i > 0:\n            factorial //= i\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i - 1)) - 1\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = ''\n    \n    while len(result) < d:\n        count = math.factorial(d - len(result) - 1)\n        index = math.ceil(n / count) - 1\n        result += digits[index]\n        digits.pop(index)\n        n %= count\n    \n    return result",
            "def nth_perm(n, d):\n    digits = '0123456789'\n    result = ''\n    \n    # calculate the number of permutations\n    perms = math.factorial(d)\n    \n    # decrement n to start at 0 index\n    n -= 1\n    \n    # iterate over the digits\n    for i in range(d, 0, -1):\n        perms //= i\n        \n        # find the index of the current digit\n        index = n // perms\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list of available digits\n        digits = digits[:index] + digits[index+1:]\n        \n        # update n to the remaining permutation\n        n %= perms\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits\n    digits = list(range(d))\n    # initialize the result string\n    result = ''\n    \n    # iterate over the digits\n    for i in range(d, 0, -1):\n        # calculate the factorial of i-1\n        fact = math.factorial(i-1)\n        # calculate the index of the digit to select\n        index = (n-1) // fact\n        # append the selected digit to the result string\n        result += str(digits[index])\n        # remove the selected digit from the list\n        digits.pop(index)\n        # update n\n        n = n - index*fact\n        \n    # return the result string\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d)) # create a list of digits from 0 to d-1\n    result = [] # create an empty list to store the result\n    n -= 1 # decrement n by 1 to account for 0-based indexing\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1) # calculate the index of the current digit\n        digit = digits[index] # get the digit at the calculated index\n        result.append(str(digit)) # add the digit to the result list\n        digits.remove(digit) # remove the digit from the available digits list\n        n %= math.factorial(d-i-1) # update n to be the remainder\n    \n    return ''.join(result) # return the result as a string\n\nprint(nth_perm(1,3))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 4))\nprint(nth_perm(8, 10))",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d - 1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    result += digits[0]\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n = n - index * math.factorial(i-1)\n        \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n -= index * math.factorial(i-1)\n    return result\n\nprint(nth_perm(1,3)) # '012'\nprint(nth_perm(7,4)) # '1023'\nprint(nth_perm(1,4)) # '0123'\nprint(nth_perm(8,10)) # '0123457698'",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    for i in range(d - 1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d - 1, 0, -1):\n        div = math.factorial(i)\n        index = n // div\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % div\n\n    result += str(digits[0])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    \n    while d > 0:\n        f = math.factorial(d - 1)\n        index = n // f\n        perm += digits[index]\n        digits.pop(index)\n        n = n % f\n        d -= 1\n    \n    return perm",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n -= index * math.factorial(i)\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = math.ceil(n / fact) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n %= fact\n    return result\n\nprint(nth_perm(1, 3))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 4))\nprint(nth_perm(8, 10))",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = (n-1) // fact\n        result += digits.pop(index)\n        n = n - index * fact\n\n    return result",
            "def nth_perm(n,d):\n    # convert n to 0-based index\n    n -= 1\n    \n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the number of permutations for d digits\n    num_permutations = math.factorial(d)\n    \n    # initialize the result\n    result = []\n    \n    # loop through the digits\n    for i in range(d):\n        # calculate the number of permutations for the remaining digits\n        num_permutations //= (d - i)\n        \n        # calculate the index of the digit in the remaining digits\n        digit_index = n // num_permutations\n        \n        # add the digit to the result\n        result.append(digits[digit_index])\n        \n        # remove the digit from the list\n        digits.pop(digit_index)\n        \n        # update n to the remainder of n divided by the number of permutations\n        n %= num_permutations\n    \n    # convert the result to a string and return it\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += digits[index]\n        digits.remove(digits[index])\n        n = (n-1) % math.factorial(i-1) + 1\n    \n    return result"
        ]
    },
    "2": {
        "0": [
            "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits.pop(index)\n        result += str(digit)\n\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result.append(digits.pop(index))\n        \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty string to store the permutation\n    perm = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # Calculate the index of the digit to use\n        index = n // fact\n        \n        # Update n for the next iteration\n        n = n % fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the used digit from the list\n        digits.remove(digits[index])\n    \n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_digits = []\n    for i in range(d-1, -1, -1):\n        count = math.factorial(i)\n        index = math.ceil(n/count) - 1\n        digit = digits[index]\n        perm_digits.append(digit)\n        digits.remove(digit)\n        n = n % count\n    return ''.join(perm_digits)",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    # calculate the total number of permutations for d digits\n    num_perm = math.factorial(d)\n    \n    # iterate through each digit position\n    for i in range(d, 0, -1):\n        # calculate the index of the current digit\n        index = (n-1) // (num_perm // i)\n        \n        # append the digit at the calculated index to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n and num_perm for the next digit position\n        n = n - index * (num_perm // i)\n        num_perm = num_perm // i\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n %= math.factorial(i)\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize result as an empty string\n    result = ''\n    \n    # iterate from d-1 down to 0\n    for i in range(d-1, -1, -1):\n        # calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # calculate the index of the digit in digits that should be added to result\n        index = (n // fact) % (i + 1)\n        \n        # add the digit to result and remove it from digits\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "```python\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        idx = n // div\n        n %= div\n        result += str(digits[idx])\n        digits.pop(idx)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result += str(digits.pop(index))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n > perm_count or n < 1:\n        return \"Invalid input\"\n    n -= 1  # 0-indexing\n    \n    result = []\n    while d > 0:\n        perm_count //= d\n        index = n // perm_count\n        digit = digits.pop(index)\n        result.append(digit)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Get the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Create an empty string to store the resulting permutation\n    permutation = ''\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Get the index of the digit to be added to the permutation\n        index = (n-1) // factorial\n        \n        # Add the digit to the permutation\n        permutation += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % factorial\n        \n        # Update the factorial\n        factorial = factorial // i\n    \n    # Add the last remaining digit to the permutation\n    permutation += digits[0]\n    \n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Create a list to store the result\n    result = []\n\n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n\n    # Iterate through the digits\n    for i in range(d, 0, -1):\n        # Calculate the index of the next digit\n        index = math.ceil(n / (factorial // i)) - 1\n\n        # Add the next digit to the result\n        result.append(digits[index])\n\n        # Remove the next digit from the list of digits\n        digits.pop(index)\n\n        # Update n and factorial\n        n = n % (factorial // i)\n        factorial = factorial // i\n\n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.floor((n - 1) / math.factorial(i - 1))\n        result += nums[index]\n        nums.pop(index)\n        n = n - (index * math.factorial(i - 1))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Check if n is within the range of valid permutations\n    if n <= 0 or n > total_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Loop through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = (n - 1) // math.factorial(i)\n        \n        # Add the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # Remove the added digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n - (index * math.factorial(i))\n    \n    return result"
        ],
        "1": [
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the result\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1 # adjust for zero-based index\n    for i in range(d - 1, -1, -1):\n        f = math.factorial(i)\n        idx = n // f\n        n %= f\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d):\n        # calculate the factorial of (d - 1 - i)\n        fact = math.factorial(d - 1 - i)\n        \n        # find the index of the next digit\n        index = math.ceil(n / fact) - 1\n        \n        # append the digit to the result string\n        result += str(digits[index])\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n for the next iteration\n        n %= fact\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n // perms)\n        result += digits[index]\n        digits.pop(index)\n        n %= perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = \"\"\n\n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n\n        # Find the index of the digit to append to the result\n        index = n // factorial\n\n        # Append the digit to the result\n        result += digits[index]\n\n        # Remove the digit from the digits list\n        digits.pop(index)\n\n        # Update n to the remaining permutation\n        n %= factorial\n\n    return result",
            "def nth_perm(n, d):\n    items = [str(i) for i in range(d)]\n    num_perms = math.factorial(d)\n    if n > num_perms or n <= 0:\n        return \"Invalid input\"\n    result = \"\"\n    n -= 1\n    for i in range(d):\n        num_perms = num_perms / (d - i)\n        index = int(n / num_perms)\n        result += items[index]\n        items.pop(index)\n        n = n % num_perms\n    return result\n\nprint(nth_perm(7,4))",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n -= 1\n    \n    for i in range(d-1,0,-1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n %= fact\n        fact //= i\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        n = n % fact\n        permutation += digits.pop(index)\n    \n    return permutation",
            "def nth_perm(n, d):\n    digits = ''.join(str(x) for x in range(d))\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return None\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        total_perms //= i\n        index = n // total_perms\n        digit = digits[index]\n        result.append(digit)\n        \n        digits = digits[:index] + digits[index+1:]\n        n %= total_perms\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    return ''.join(sorted(digits, key=lambda x: int(x)**n))",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))  # List of digits from 0 to d-1\n    num_permutations = math.factorial(d)  # Total number of permutations\n\n    if n < 1 or n > num_permutations:\n        return \"Invalid input\"\n\n    result = \"\"\n    n -= 1  # Adjust n to be zero-based\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)  # Calculate index of current digit\n        result += digits.pop(index)  # Add current digit to result\n        n %= math.factorial(i-1)  # Update n to get index for next digit\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n = n - 1\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        perm += digits[index]\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return perm",
            "def nth_perm(n,d):\n    digits = ''.join([str(i) for i in range(d)]) # create a string of all digits from 0 to d-1\n    perms = math.factorial(d) # calculate the total number of permutations\n    \n    if n > perms: # if n is greater than the total number of permutations, return an empty string\n        return ''\n    \n    result = ''\n    n -= 1 # subtract 1 from n to account for zero-indexing\n    \n    for i in range(d): # loop through all the digits\n        perms //= d - i # calculate the number of permutations for each digit position\n        index = n // perms # calculate the index of the digit to use\n        result += digits[index] # append the digit to the result string\n        digits = digits[:index] + digits[index+1:] # remove the used digit from the string of available digits\n        n %= perms # update n to the remainder after dividing by the number of permutations\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        div = math.factorial(i - 1)\n        index = n // div\n        result += digits[index]\n        digits.remove(digits[index])\n        n %= div\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n\n    for i in range(d, 0, -1):\n        div, n = divmod(n, math.factorial(i-1))\n        result.append(digits[div])\n        digits.remove(digits[div])\n\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(map(str, range(d)))\n    num_perm = math.factorial(d)\n    \n    result = \"\"\n    \n    for i in range(d-1, 0, -1):\n        num_perm //= i\n        \n        index = (n-1) // num_perm\n        n %= num_perm\n        \n        result += digits[index]\n        digits.pop(index)\n    \n    result += digits[0]\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n\n    result = \"\"\n    for i in range(d):\n        count = math.factorial(d - 1 - i)\n        index = (n - 1) // count\n        result += digits[index]\n        digits.pop(index)\n        n = n - count * index\n\n    return result\n\nprint(nth_perm(1, 3))\nprint(nth_perm(7, 4))\nprint(nth_perm(4, 4))",
            "def nth_perm(n,d):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // factorial(i-1)\n        perm += digits[index]\n        digits.remove(digits[index])\n        n = n % factorial(i-1)\n\n    return perm"
        ],
        "2": [
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = (n-1) // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return result",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    \n    result += digits[0]\n    \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = ''\n\n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n\n    # Iterate through the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the index of the current digit\n        index = (n - 1) // (factorial // i)\n\n        # Append the digit at the calculated index to the result\n        result += digits[index]\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n and factorial for the next iteration\n        n = n - (index * factorial // i)\n        factorial = factorial // i\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while len(digits) > 0:\n        size = math.factorial(len(digits)-1)\n        index = (n-1) // size\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        n -= size * index\n    return result",
            "import math\ndef nth_perm(n,d):\n    # convert n to 0-indexed\n    n -= 1\n    \n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize an empty result string\n    result = \"\"\n    \n    # loop through all digits\n    for i in range(d):\n        # calculate the factorial of d-i-1\n        factorial = math.factorial(d-i-1)\n        \n        # find the index of the digit to be added to the result string\n        index = n // factorial\n        \n        # add the digit to the result string\n        result += digits[index]\n        \n        # remove the digit from the list of digits\n        digits.pop(index)\n        \n        # update n\n        n = n % factorial\n    \n    # return the result string\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    while len(result) < d:\n        total_permutations = math.factorial(d - 1 - len(result))\n        \n        index = math.ceil(n / total_permutations) - 1\n        result.append(digits[index])\n        digits.pop(index)\n        \n        n %= total_permutations\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    perm = \"\"\n    n = n - 1\n\n    for i in range(d):\n        factorial = math.factorial(d - i - 1)\n        digit_index = n // factorial\n        digit = digits[digit_index]\n        perm += str(digit)\n        digits.remove(digit)\n        n = n % factorial\n\n    return perm",
            "def nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = ''\n    while d > 0:\n        f = math.factorial(d-1)\n        idx = (n-1) // f\n        result += nums[idx]\n        nums.pop(idx)\n        n -= idx * f\n        d -= 1\n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n = n % div\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit in the permutation\n        index = (n // fact) % i\n        \n        # Add the digit at the index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update the value of n\n        n %= fact\n        \n        # Update the value of fact\n        fact //= i\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits[index]\n        digits.remove(digit)\n        permutation += str(digit)\n        n = n % math.factorial(d - i - 1)\n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n\n    result = ''\n    while d > 0:\n        fact = math.factorial(d - 1)\n        index = math.ceil(n / fact) - 1\n\n        result += str(digits[index])\n        digits.pop(index)\n\n        n = n % fact\n        d -= 1\n\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of (d-1)\n    factorial = math.factorial(d - 1)\n    \n    # Iterate through each digit\n    for i in range(d):\n        # Calculate the index of the next digit\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n = n % factorial\n        if i < d - 1:\n            factorial = factorial // (d - 1 - i)\n    \n    # Return the result string\n    return result\n\n# Testing the function\nprint(nth_perm(1, 3))  # should return '012'\nprint(nth_perm(7, 4))  # should return '1023'",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i)\n    result += digits[0]\n    return result",
            "def nth_perm(n, d):\n    nums = []\n    for i in range(d):\n        nums.append(i)\n    \n    perms = math.factorial(d)\n    if n > perms:\n        return None\n    \n    result = ''\n    n -= 1\n    while d > 0:\n        perms //= d\n        index = n // perms\n        result += str(nums[index])\n        nums.pop(index)\n        n %= perms\n        d -= 1\n    \n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = list(range(d))\n    \n    # Initialize the result string\n    result = ''\n    \n    # Loop through the digits in reverse order\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit to add to the result\n        index = n // factorial\n        \n        # Add the digit to the result\n        result += str(digits[index])\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n %= factorial\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n -= index * math.factorial(i)\n    result += digits[0]\n    return result"
        ],
        "3": [
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        idx = math.ceil(n / math.factorial(i-1)) - 1\n        result += digits[idx]\n        digits.remove(digits[idx])\n        n = n % math.factorial(i-1)\n        \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        digit = digits[index]\n        permutation += str(digit)\n        digits.remove(digit)\n        n %= div\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        # Find the index of the next digit\n        index = n // math.factorial(d-1)\n        result += digits[index]\n        \n        # Remove the digit from the list of available digits\n        digits.remove(digits[index])\n        \n        # Update n and d for the next iteration\n        n %= math.factorial(d-1)\n        d -= 1\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n\n    result = ''\n    for i in range(d, 0, -1):\n        index = math.floor((n-1) / math.factorial(i-1))\n        result += digits.pop(index)\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1  # adjust n to account for 0-based indexing\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        result.append(digits[index])\n        digits.pop(index)\n        n %= fact\n    return ''.join(result)",
            "def nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize the result string\n    result = \"\"\n    \n    # calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # iterate through the digits\n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to add to the result\n        index = (n-1) // fact\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n and fact\n        n = n - index * fact\n        fact = fact // i\n        \n    # add the last digit to the result\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        n %= math.factorial(i)\n        permutation += str(digits[index])\n        digits.pop(index)\n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    digits = ''.join([str(i) for i in range(d)])\n    num_perm = math.factorial(d)\n    \n    if n > num_perm or n <= 0:\n        return \"Invalid input\"\n    \n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = n // num_perm\n        n %= num_perm\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n    \n    return result",
            "def nth_perm(n, d):\n    # Convert n and d to strings\n    n = str(n)\n    d = str(d)\n\n    # Calculate the total number of permutations for d digits\n    total_permutations = math.factorial(int(d))\n\n    # Calculate the permutation index within the total permutations\n    permutation_index = int(n) - 1\n\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(int(d))]\n\n    # Create a result list to store the selected digits\n    result = []\n\n    # Iterate over the digits\n    for i in range(int(d)):\n        # Calculate the factorial for the remaining digits\n        factorial = math.factorial(int(d) - i - 1)\n\n        # Calculate the index of the digit to select\n        index = permutation_index // factorial\n\n        # Select the digit at the calculated index\n        digit = digits[index]\n\n        # Add the selected digit to the result list\n        result.append(digit)\n\n        # Remove the selected digit from the digits list\n        digits.remove(digit)\n\n        # Update the permutation index\n        permutation_index %= factorial\n\n    # Join the result list and return the result as a string\n    return ''.join(result)\n\n# Testing the function\nprint(nth_perm(1, 3))  # Output: '012'\nprint(nth_perm(7, 4))  # Output: '1023'\nprint(nth_perm(1, 4))  # Output: '0123'",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    permutation = \"\"\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        # calculate the factorial of d\n        factorial = math.factorial(d)\n\n        # calculate the index of the digit to add to the permutation\n        index = n // factorial\n\n        # add the digit to the permutation\n        permutation += str(digits[index])\n\n        # remove the digit from the list\n        digits.pop(index)\n\n        # update the value of n\n        n %= factorial\n\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(index)\n    \n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the number of permutations for the remaining digits\n        perms = math.factorial(i - 1)\n        \n        # Calculate the index of the digit to append to the result\n        index = (n - 1) // perms\n        \n        # Append the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n to find the next digit\n        n = n - (perms * index)\n    \n    return result",
            "def nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Create a result string\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the factorial of d-i-1\n        factorial = math.factorial(d-i-1)\n        \n        # Calculate the index of the digit to add to the result\n        index = n // factorial\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n\n        n -= index * factorial\n    \n    return result",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = []\n    \n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = (n - 1) // factorial\n        result.append(str(digits.pop(index)))\n        n -= index * factorial\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    nums = [str(i) for i in range(d)]\n    res = \"\"\n    \n    for i in range(1, d):\n        index = (n - 1) // math.factorial(d - i)\n        res += nums[index]\n        nums.remove(nums[index])\n        n = n - (index * math.factorial(d - i))\n        \n    res += nums[0]\n    \n    return res",
            "def nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize result variable\n    result = ''\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Loop through each digit position\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit in digits\n        index = (n-1) // factorial\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.remove(digits[index])\n        \n        # Update n and factorial\n        n = n - (index * factorial)\n        factorial = factorial // i\n    \n    # Add the last digit to the result\n    result += digits[0]\n    \n    return result"
        ],
        "4": [
            "import math\ndef nth_perm(n,d):\n    # create a list of digits\n    digits = list(range(d))\n    # initialize the result string\n    result = ''\n    \n    # iterate over the digits\n    for i in range(d, 0, -1):\n        # calculate the factorial of i-1\n        fact = math.factorial(i-1)\n        # calculate the index of the digit to select\n        index = (n-1) // fact\n        # append the selected digit to the result string\n        result += str(digits[index])\n        # remove the selected digit from the list\n        digits.pop(index)\n        # update n\n        n = n - index*fact\n        \n    # return the result string\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d)) # create a list of digits from 0 to d-1\n    result = [] # create an empty list to store the result\n    n -= 1 # decrement n by 1 to account for 0-based indexing\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1) # calculate the index of the current digit\n        digit = digits[index] # get the digit at the calculated index\n        result.append(str(digit)) # add the digit to the result list\n        digits.remove(digit) # remove the digit from the available digits list\n        n %= math.factorial(d-i-1) # update n to be the remainder\n    \n    return ''.join(result) # return the result as a string\n\nprint(nth_perm(1,3))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 4))\nprint(nth_perm(8, 10))",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d - 1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    result += digits[0]\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n = n - index * math.factorial(i-1)\n        \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.pop(index)\n        n -= index * math.factorial(i-1)\n    return result\n\nprint(nth_perm(1,3)) # '012'\nprint(nth_perm(7,4)) # '1023'\nprint(nth_perm(1,4)) # '0123'\nprint(nth_perm(8,10)) # '0123457698'",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    for i in range(d - 1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d - 1, 0, -1):\n        div = math.factorial(i)\n        index = n // div\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % div\n\n    result += str(digits[0])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    \n    while d > 0:\n        f = math.factorial(d - 1)\n        index = n // f\n        perm += digits[index]\n        digits.pop(index)\n        n = n % f\n        d -= 1\n    \n    return perm",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n -= index * math.factorial(i)\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = math.ceil(n / fact) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n %= fact\n    return result\n\nprint(nth_perm(1, 3))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 4))\nprint(nth_perm(8, 10))",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = (n-1) // fact\n        result += digits.pop(index)\n        n = n - index * fact\n\n    return result",
            "def nth_perm(n,d):\n    # convert n to 0-based index\n    n -= 1\n    \n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the number of permutations for d digits\n    num_permutations = math.factorial(d)\n    \n    # initialize the result\n    result = []\n    \n    # loop through the digits\n    for i in range(d):\n        # calculate the number of permutations for the remaining digits\n        num_permutations //= (d - i)\n        \n        # calculate the index of the digit in the remaining digits\n        digit_index = n // num_permutations\n        \n        # add the digit to the result\n        result.append(digits[digit_index])\n        \n        # remove the digit from the list\n        digits.pop(digit_index)\n        \n        # update n to the remainder of n divided by the number of permutations\n        n %= num_permutations\n    \n    # convert the result to a string and return it\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += digits[index]\n        digits.remove(digits[index])\n        n = (n-1) % math.factorial(i-1) + 1\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    for i in range(d):\n        index = math.factorial(d-i-1)\n        digit = digits[(n-1)//index]\n        result += str(digit)\n        digits.remove(digit)\n        n = (n-1) % index + 1\n    return result",
            "import math\ndef nth_perm(n, d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # check if n is greater than the total number of permutations\n    if n > total_permutations:\n        return \"Invalid input\"\n    \n    # initialize the result\n    result = \"\"\n    \n    # calculate the index of the first digit in the current permutation\n    first_index = (n - 1) // (total_permutations // d)\n    \n    # append the first digit to the result\n    result += digits[first_index]\n    \n    # remove the first digit from the list of digits\n    digits.remove(digits[first_index])\n    \n    # calculate the index of the second digit in the current permutation\n    second_index = (n - 1) % (total_permutations // d)\n    \n    # iterate through the remaining digits\n    for i in range(d - 1):\n        # calculate the index of the current digit in the current permutation\n        index = second_index // math.factorial(d - 2 - i)\n        \n        # append the current digit to the result\n        result += digits[index]\n        \n        # remove the current digit from the list of digits\n        digits.remove(digits[index])\n        \n        # update the second index\n        second_index = second_index % math.factorial(d - 2 - i)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    length = math.factorial(d)\n    if n <= 0 or n > length:\n        return \"\"\n    result = \"\"\n    n -= 1\n    for i in range(d):\n        length //= d - i\n        index = n // length\n        result += digits[index]\n        digits.pop(index)\n        n %= length\n    return result\n\nprint(nth_perm(1, 3))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 4))\nprint(nth_perm(8, 10))",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        index = n // divisor\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n %= divisor\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d-1, 0, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        perm += digits[index]\n        digits.pop(index)\n        n %= fact\n    perm += digits[0]\n    return perm"
        ]
    }
}