{
    "0": [
        {
            "content": "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n    return result",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    # Generate the initial list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Calculate the factorial of d - 1\n    fact = math.factorial(d - 1)\n    \n    # Loop through the digits\n    for i in range(d - 1, 0, -1):\n        # Calculate the index of the current digit\n        index = math.ceil(n / fact) - 1\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and fact for the next iteration\n        n = n % fact\n        fact = fact // i\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result.append(digits[index])\n        digits.pop(index)\n        n -= index * math.factorial(i-1)\n    \n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    # Iterate from the highest digit to the lowest digit\n    for i in range(d, 0, -1):\n        # Calculate the factorial of i-1\n        fact = math.factorial(i-1)\n        # Calculate the index of the digit in the permutation\n        index = (n-1) // fact\n        # Add the digit to the result\n        result += digits[index]\n        # Remove the digit from the list of available digits\n        digits.pop(index)\n        # Update n to find the next digit\n        n = (n-1) % fact + 1\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = []\n    \n    for i in range(1, d+1):\n        factorial = math.factorial(d-i)\n        index = math.ceil(n / factorial) - 1\n        digit = digits[index]\n        digits.remove(digit)\n        result.append(str(digit))\n        n = n % factorial\n    \n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = \"0123456789\"[:d]\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def get_permutation(n, digits):\n        if len(digits) == 1:\n            return digits\n\n        group_size = factorial(len(digits) - 1)\n        group_index = (n - 1) // group_size\n        remaining_index = (n - 1) % group_size\n\n        first_digit = digits[group_index]\n        remaining_digits = digits[:group_index] + digits[group_index+1:]\n\n        return first_digit + get_permutation(remaining_index+1, remaining_digits)\n\n    return get_permutation(n, digits)",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    # Convert n to 0-indexed\n    n -= 1\n\n    # Create a list of digits\n    digits = list(range(d))\n\n    # Initialize the result\n    result = ''\n\n    # Loop through the digits\n    for i in range(d):\n        # Calculate the factorial of d - i - 1\n        factorial = math.factorial(d - i - 1)\n\n        # Calculate the index of the digit to add to the result\n        index = n // factorial\n\n        # Add the digit to the result\n        result += str(digits[index])\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n\n        n = n % factorial\n\n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    # convert n to 0-based index\n    n -= 1\n    \n    # create a list of digits from 0 to d-1\n    digits = list(range(d))\n    \n    # calculate the number of permutations for d digits\n    total_permutations = math.factorial(d)\n    \n    # initialize the result string\n    result = ''\n    \n    # iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # calculate the index of the next digit in the permutation\n        index = n // (total_permutations // (i+1))\n        \n        # append the selected digit to the result string\n        result += str(digits[index])\n        \n        # remove the selected digit from the list of digits\n        digits.pop(index)\n        \n        # update n and total_permutations for the next iteration\n        n %= total_permutations // (i+1)\n        total_permutations //= (i+1)\n    \n    return result",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = ''.join(str(i) for i in range(d))\n    result = ''\n    for i in range(d):\n        total_perms = math.factorial(d - i - 1)\n        index = (n - 1) // total_perms\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n = (n - 1) % total_perms + 1\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    items = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n = n - 1\n    \n    for i in range(d-1,0,-1):\n        index = n // fact\n        result += items[index]\n        items.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += items[0]\n    \n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1  # Adjust n to account for 0 indexing\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        result += digits.pop(index)\n        n %= fact\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % div\n\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Find the factorial of i\n        factorial = math.factorial(i)\n        \n        # Find the index of the digit to append to the result string\n        index = n // factorial\n        \n        # Append the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n\n        n %= factorial\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    # Subtract 1 from n to make it 0-based\n    n -= 1\n    \n    # Calculate factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate over the digits and find the digit at each position\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit in the remaining digits list\n        index = n // factorial\n        \n        # Append the digit to the result\n        result += str(digits[index])\n        \n        # Remove the digit from the remaining digits list\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n = n % factorial\n        factorial = factorial // i\n    \n    # Append the last digit to the result\n    result += str(digits[0])\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)] # create a list of digits from 0 to d-1\n    result = '' # initialize the result as an empty string\n\n    n -= 1 # decrement n by 1 to account for 0-based indexing\n\n    for i in range(d-1, 0, -1):\n        div = math.factorial(i)\n        index = n // div # get the index of the digit to add to the result\n        result += digits.pop(index) # add the digit to the result and remove it from the list\n        n %= div # update n to the remainder\n\n    result += digits[0] # add the last digit to the result\n\n    return result",
            "logp": null
        },
        {
            "content": "```python\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    perm_count = math.factorial(d)\n    if n < 1 or n > perm_count:\n        return \"Invalid n\"\n    result = \"\"\n    n -= 1\n    while d > 0:\n        perm_count = perm_count // d\n        index = n // perm_count\n        result += digits[index]\n        digits.pop(index)\n        n = n % perm_count\n        d -= 1\n    return result\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        # compute the index of the digit to add to the result\n        index = n // math.factorial(i)\n        \n        # add the digit to the result\n        result += digits[index]\n        \n        # remove the digit from the list of digits\n        digits.remove(digits[index])\n        \n        # update n\n        n = n % math.factorial(i)\n        \n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = '0123456789'[:d]\n    result = ''\n    n -= 1\n    for i in range(d-1, 0, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n %= fact\n    result += digits[0]\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        idx = math.ceil(n / math.factorial(i-1)) - 1\n        digit = digits.pop(idx)\n        result += digit\n        n = n % math.factorial(i-1)\n        \n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Create an empty string to store the result\n    result = ''\n    \n    # Loop through the digits from d-1 to 1\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the next digit in the digits list\n        index = (n-1) // factorial\n        \n        # Append the next digit to the result string\n        result += digits[index]\n        \n        # Remove the next digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update the value of n for the next iteration\n        n = n % factorial\n        \n        # Update the value of factorial for the next iteration\n        factorial //= i\n    \n    # Append the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = n // fact\n        n = n % fact\n        result += str(digits[index])\n        digits.remove(digits[index])\n\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Calculate the total number of permutations\n    total_perms = math.factorial(d)\n\n    # Check if n is a valid input\n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n\n    # Create an empty string to store the result\n    result = \"\"\n\n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the number of permutations for the current digit\n        perms = total_perms // (i+1)\n\n        # Calculate the index of the digit to add to the result\n        index = (n - 1) // perms\n\n        # Add the digit to the result\n        result += digits[index]\n\n        # Remove the added digit from the list\n        digits.pop(index)\n\n        # Update n and total_perms for the next iteration\n        n = n % perms\n        total_perms = perms\n\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Decrement n by 1 to adjust for 0-based indexing\n    n -= 1\n    \n    # Iterate through the digits in reverse order\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the digit to be added to the result string\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n %= factorial\n        if i > 0:\n            factorial //= i\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n, d):\n    # Generate the digits in lexicographic order\n    digits = list(range(d))\n\n    # Initialize the result string\n    result = \"\"\n\n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n\n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit\n        index = (n-1) // factorial\n        # Append the current digit to the result string\n        result += str(digits.pop(index))\n        # Update n and factorial for the next iteration\n        n = (n-1) % factorial + 1\n        factorial //= i\n\n    # Append the last remaining digit to the result string\n    result += str(digits[0])\n\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        factorial = math.factorial(i)\n        index = (n - 1) // factorial\n        result += digits.pop(index)\n        n -= index * factorial\n    \n    return result",
            "logp": null
        },
        {
            "content": "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        digit = digits.pop(index)\n        result += str(digit)\n        n = n - (index * math.factorial(i))\n    \n    return result\n\nprint(nth_perm(1, 5))\nprint(nth_perm(2, 5))\nprint(nth_perm(5, 4))",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = (n-1) // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n - index * fact\n        \n    return result",
            "logp": null
        }
    ]
}