{
    "0": [
        {
            "content": "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40\n            bus_count = 0\n        else:\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost += 1.50\n                bus_count = 0\n    return '\u00a3{:.2f}'.format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in journey:\n        if isinstance(i, int):\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * bus_cost\n            total_cost += bus_count % 2 * bus_cost\n            bus_count = 0\n            total_cost += tube_cost\n    \n    total_cost += bus_count // 2 * bus_cost\n    total_cost += bus_count % 2 * bus_cost\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    tube_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            tube_count += 1\n            total_cost += 2.40\n        else:\n            bus_count += 1\n            total_cost += 1.50\n            \n            if bus_count >= 2:\n                total_cost -= 1.50\n                bus_count = 0\n        \n    return '\u00a3{:.2f}'.format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.00\n    is_previous_bus = False\n\n    for element in journey:\n        if isinstance(element, int):  # check if element is an integer (bus number)\n            if is_previous_bus:\n                total_cost += bus_fare  # add bus fare for the second bus in a set\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n        else:  # element is a string (tube name)\n            total_cost += tube_fare\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_cost * 2\n                i += 2\n            else:\n                total_cost += bus_cost\n                i += 1\n        else:\n            total_cost += tube_cost\n            i += 1\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        # if the current element is a tube name\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        # if the current element is a bus number\n        elif isinstance(journey[i], int):\n            # if there are at least two adjacent bus numbers\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += 2 * bus_fare\n                i += 1\n            # if there is only one bus number\n            else:\n                total_cost += bus_fare\n        \n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    bus_fare = 1.50\n    tube_fare = 2.40\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_count // 2 * bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count >= 2:\n        total_cost += bus_count // 2 * bus_fare\n\n    return '\u00a3' + '{:.2f}'.format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    total_cost = 0\n    is_previous_bus = False\n\n    for journey_element in journey:\n        if isinstance(journey_element, str):\n            # Tube journey\n            total_cost += 2.40\n            is_previous_bus = False\n        else:\n            # Bus journey\n            total_cost += 1.50\n\n            if is_previous_bus:\n                # Set of two adjacent bus journeys\n                total_cost -= 1.50\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # bus journey\n            total_cost += 1.5\n            \n            if i+1 < len(journey) and isinstance(journey[i+1], int):  # check if next journey is also a bus journey\n                total_cost += 1.5\n                i += 1  # skip the next journey as it has already been accounted for\n                \n        else:  # tube journey\n            total_cost += 2.4\n            \n        i += 1  # move to next journey\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if type(item) == int:\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * 1.5\n            bus_count = 0\n            total_cost += 2.4\n    \n    total_cost += bus_count // 2 * 1.5\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if type(item) == int:  # check if item is a bus number\n            bus_count += 1\n            if bus_count == 2:  # if there are 2 adjacent bus journeys\n                total_cost += bus_cost  # add bus cost for one journey\n                bus_count = 0  # reset bus count to 0\n        else:  # item is a tube name\n            total_cost += tube_cost  # add tube cost\n\n    if bus_count > 0:  # if there are any remaining single bus journeys\n        total_cost += bus_cost  # add bus cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)  # format total cost as currency",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i+1], int):\n                bus_count += 1\n                if bus_count % 2 == 0:\n                    total_cost += bus_cost\n            else:\n                total_cost += bus_cost\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.00\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            # Check if there are 2 or more adjacent bus journeys\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_cost\n                i += 1\n            else:\n                total_cost += bus_cost\n        else:\n            total_cost += tube_cost\n        i += 1\n        \n    return \"\u00a3{:0.2f}\".format(round(total_cost, 2))",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    consecutive_buses = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            consecutive_buses += 1\n        else:\n            if consecutive_buses >= 2:\n                total_cost += bus_fare * (consecutive_buses // 2)\n                consecutive_buses = consecutive_buses % 2\n            \n            if consecutive_buses == 1:\n                total_cost += bus_fare\n                consecutive_buses = 0\n            \n            total_cost += tube_fare\n    \n    if consecutive_buses >= 2:\n        total_cost += bus_fare * (consecutive_buses // 2)\n        consecutive_buses = consecutive_buses % 2\n    \n    if consecutive_buses == 1:\n        total_cost += bus_fare\n    \n    return '\u00a3' + '{:.2f}'.format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40\n        elif isinstance(item, int):\n            total_cost += 1.50\n            bus_count += 1\n    \n    bus_fare = (bus_count // 2) * 1.50\n    total_cost -= bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            bus_count += 1\n            if bus_count == 2:\n                total_cost -= bus_fare\n                bus_count = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    for journey_item in journey:\n        if isinstance(journey_item, str):\n            total_cost += 2.40\n            bus_count = 0\n        else:\n            bus_count += 1\n            if bus_count >= 2:\n                bus_count = 0\n            else:\n                total_cost += 1.50\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            cost += 1.50\n            bus_count += 1\n            if bus_count == 2:\n                cost -= 1.50\n                bus_count = 0\n        else:\n            cost += 2.40\n    \n    return \"\u00a3{:.2f}\".format(cost)",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def london_city_hacker(journey): \n\n    # Initialize variables for total cost and bus count\n    total_cost = 0\n    bus_count = 0\n    \n    # Iterate through the journey\n    for i in range(len(journey)):\n        \n        # Check if the element is a bus number\n        if type(journey[i]) == int:\n            \n            # Increment the bus count\n            bus_count += 1\n            \n            # Check if there are 2 or more adjacent buses\n            if bus_count >= 2:\n                \n                # Check if the previous element is also a bus number\n                if type(journey[i-1]) == int:\n                    # Decrement the bus count\n                    bus_count -= 1\n                    \n                    # Calculate the cost of the bus journey\n                    total_cost += 1.5\n                    \n                # If the previous element is not a bus number, reset the bus count\n                else:\n                    bus_count = 1\n                    \n            # If there are less than 2 adjacent buses, calculate the cost of the bus journey\n            else:\n                total_cost += 1.5\n                \n        # If the element is not a bus number, calculate the cost of the tube journey\n        else:\n            total_cost += 2.4\n            \n    # Return the total cost rounded to 2 decimal places\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n            bus_count = 0\n        elif isinstance(journey[i], int):\n            total_cost += bus_cost\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost -= bus_cost\n                bus_count = 0\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.00\n    adjacent_bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):\n            total_cost += tube_fare\n            adjacent_bus_count = 0\n        else:\n            total_cost += bus_fare\n            adjacent_bus_count += 1\n            if adjacent_bus_count == 2:\n                total_cost -= bus_fare\n                adjacent_bus_count = 0\n\n    return \"\u00a3{:.2f}\".format(total_cost)\n\nlondon_city_hacker(['District', 'Piccadilly', 34, 76, 'Bakerloo', 45, 'Victoria'])",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.00\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif i+1 < len(journey) and isinstance(journey[i+1], str):\n            total_cost += bus_fare\n        else:\n            total_cost += bus_fare\n            i += 1\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check if element is a tube name\n            total_cost += 2.40\n            if bus_count >= 2:  # Check if there are 2 or more adjacent bus journeys\n                total_cost -= 1.50  # Subtract bus fare for each set of two adjacent buses\n                bus_count = 0\n        else:  # Element is a bus number\n            total_cost += 1.50\n            bus_count += 1\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "logp": null
        },
        {
            "content": "def london_city_hacker(journey): \n    cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            cost += 2.40\n        else:\n            cost += 1.50\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                i += 1\n        i += 1\n    return '\u00a3' + '{:.2f}'.format(cost)",
            "logp": null
        }
    ]
}