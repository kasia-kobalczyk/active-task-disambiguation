{
    "0": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # it's a bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset after counting the pair\n            elif bus_count == 1:  # only count the first bus\n                continue\n                \n    # If there's an odd bus left at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                # Count the number of adjacent buses\n                bus_count = 1\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    bus_count += 1\n                    i += 1\n                # Each set of 2 buses costs \u00a31.50\n                total_cost += (bus_count // 2) * 1.50\n            else:\n                total_cost += 1.50\n        i += 1\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus sequence\n                total_cost += 1.50 * (bus_count // 2)  # Count full pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus, add one more fare\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count for capped buses\n            elif bus_count == 1:  # First bus in a new set\n                pass  # Do not add cost yet\n\n    if bus_count == 1:  # If there was one remaining bus at the end\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Cap after two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of the pair\n                continue\n    \n    if bus_count == 1:  # If there's an unpaired bus at the end\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey):\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Every 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after capping\n    \n    if bus_count == 1:  # If there's an uncounted single bus at the end\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count after a tube\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # every two buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # reset count after counting a set of two\n        else:\n            raise ValueError(\"Journey contains invalid entries.\")\n\n    # Any leftover bus count should be counted\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n            if (i == len(journey) - 1) or (not isinstance(journey[i + 1], int)):  # end of bus sequence\n                total_cost += 1.50 * ((bus_count + 1) // 2)  # cap fare for adjacent buses\n                bus_count = 0  # reset bus count after processing\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # We have two adjacent buses\n                total_cost += 1.50  # Count as one fare\n                bus_count = 0  # Reset bus count for the capped bus fare\n        else:\n            continue  # Ignore any unexpected types\n    \n    # If there's an odd bus at the end that wasn't capped\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset the bus count after capping\n            elif bus_count == 1:  # Only add fare for the first bus\n                total_cost += 1.50\n\n    # If there's an odd bus at the end, we need to count it\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube\n            total_cost += tube_fare\n        elif isinstance(item, int):  # Bus number\n            bus_count += 1\n    \n    # Calculate bus fares\n    total_cost += (bus_count // 2) * bus_fare  # Count of pairs of buses\n    total_cost += (bus_count % 2) * bus_fare  # Add remaining bus fare if there's an odd bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube\n            total_cost += tube_fare\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n\n    # Calculate bus fare with capping for adjacent buses\n    total_cost += (bus_count // 2) * bus_fare + (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube name\n            total_cost += tube_cost\n        elif isinstance(item, int):  # It's a bus number\n            bus_count += 1\n\n    total_cost += (bus_count // 2) * bus_cost  # count full pairs\n    total_cost += (bus_count % 2) * bus_cost  # count any leftover bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube name\n            total_cost += 2.40\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n\n    # Handle bus fare capping\n    total_cost += (bus_count // 2) * 1.50  # Count pairs of adjacent buses\n    total_cost += (bus_count % 2) * 1.50  # Add any single bus fare if there's an odd one out\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n    \n    # Calculate bus cost with the cap\n    total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n        elif isinstance(item, int):  # it's a bus number\n            bus_count += 1\n\n    # Calculate bus fares based on adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # count full pairs of buses\n    total_cost += (bus_count % 2) * 1.50  # add cost for any remaining bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for sets of two buses\n                if bus_count % 2 == 1:  # Charge for any single bus left\n                    total_cost += bus_fare\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare\n    \n    # If there are any remaining buses at the end\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        elif isinstance(item, str):  # Tube name\n            total_cost += tube_fare\n\n    total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n    total_cost += (bus_count % 2) * bus_fare  # Add fare for any remaining bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += tube_cost\n        elif isinstance(item, int):  # it's a bus number\n            bus_count += 1\n            \n    total_cost += (bus_count // 2) * bus_cost  # count pairs of buses\n    total_cost += (bus_count % 2) * bus_cost  # add cost of any remaining bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # It's a bus number\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # If next is not a bus\n                total_cost += 1.50  # Pay for the current bus\n                bus_count = 0\n            elif bus_count == 2:  # We've found a pair of buses\n                total_cost += 1.50  # Pay only once for this pair\n                bus_count = 0\n\n    if bus_count == 1:  # If there's an odd bus at the end, charge it\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        elif isinstance(item, str):  # tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost\n                if bus_count % 2 == 1:\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # if it's the last bus or next is not a bus\n                total_cost += (bus_count // 2) * 1.50  # charge for pairs of buses\n                if bus_count % 2 != 0:  # if there's an odd bus out\n                    total_cost += 1.50\n                bus_count = 0  # reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            # Calculate fare for adjacent buses\n            total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n            total_cost += (bus_count % 2) * bus_fare  # Add fare for any remaining bus\n            bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    # Final calculation for any remaining buses at the end\n    total_cost += (bus_count // 2) * bus_fare\n    total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus sequence\n                total_cost += (bus_count // 2) * 1.50  # Charge for pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus, charge for it\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        }
    ],
    "3": []
}