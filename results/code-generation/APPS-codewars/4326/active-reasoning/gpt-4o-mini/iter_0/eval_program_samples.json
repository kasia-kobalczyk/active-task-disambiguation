{
    "0": {
        "0": [
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # it's a bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus count after capping\n            elif bus_count == 1:  # only the first bus is counted\n                total_cost += 1.50\n\n    # Handle any remaining single bus if not capped\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * 1.50 + (count % 2) * 1.50\n        else:\n            i += 1  # Just in case, but should not occur with given problem constraints\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus sequence\n                total_cost += 1.50 * (bus_count // 2)  # Count full pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus, add one more fare\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(transport, int):  # Bus journey\n            bus_count += 1\n\n        # If we have 2 adjacent bus journeys, charge only for 1 set\n        if bus_count == 2:\n            total_cost += 1.50\n            bus_count = 0  # Reset after capping fare\n\n    # If there's an odd bus count left at the end, charge for the last bus journey\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Cap after two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of the pair\n                continue\n    \n    if bus_count == 1:  # If there's an odd bus at the end, charge it\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Every 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting 2 buses\n\n    # If there is an odd bus at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            \n            if bus_count == 2:  # If two buses are adjacent\n                total_cost += 1.50  # Count only one fare\n                bus_count = 0  # Reset bus count after capping\n                \n    # If there's an unpaired bus at the end of the journey\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap cost for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count for capped pairs\n            elif bus_count == 1:  # Cost for the first bus\n                total_cost += 1.50\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus counter\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count % 2 == 1:  # Only charge for the first bus in a pair\n                total_cost += 1.50\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            if bus_count > 0:  # Reset bus count after a tube\n                bus_count = 0\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Cap the cost for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after capping\n\n    if bus_count == 1:  # If there's a single bus at the end\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Every 2 adjacent buses count as 1 fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting a pair\n            elif bus_count == 1:  # First bus journey in a sequence\n                total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count after a tube\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # every two buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # reset count after counting a set of two\n        else:\n            raise ValueError(\"Journey contains invalid entries.\")\n\n    # Any leftover bus count that isn't part of a pair\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            if bus_count > 0:  # if there were adjacent buses\n                total_cost += 1.50 * (bus_count // 2)\n                bus_count = 0  # reset bus count after processing\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n\n    # Process any remaining buses\n    if bus_count > 0:\n        total_cost += 1.50 * (bus_count // 2)\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # We have two adjacent buses\n                total_cost += 1.50  # Count as one fare\n                bus_count = 0  # Reset bus count for the capped bus fare\n        else:\n            continue  # Ignore any unexpected types\n    \n    # If there are odd number of adjacent buses at the end\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset the bus count after capping\n\n    if bus_count == 1:  # If there was an unpaired bus at the end\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Count as a set\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting a set\n            \n    if bus_count == 1:  # If there's an uncounted bus at the end\n        total_cost += 1.50\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count after a tube journey\n        elif isinstance(stop, int):  # bus journey\n            bus_count += 1\n            \n            if bus_count % 2 == 1:  # if it's an odd bus (1st in pair)\n                total_cost += 1.50\n                \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare after 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after adding the capped fare\n            # If bus_count is 1, do not add the fare yet, wait for the next bus\n    \n    # If there is an uncounted bus at the end\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count on tube\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Cap for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus in a pair\n                continue  # No cost yet\n    \n    # If there's an odd bus at the end, charge for it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus number\n            bus_count += 1\n            if (i == len(journey) - 1) or (not isinstance(journey[i + 1], int)):  # End of bus sequence\n                total_cost += 1.50 * (bus_count // 2) + 1.50 * (bus_count % 2)  # Cap the fare for adjacent buses\n                bus_count = 0  # Reset bus count\n\n    return f'\u00a3{total_cost:.2f}'\n```"
        ],
        "1": [
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += tube_fare\n        elif isinstance(item, int):\n            total_cost += bus_fare\n            bus_count += 1\n            \n            if bus_count % 2 == 0:  # Every 2 buses count as 1 fare\n                total_cost -= bus_fare  # Subtract the last bus fare as it's capped\n    \n    total_cost = round(total_cost, 2)\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n\n    # Calculate bus fare with the cap for adjacent buses\n    total_cost += (bus_count // 2) * bus_fare  # One fare for each pair\n    total_cost += (bus_count % 2) * bus_fare  # Add fare for any leftover bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube journey\n            total_cost += tube_cost\n        elif isinstance(item, int):  # If it's a bus journey\n            bus_count += 1\n\n    # Calculate the cost for buses\n    total_cost += (bus_count // 2) * bus_cost  # Cost for pairs of buses\n    total_cost += (bus_count % 2) * bus_cost  # Cost for remaining bus if it's odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check if it's a tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Check if it's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):\n                # If the next item is not a bus, charge for the set\n                total_cost += 1.50\n                bus_count = 0\n            elif bus_count == 2:\n                # If two adjacent buses, count as one\n                total_cost += 1.50\n                bus_count = 0\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube name\n            total_cost += 2.40\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n\n    # Handle bus fare calculation\n    total_cost += (bus_count // 2) * 1.50  # Count pairs of adjacent buses\n    total_cost += (bus_count % 2) * 1.50   # Add fare for any remaining single bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    bus_count = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Next is also a bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    bus_count += 1\n                    i += 1\n                total_cost += bus_cost  # Count only once for the pair of buses\n            else:\n                total_cost += bus_cost  # Count the single bus\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(item, int):  # It's a bus number\n            bus_count += 1\n    \n    # Count capped bus fares\n    total_cost += (bus_count // 2) * 1.50  # Each pair of adjacent buses\n    if bus_count % 2 != 0:  # If there's an unpaired bus\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_cost\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n    \n    # Calculate the capped bus fare\n    total_cost += (bus_count // 2) * bus_cost + (bus_count % 2) * bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Check if it's a tube name\n            total_cost += 2.40\n        elif isinstance(item, int):  # Check if it's a bus number\n            bus_count += 1\n\n    total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n    total_cost += (bus_count % 2) * 1.50   # Add fare for any leftover bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            \n    total_cost += (bus_count // 2) * 1.50  # Count pairs of adjacent buses\n    total_cost += (bus_count % 2) * 1.50   # Add the cost of a single bus if any\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n    \n    # Calculate bus cost with capping\n    total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n        elif isinstance(item, int):  # it's a bus number\n            bus_count += 1\n\n    # Calculate bus fares based on adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # count full pairs of buses\n    total_cost += (bus_count % 2) * 1.50  # add cost for any remaining bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40  # Tube fare\n        elif isinstance(item, int):\n            total_cost += 1.50  # Bus fare\n            bus_count += 1\n    \n    # Calculate capped bus fare\n    capped_bus_fare = (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n    total_cost -= bus_count * 1.50  # Remove individual bus fares\n    total_cost += capped_bus_fare  # Add capped fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus left\n                    total_cost += bus_fare\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Charge for the tube\n            \n    # Check for any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            \n            # Check if next item is also a bus to apply cap\n            if bus_count == 2:\n                total_cost += 1.50\n                bus_count = 0  # Reset after adding cap cost\n                \n    # If there's an odd bus out at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # It's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # End of bus sequence\n                total_cost += (bus_count + 1) // 2 * 1.50  # Charge for pairs of buses\n                bus_count = 0  # Reset bus count for the next sequence\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # check for adjacent bus\n                total_cost += bus_fare  # count this bus journey\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1  # skip the next adjacent bus\n            else:\n                total_cost += bus_fare  # single bus journey\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Assuming bus numbers are integers\n            bus_count += 1\n        elif isinstance(item, str):  # Assuming tube names are strings\n            total_cost += tube_cost\n            \n        if bus_count == 2:  # If we have counted 2 adjacent buses\n            total_cost += bus_cost\n            bus_count = 0  # Reset bus count for next potential pair\n            \n    # If there's an odd bus at the end, we need to charge for it\n    if bus_count == 1:\n        total_cost += bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            total_cost += (bus_count // 2) * bus_cost  # Full sets of two buses\n            total_cost += (bus_count % 2) * bus_cost  # Handle leftover bus if odd\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # It's a bus number\n            bus_count += 1\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                continue\n            else:  # No adjacent bus or it's the last one\n                total_cost += 1.50\n                bus_count = 0\n        if bus_count == 2:  # Cap the fare for adjacent buses\n            total_cost -= 1.50  # Remove the last bus fare just added\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Charge for sets of two adjacent buses\n                total_cost += (bus_count % 2) * bus_cost   # Charge for any remaining single bus\n                bus_count = 0\n            total_cost += tube_cost  # Add tube fare\n            \n    if bus_count > 0:  # Check if there's a final count of buses to process\n        total_cost += (bus_count // 2) * bus_cost\n        total_cost += (bus_count % 2) * bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # If item is a bus number\n            bus_count += 1\n        else:  # If item is a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Add fare for pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus, add one more fare\n                    total_cost += bus_fare\n                bus_count = 0  # Reset bus count after processing\n\n            total_cost += tube_fare  # Add tube fare\n\n    # Final check for any remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # it's a tube journey\n            total_cost += tube_cost\n        elif isinstance(item, int):  # it's a bus journey\n            bus_count += 1\n\n    # Apply bus fare cap\n    total_cost += (bus_count // 2) * bus_cost + (bus_count % 2) * bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it is a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Check if it is a bus number\n            # Check for adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_fare  # Add fare for pairs of buses\n            total_cost += (count % 2) * bus_fare  # Add fare for any remaining single bus\n            continue  # Skip to the next iteration\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for segment in journey:\n        if isinstance(segment, str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(segment, int):  # Bus journey\n            bus_count += 1\n            \n    total_cost += (bus_count // 2) * 1.50  # Capped fares for adjacent buses\n    total_cost += (bus_count % 2) * 1.50   # Add fare for any leftover bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "2": [
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40  # tube fare\n            bus_count = 0  # reset bus count when a tube is found\n        elif isinstance(item, int):\n            total_cost += 1.50  # bus fare\n            bus_count += 1  # increment bus count\n            if bus_count == 2:  # every two adjacent buses\n                total_cost -= 1.50  # remove one bus fare\n\n    total_cost = round(total_cost, 2)\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # If we have 2 adjacent buses\n                total_cost += 0  # Don't add cost for this one\n            else:\n                total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # last bus or next is not a bus\n                total_cost += 1.50\n                bus_count = 0\n            if bus_count == 2:  # capped fare for two adjacent buses\n                total_cost -= 1.50  # remove one bus fare because it's capped\n                bus_count = 0  # reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            # Calculate fare for adjacent buses\n            total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n            total_cost += (bus_count % 2) * bus_fare  # Add fare for any remaining bus\n            bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add tube fare\n\n    # Final check for any remaining buses at the end of the journey\n    total_cost += (bus_count // 2) * bus_fare\n    total_cost += (bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                # Count a pair of adjacent buses\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    total_cost = round(total_cost, 2)\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # It's a bus number\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of bus sequence\n                total_cost += (bus_count // 2) * 1.50  # Count full pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd one out\n                    total_cost += 1.50\n                bus_count = 0\n\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ]
    }
}