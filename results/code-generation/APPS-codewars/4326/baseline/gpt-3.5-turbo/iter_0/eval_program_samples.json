{
    "0": {
        "0": [
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40\n            bus_count = 0\n        else:\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost += 1.50\n                bus_count = 0\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in journey:\n        if isinstance(i, int):\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * bus_cost\n            total_cost += bus_count % 2 * bus_cost\n            bus_count = 0\n            total_cost += tube_cost\n    \n    total_cost += bus_count // 2 * bus_cost\n    total_cost += bus_count % 2 * bus_cost\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    tube_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            tube_count += 1\n            total_cost += 2.40\n        else:\n            bus_count += 1\n            total_cost += 1.50\n            \n            if bus_count >= 2:\n                total_cost -= 1.50\n                bus_count = 0\n        \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.00\n    is_previous_bus = False\n\n    for element in journey:\n        if isinstance(element, int):  # check if element is an integer (bus number)\n            if is_previous_bus:\n                total_cost += bus_fare  # add bus fare for the second bus in a set\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n        else:  # element is a string (tube name)\n            total_cost += tube_fare\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_cost * 2\n                i += 2\n            else:\n                total_cost += bus_cost\n                i += 1\n        else:\n            total_cost += tube_cost\n            i += 1\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    is_bus = False\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40\n            is_bus = False\n        else:\n            if is_bus:\n                is_bus = False\n            else:\n                total_cost += 1.50\n                is_bus = True\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in journey:\n        if type(i) == str:  # Tube journey\n            total_cost += tube_cost\n            bus_count = 0\n        else:  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap fare for two adjacent buses\n                total_cost += bus_cost\n                bus_count = 0\n                \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    \n    total_cost = 0\n    consecutive_buses = 0\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += tube_cost\n            consecutive_buses = 0\n        else:\n            if consecutive_buses == 1:\n                total_cost += bus_cost\n                consecutive_buses = 0\n            elif consecutive_buses > 1:\n                total_cost += (consecutive_buses * bus_cost)\n                consecutive_buses = 0\n            else:\n                consecutive_buses += 1\n    \n    if consecutive_buses == 1:\n        total_cost += bus_cost\n    elif consecutive_buses > 1:\n        total_cost += (consecutive_buses * bus_cost)\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count > 1:\n                total_cost += 1.5\n                bus_count = 0\n            elif bus_count == 1:\n                total_cost += 1.5\n                bus_count = 0\n            total_cost += 2.4\n    \n    if bus_count > 1:\n        total_cost += 1.5\n    elif bus_count == 1:\n        total_cost += 1.5\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n            if bus_count % 2 == 0:\n                total_cost += 1.5\n        else:\n            total_cost += 2.4\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        # if the current element is a tube name\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        # if the current element is a bus number\n        elif isinstance(journey[i], int):\n            # if there are at least two adjacent bus numbers\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += 2 * bus_fare\n                i += 1\n            # if there is only one bus number\n            else:\n                total_cost += bus_fare\n        \n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    bus_fare = 1.50\n    tube_fare = 2.40\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_count // 2 * bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count >= 2:\n        total_cost += bus_count // 2 * bus_fare\n\n    return '\u00a3' + '{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    is_previous_bus = False\n\n    for journey_element in journey:\n        if isinstance(journey_element, str):\n            # Tube journey\n            total_cost += 2.40\n            is_previous_bus = False\n        else:\n            # Bus journey\n            total_cost += 1.50\n\n            if is_previous_bus:\n                # Set of two adjacent bus journeys\n                total_cost -= 1.50\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # bus journey\n            total_cost += 1.5\n            \n            if i+1 < len(journey) and isinstance(journey[i+1], int):  # check if next journey is also a bus journey\n                total_cost += 1.5\n                i += 1  # skip the next journey as it has already been accounted for\n                \n        else:  # tube journey\n            total_cost += 2.4\n            \n        i += 1  # move to next journey\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if type(item) == int:\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * 1.5\n            bus_count = 0\n            total_cost += 2.4\n    \n    total_cost += bus_count // 2 * 1.5\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    \n    is_previous_bus = False\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if is_previous_bus:\n                total_cost += bus_fare\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n        else:\n            total_cost += tube_fare\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "```\n    total_cost = 0\n    bus_counter = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += 2.40\n            bus_counter = 0\n        else:\n            bus_counter += 1\n            if bus_counter == 2:\n                total_cost += 1.50\n                bus_counter = 0\n    return '\u00a3{:.2f}'.format(total_cost)\n```",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n            if bus_count % 2 == 0:\n                total_cost += 1.50\n        else:\n            total_cost += 2.40\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += 2.4\n            bus_count = 0\n        elif isinstance(journey[i], int):\n            bus_count += 1\n            if bus_count == 2:\n                total_cost += 1.5\n                bus_count = 0\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    \n    total_cost = 0.0\n    is_previous_bus = False\n    \n    for stop in journey:\n        if type(stop) == str:  # Tube journey\n            total_cost += tube_cost\n            is_previous_bus = False\n        else:  # Bus journey\n            if is_previous_bus:\n                total_cost += bus_cost  # Only add bus cost for the second bus in a set of adjacent buses\n                is_previous_bus = False\n            else:\n                total_cost += bus_cost\n                is_previous_bus = True\n    \n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "1": [
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if type(journey[i]) == str:\n            total_cost += tube_fare\n        else:\n            total_cost += bus_fare\n            if i + 1 < len(journey) and type(journey[i+1]) == int:\n                total_cost += bus_fare\n                i += 1\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # check if tube name\n            total_cost += tube_fare\n            i += 1\n        else:  # check if bus number\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):  # check if consecutive bus numbers\n                count += 1\n                i += 1\n            \n            total_cost += count * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            # If the current journey is a bus journey\n            total_cost += bus_fare\n\n            # Check if there are two adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        else:\n            # If the current journey is a tube journey\n            total_cost += tube_fare\n\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.00\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_cost\n                i += 2\n            else:\n                total_cost += bus_cost\n                i += 1\n        else:\n            total_cost += tube_cost\n            i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # Check if element is an integer (bus number)\n            if i+1 < len(journey) and isinstance(journey[i+1], int):  # Check if the next element is also a bus number\n                total_cost += bus_fare * 2  # Add 2 bus fares for adjacent bus journeys\n                i += 2\n            else:\n                total_cost += bus_fare  # Add 1 bus fare for single bus journey\n                i += 1\n        else:\n            total_cost += tube_fare  # Add 1 tube fare for tube journey\n            i += 1\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += (bus_count // 2) * bus_fare\n                bus_count = bus_count % 2\n            total_cost += bus_count * bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count >= 2:\n        total_cost += (bus_count // 2) * bus_fare\n        bus_count = bus_count % 2\n    total_cost += bus_count * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.00\n    count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if count >= 2:\n                total_cost += bus_fare\n                count = 1\n            else:\n                total_cost += bus_fare\n                count += 1\n        else:\n            total_cost += tube_fare\n            count = 0\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0.0\n    buses = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if buses >= 2:\n                total_cost += 1.5\n                buses = 1\n            else:\n                total_cost += 1.5\n                buses += 1\n        else:\n            total_cost += 2.4\n            buses = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += (bus_cost * 2)\n            elif bus_count == 1:\n                total_cost += bus_cost\n            bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count >= 2:\n        total_cost += (bus_cost * 2)\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_count * bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count >= 2:\n        total_cost += bus_count * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        i += 1\n\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        # check if the current element is a bus number\n        if isinstance(journey[i], int):\n            # check if the next element is also a bus number\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare * 2\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        # check if the current element is a tube name\n        elif isinstance(journey[i], str):\n            total_cost += tube_fare\n            i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # Check if element is a bus number\n            if bus_count >= 2:\n                bus_count = 0\n                total_cost += bus_cost\n            else:\n                bus_count += 1\n                total_cost += bus_cost\n        else: # Element is a tube name\n            total_cost += tube_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int: # If the element is a bus number\n            total_cost += 1.5 # Add the cost of a bus journey\n            bus_count += 1 # Increment the bus count\n            if bus_count >= 2: # If there are 2 or more adjacent bus journeys\n                total_cost -= 1.5 # Subtract the cost of the extra bus journey\n                bus_count = 0 # Reset the bus count\n        else: # If the element is a tube name\n            total_cost += 2.4 # Add the cost of a tube journey\n            bus_count = 0 # Reset the bus count\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # if element is bus number\n            if bus_count < 2: # if bus count is less than 2, increment bus count and add bus fare to total cost\n                bus_count += 1\n                total_cost += bus_fare\n            else: # if bus count is already 2, reset bus count and add tube fare to total cost\n                bus_count = 0\n                total_cost += tube_fare\n        else: # if element is tube name, add tube fare to total cost\n            total_cost += tube_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int) and i+1 < len(journey) and isinstance(journey[i+1], int):\n            total_cost += bus_fare\n            i += 1\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_counter = 0\n    \n    for i in journey:\n        if isinstance(i, int):\n            bus_counter += 1\n        else:\n            if bus_counter >= 2:\n                total_cost += bus_fare * (bus_counter // 2)\n                bus_counter = 0\n            if bus_counter == 1:\n                total_cost += bus_fare\n                bus_counter = 0\n            total_cost += tube_fare\n    \n    if bus_counter >= 2:\n        total_cost += bus_fare * (bus_counter // 2)\n    if bus_counter == 1:\n        total_cost += bus_fare\n        \n    return \"\u00a3\" + format(total_cost, \".2f\")",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # bus journey\n            if i == 0 or not isinstance(journey[i-1], int):  # first bus journey or previous journey was a tube journey\n                total_cost += bus_fare\n            else:  # previous journey was also a bus journey\n                continue\n        \n        else:  # tube journey\n            total_cost += tube_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            total_cost += bus_fare\n            # check if there are more bus journeys adjacent\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # If it is a bus number\n            bus_count += 1\n        else:  # If it is a tube name\n            if bus_count >= 2:  # If there are 2 or more adjacent buses\n                total_cost += bus_count * bus_fare  # Add cost of each bus journey\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add cost of tube journey\n    \n    if bus_count >= 2:  # If there are remaining buses at the end\n        total_cost += bus_count * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            total_cost += 1.5\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost -= 1.5\n                bus_count -= 2\n            total_cost += 2.4\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_counter = 0\n    for i in journey:\n        if isinstance(i, int):\n            bus_counter += 1\n            if bus_counter == 2:\n                total_cost += bus_fare\n                bus_counter = 0\n        else:\n            total_cost += tube_fare\n            if bus_counter == 1:\n                total_cost += bus_fare\n                bus_counter = 0\n    if bus_counter == 1:\n        total_cost += bus_fare\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost * 2\n                i += 1\n            else:\n                total_cost += bus_cost\n        else:\n            total_cost += tube_cost\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                i += 1\n        i += 1\n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "2": [
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        else:\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    num_buses = 0\n    prev_was_bus = False\n    \n    for item in journey:\n        if isinstance(item, str):\n            total_cost += tube_cost\n            prev_was_bus = False\n        else:\n            if prev_was_bus:\n                num_buses += 1\n                if num_buses == 2:\n                    total_cost += bus_cost\n                    num_buses = 0\n            else:\n                total_cost += bus_cost\n                prev_was_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if type(journey[i]) == str: # If tube journey\n            total_cost += tube_cost\n            i += 1\n        else: # If bus journey\n            count = 0\n            while i < len(journey) and type(journey[i]) == int: # Count the number of adjacent bus journeys\n                count += 1\n                i += 1\n            sets = count // 2 # Calculate the number of sets of two adjacent buses\n            total_cost += sets * bus_cost # Add the cost of the sets\n            total_cost += (count % 2) * bus_cost # Add the cost of the remaining bus journey if there is an odd number of buses\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # if the element is an integer (bus number)\n            if i == 0 or not isinstance(journey[i-1], int): # if it's the first element or the previous element is not a bus number\n                cost += 1.5 # add bus fare\n                bus_count += 1 # increment bus count\n            else:\n                if bus_count >= 2: # if there are at least two adjacent bus journeys\n                    cost += 1.5 # add bus fare\n                    bus_count = 1 # reset bus count to 1\n                else:\n                    bus_count += 1 # increment bus count\n        else: # if the element is a string (tube name)\n            cost += 2.4 # add tube fare\n            bus_count = 0 # reset bus count\n    \n    return \"\u00a3{:.2f}\".format(cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i == 0 or isinstance(journey[i-1], str):\n                total_cost += bus_fare\n                bus_count += 1\n            elif isinstance(journey[i-1], int):\n                if bus_count % 2 == 0:\n                    total_cost += bus_fare\n                    bus_count += 1\n                else:\n                    bus_count += 1\n        elif isinstance(journey[i], str):\n            total_cost += tube_fare\n            bus_count = 0\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            total_cost += 1.5\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost -= 1.5\n                bus_count = 0\n        else:\n            total_cost += 2.4\n            bus_count = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * 1.5 + bus_count % 2 * 1.5\n            bus_count = 0\n            total_cost += 2.4\n    total_cost += bus_count // 2 * 1.5 + bus_count % 2 * 1.5\n    return '\u00a3' + '{:.2f}'.format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int) and i == 0:\n            total_cost += bus_fare\n        elif isinstance(journey[i], int) and isinstance(journey[i-1], int):\n            continue\n        elif isinstance(journey[i], int) and isinstance(journey[i-1], str):\n            total_cost += bus_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_counter = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_counter += 1\n        else:\n            total_cost += bus_cost * (bus_counter // 2 + bus_counter % 2)\n            bus_counter = 0\n            total_cost += tube_cost\n\n    total_cost += bus_cost * (bus_counter // 2 + bus_counter % 2)\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        else:\n            if bus_count >= 2:\n                bus_count -= 1\n            else:\n                total_cost += bus_cost\n                bus_count += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i > 0 and isinstance(journey[i-1], int):\n                bus_count += 1\n            else:\n                total_cost += 1.5\n        else:\n            total_cost += 2.4\n\n    total_cost -= (bus_count // 2) * 1.5\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_journey_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += 2.40\n            bus_journey_count = 0\n        elif isinstance(journey[i], int):\n            total_cost += 1.50\n            bus_journey_count += 1\n            if bus_journey_count == 2:\n                total_cost -= 1.50\n                bus_journey_count = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            total_cost += 1.50\n            bus_count += 1\n        else:\n            total_cost += 2.40\n            if bus_count >= 2:\n                bus_count = 0\n                total_cost -= 1.50\n    \n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "3": [
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            total_cost += bus_fare\n            bus_count += 1\n        else:\n            total_cost += tube_fare\n            if bus_count >= 2:\n                total_cost -= bus_fare\n            bus_count = 0\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i > 0 and isinstance(journey[i-1], int):\n                bus_count += 1\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    total_cost += (bus_count // 2) * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str): # tube journey\n            total_cost += tube_fare\n            i += 1\n        else: # bus journey\n            bus_journeys = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_journeys += 1\n                i += 1\n            total_cost += bus_fare * ((bus_journeys + 1) // 2)\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "4": [
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    is_previous_bus = False\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int: # bus journey\n            if is_previous_bus: # if the previous journey was a bus journey\n                is_previous_bus = False\n            else: # if the previous journey was not a bus journey\n                total_cost += bus_fare\n                is_previous_bus = True\n        \n        else: # tube journey\n            total_cost += tube_fare\n            is_previous_bus = False\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    is_prev_bus = False\n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40\n            is_prev_bus = False\n        elif isinstance(item, int):\n            if is_prev_bus:\n                is_prev_bus = False\n            else:\n                total_cost += 1.50\n                is_prev_bus = True\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # if tube\n            total_cost += tube_fare\n        else:  # if bus\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare  # add bus fare\n                i += 1\n            else:\n                total_cost += bus_fare  # add bus fare\n        i += 1\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    is_previous_bus = False\n\n    for trip in journey:\n        if isinstance(trip, str):\n            total_cost += tube_fare\n            is_previous_bus = False\n        else:\n            if is_previous_bus:\n                is_previous_bus = False\n            else:\n                total_cost += bus_fare\n                is_previous_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n            if bus_count == 2:\n                total_cost += bus_cost\n                bus_count = 0\n        else:\n            if bus_count == 1:\n                total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count == 1:\n        total_cost += bus_cost\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    count_bus = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n            count_bus = 0\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            count_bus += 1\n            if count_bus >= 2:\n                total_cost -= bus_fare\n                count_bus = 0\n    \n    return '\u00a3' + \"{:.2f}\".format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))\nprint(london_city_hacker(['Jubilee', 13, 14, 'Bakerloo', 'Northern']))\nprint(london_city_hacker(['Jubilee', 'Victoria', 13, 'Central', 'Bakerloo']))"
        ]
    },
    "1": {
        "0": [
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        # if the current element is a tube name\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        # if the current element is a bus number\n        elif isinstance(journey[i], int):\n            # if there are at least two adjacent bus numbers\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += 2 * bus_fare\n                i += 1\n            # if there is only one bus number\n            else:\n                total_cost += bus_fare\n        \n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    bus_fare = 1.50\n    tube_fare = 2.40\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_count // 2 * bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count >= 2:\n        total_cost += bus_count // 2 * bus_fare\n\n    return '\u00a3' + '{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    is_previous_bus = False\n\n    for journey_element in journey:\n        if isinstance(journey_element, str):\n            # Tube journey\n            total_cost += 2.40\n            is_previous_bus = False\n        else:\n            # Bus journey\n            total_cost += 1.50\n\n            if is_previous_bus:\n                # Set of two adjacent bus journeys\n                total_cost -= 1.50\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # bus journey\n            total_cost += 1.5\n            \n            if i+1 < len(journey) and isinstance(journey[i+1], int):  # check if next journey is also a bus journey\n                total_cost += 1.5\n                i += 1  # skip the next journey as it has already been accounted for\n                \n        else:  # tube journey\n            total_cost += 2.4\n            \n        i += 1  # move to next journey\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if type(item) == int:\n            bus_count += 1\n        else:\n            total_cost += bus_count * 1.50\n            bus_count = 0\n            total_cost += 2.40\n    \n    total_cost += bus_count * 1.50\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    \n    is_previous_bus = False\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if is_previous_bus:\n                total_cost += bus_fare\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n        else:\n            total_cost += tube_fare\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "# Total cost of the journey\ntotal_cost = 0\n\n# Initialize a flag to check if the previous journey was a bus\nprev_was_bus = False\n\n# Iterate over each journey in the sequence\nfor journey in journey:\n    \n    # If the current journey is a tube, add \u00a32.40 to the total cost\n    if isinstance(journey, str):\n        total_cost += 2.40\n        \n        # Set the flag to False since the current journey is not a bus\n        prev_was_bus = False\n    \n    # If the current journey is a bus, add \u00a31.50 to the total cost\n    else:\n        total_cost += 1.50\n        \n        # If the previous journey was also a bus, subtract \u00a31.50 from the total cost\n        if prev_was_bus:\n            total_cost -= 1.50\n        \n        # Set the flag to True since the current journey is a bus\n        prev_was_bus = True\n\n# Return the total cost rounded to 2 decimal places in the format \u00a3x.xx\nreturn \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n            if bus_count % 2 == 0:\n                total_cost += 1.50\n        else:\n            total_cost += 2.40\n            bus_count = 0\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += 2.4\n            bus_count = 0\n        elif isinstance(journey[i], int):\n            bus_count += 1\n            if bus_count == 2:\n                total_cost += 1.5\n                bus_count = 0\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    \n    total_cost = 0.0\n    is_previous_bus = False\n    \n    for stop in journey:\n        if type(stop) == str:  # Tube journey\n            total_cost += tube_cost\n            is_previous_bus = False\n        else:  # Bus journey\n            if is_previous_bus:\n                total_cost += bus_cost  # Only add bus cost for the second bus in a set of adjacent buses\n                is_previous_bus = False\n            else:\n                total_cost += bus_cost\n                is_previous_bus = True\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    consecutive_buses = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            consecutive_buses += 1\n            if consecutive_buses == 2:\n                total_cost += bus_cost\n                consecutive_buses = 0\n        else:\n            if consecutive_buses > 0:\n                total_cost += bus_cost\n                consecutive_buses = 0\n            total_cost += tube_cost\n    \n    if consecutive_buses > 0:\n        total_cost += bus_cost\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0.0\n    consecutive_buses = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            if consecutive_buses == 0:\n                total_cost += 1.5\n                consecutive_buses += 1\n            else:\n                consecutive_buses += 1\n                \n                if consecutive_buses == 2:\n                    consecutive_buses = 0\n        else:\n            total_cost += 2.4\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost * 2\n                i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    is_previous_bus = False\n    \n    for travel in journey:\n        if isinstance(travel, int):\n            if is_previous_bus:\n                total_cost += bus_fare\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n        else:\n            total_cost += tube_fare\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.00\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int:\n            bus_count += 1\n        else:\n            if bus_count > 1:\n                total_cost += bus_cost * ((bus_count + 1) // 2)\n                bus_count = 0\n            elif bus_count == 1:\n                total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n    \n    if bus_count > 1:\n        total_cost += bus_cost * ((bus_count + 1) // 2)\n    elif bus_count == 1:\n        total_cost += bus_cost\n    \n    return '\u00a3{:0.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_counter = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n            bus_counter = 0\n        else:\n            if bus_counter == 0:\n                total_cost += bus_cost\n            bus_counter = (bus_counter + 1) % 2\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 1\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            buses += 1\n            if buses % 2 == 0:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            # Check if there are 2 or more adjacent bus journeys\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_cost\n                i += 1\n            else:\n                total_cost += bus_cost\n        else:\n            total_cost += tube_cost\n\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    \n    is_previous_bus = False\n    for journey_type in journey:\n        if isinstance(journey_type, str):\n            total_cost += 2.4\n            is_previous_bus = False\n        else:\n            if not is_previous_bus:\n                total_cost += 1.5\n                is_previous_bus = True\n            else:\n                is_previous_bus = False\n                \n    return \"\u00a3{:0.2f}\".format(total_cost)"
        ],
        "1": [
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            # If the current journey is a bus journey\n            total_cost += bus_fare\n\n            # Check if there are two adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        else:\n            # If the current journey is a tube journey\n            total_cost += tube_fare\n\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.00\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_cost\n                i += 2\n            else:\n                total_cost += bus_cost\n                i += 1\n        else:\n            total_cost += tube_cost\n            i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # Check if element is an integer (bus number)\n            if i+1 < len(journey) and isinstance(journey[i+1], int):  # Check if the next element is also a bus number\n                total_cost += bus_fare * 2  # Add 2 bus fares for adjacent bus journeys\n                i += 2\n            else:\n                total_cost += bus_fare  # Add 1 bus fare for single bus journey\n                i += 1\n        else:\n            total_cost += tube_fare  # Add 1 tube fare for tube journey\n            i += 1\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += (bus_count // 2) * bus_fare\n                bus_count = bus_count % 2\n            total_cost += bus_count * bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count >= 2:\n        total_cost += (bus_count // 2) * bus_fare\n        bus_count = bus_count % 2\n    total_cost += bus_count * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.00\n    count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if count >= 2:\n                total_cost += bus_fare\n                count = 1\n            else:\n                total_cost += bus_fare\n                count += 1\n        else:\n            total_cost += tube_fare\n            count = 0\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0.0\n    buses = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if buses >= 2:\n                total_cost += 1.5\n                buses = 1\n            else:\n                total_cost += 1.5\n                buses += 1\n        else:\n            total_cost += 2.4\n            buses = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += (bus_cost * 2)\n            elif bus_count == 1:\n                total_cost += bus_cost\n            bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count >= 2:\n        total_cost += (bus_cost * 2)\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_count * bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count >= 2:\n        total_cost += bus_count * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        i += 1\n\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        # check if the current element is a bus number\n        if isinstance(journey[i], int):\n            # check if the next element is also a bus number\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare * 2\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        # check if the current element is a tube name\n        elif isinstance(journey[i], str):\n            total_cost += tube_fare\n            i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # Check if element is a bus number\n            if bus_count >= 2:\n                bus_count = 0\n                total_cost += bus_cost\n            else:\n                bus_count += 1\n                total_cost += bus_cost\n        else: # Element is a tube name\n            total_cost += tube_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int: # If the element is a bus number\n            total_cost += 1.5 # Add the cost of a bus journey\n            bus_count += 1 # Increment the bus count\n            if bus_count >= 2: # If there are 2 or more adjacent bus journeys\n                total_cost -= 1.5 # Subtract the cost of the extra bus journey\n                bus_count = 0 # Reset the bus count\n        else: # If the element is a tube name\n            total_cost += 2.4 # Add the cost of a tube journey\n            bus_count = 0 # Reset the bus count\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # if element is bus number\n            if bus_count < 2: # if bus count is less than 2, increment bus count and add bus fare to total cost\n                bus_count += 1\n                total_cost += bus_fare\n            else: # if bus count is already 2, reset bus count and add tube fare to total cost\n                bus_count = 0\n                total_cost += tube_fare\n        else: # if element is tube name, add tube fare to total cost\n            total_cost += tube_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int) and i+1 < len(journey) and isinstance(journey[i+1], int):\n            total_cost += bus_fare\n            i += 1\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_counter = 0\n    \n    for j in journey:\n        if isinstance(j, int):\n            bus_counter += 1\n        else:\n            if bus_counter >= 2:\n                total_cost += bus_fare * (bus_counter // 2)\n                bus_counter = 0\n            if bus_counter == 1:\n                total_cost += bus_fare\n                bus_counter = 0\n            total_cost += tube_fare\n    \n    if bus_counter >= 2:\n        total_cost += bus_fare * (bus_counter // 2)\n    if bus_counter == 1:\n        total_cost += bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # bus journey\n            if i == 0 or not isinstance(journey[i-1], int):  # first bus journey or previous journey was a tube journey\n                total_cost += bus_fare\n            else:  # previous journey was also a bus journey\n                continue\n        \n        else:  # tube journey\n            total_cost += tube_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            total_cost += bus_fare\n            # check if there are more bus journeys adjacent\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # If it is a bus number\n            bus_count += 1\n        else:  # If it is a tube name\n            if bus_count >= 2:  # If there are 2 or more adjacent buses\n                total_cost += bus_count * bus_fare  # Add cost of each bus journey\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add cost of tube journey\n    \n    if bus_count >= 2:  # If there are remaining buses at the end\n        total_cost += bus_count * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            total_cost += 1.5\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost -= 1.5\n                bus_count -= 2\n            total_cost += 2.4\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_counter = 0\n    for i in journey:\n        if isinstance(i, int):\n            bus_counter += 1\n            if bus_counter == 2:\n                total_cost += bus_fare\n                bus_counter = 0\n        else:\n            total_cost += tube_fare\n            if bus_counter == 1:\n                total_cost += bus_fare\n                bus_counter = 0\n    if bus_counter == 1:\n        total_cost += bus_fare\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # check if the element is a bus number\n            if bus_count > 0:  # if there are adjacent bus journeys\n                total_cost += 1.50  # add the capped bus fare for the previous set of buses\n                bus_count = 0  # reset the bus count\n            else:\n                total_cost += 1.50  # add the bus fare\n            \n        else:  # if the element is a tube name\n            total_cost += 2.40  # add the tube fare\n            bus_count += 1  # increment the bus count\n        \n    if bus_count > 0:  # if there are adjacent bus journeys at the end\n        total_cost += 1.50  # add the capped bus fare for the last set of buses\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost * 2\n                i += 1\n            else:\n                total_cost += bus_cost\n        else:\n            total_cost += tube_cost\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                i += 1\n        i += 1\n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "2": [
            "def london_city_hacker(journey):\n    cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # if the element is an integer (bus number)\n            if i == 0 or not isinstance(journey[i-1], int): # if it's the first element or the previous element is not a bus number\n                cost += 1.5 # add bus fare\n                bus_count += 1 # increment bus count\n            else:\n                if bus_count >= 2: # if there are at least two adjacent bus journeys\n                    cost += 1.5 # add bus fare\n                    bus_count = 1 # reset bus count to 1\n                else:\n                    bus_count += 1 # increment bus count\n        else: # if the element is a string (tube name)\n            cost += 2.4 # add tube fare\n            bus_count = 0 # reset bus count\n    \n    return \"\u00a3{:.2f}\".format(cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i == 0 or isinstance(journey[i-1], str):\n                total_cost += bus_fare\n                bus_count += 1\n            elif isinstance(journey[i-1], int):\n                if bus_count % 2 == 0:\n                    total_cost += bus_fare\n                    bus_count += 1\n                else:\n                    bus_count += 1\n        elif isinstance(journey[i], str):\n            total_cost += tube_fare\n            bus_count = 0\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            total_cost += 1.5\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost -= 1.5\n                bus_count = 0\n        else:\n            total_cost += 2.4\n            bus_count = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * 1.5 + bus_count % 2 * 1.5\n            bus_count = 0\n            total_cost += 2.4\n    total_cost += bus_count // 2 * 1.5 + bus_count % 2 * 1.5\n    return '\u00a3' + '{:.2f}'.format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int) and i == 0:\n            total_cost += bus_fare\n        elif isinstance(journey[i], int) and isinstance(journey[i-1], int):\n            continue\n        elif isinstance(journey[i], int) and isinstance(journey[i-1], str):\n            total_cost += bus_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_counter = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_counter += 1\n        else:\n            total_cost += bus_cost * (bus_counter // 2 + bus_counter % 2)\n            bus_counter = 0\n            total_cost += tube_cost\n\n    total_cost += bus_cost * (bus_counter // 2 + bus_counter % 2)\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        else:\n            if bus_count >= 2:\n                bus_count -= 1\n            else:\n                total_cost += bus_cost\n                bus_count += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i > 0 and isinstance(journey[i-1], int):\n                bus_count += 1\n            else:\n                total_cost += 1.5\n        else:\n            total_cost += 2.4\n\n    total_cost -= (bus_count // 2) * 1.5\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_journey_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += 2.40\n            bus_journey_count = 0\n        elif isinstance(journey[i], int):\n            total_cost += 1.50\n            bus_journey_count += 1\n            if bus_journey_count == 2:\n                total_cost -= 1.50\n                bus_journey_count = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            total_cost += 1.50\n            bus_count += 1\n        else:\n            total_cost += 2.40\n            if bus_count >= 2:\n                bus_count = 0\n                total_cost -= 1.50\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # check if element is a bus number\n            total_cost += bus_fare\n            \n            # check if there are 2 or more adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_fare\n                \n        else:  # element is a tube name\n            total_cost += tube_fare\n            \n    return \"\u00a3\" + \"{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):\n            total_cost += tube_fare\n            bus_count = 0\n        elif isinstance(stop, int):\n            total_cost += bus_fare\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost -= bus_fare\n                bus_count = 0\n\n    return \"\u00a3{:.2f}\".format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))"
        ],
        "3": [
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i > 0 and isinstance(journey[i-1], int):\n                bus_count += 1\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    total_cost += (bus_count // 2) * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str): # tube journey\n            total_cost += tube_fare\n            i += 1\n        else: # bus journey\n            bus_journeys = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_journeys += 1\n                i += 1\n            total_cost += bus_fare * ((bus_journeys + 1) // 2)\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n    \n    return \"\u00a3{:0.2f}\".format(total_cost)"
        ],
        "4": [
            "def london_city_hacker(journey): \n    total_cost = 0\n    is_prev_bus = False\n    for item in journey:\n        if isinstance(item, str):\n            total_cost += 2.40\n            is_prev_bus = False\n        elif isinstance(item, int):\n            if is_prev_bus:\n                is_prev_bus = False\n            else:\n                total_cost += 1.50\n                is_prev_bus = True\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # if tube\n            total_cost += tube_fare\n        else:  # if bus\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare  # add bus fare\n                i += 1\n            else:\n                total_cost += bus_fare  # add bus fare\n        i += 1\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    is_previous_bus = False\n\n    for trip in journey:\n        if isinstance(trip, str):\n            total_cost += tube_fare\n            is_previous_bus = False\n        else:\n            if is_previous_bus:\n                is_previous_bus = False\n            else:\n                total_cost += bus_fare\n                is_previous_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n            if bus_count == 2:\n                total_cost += bus_cost\n                bus_count = 0\n        else:\n            if bus_count == 1:\n                total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count == 1:\n        total_cost += bus_cost\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    count_bus = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n            count_bus = 0\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            count_bus += 1\n            if count_bus >= 2:\n                total_cost -= bus_fare\n                count_bus = 0\n    \n    return '\u00a3' + \"{:.2f}\".format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))\nprint(london_city_hacker(['Jubilee', 13, 14, 'Bakerloo', 'Northern']))\nprint(london_city_hacker(['Jubilee', 'Victoria', 13, 'Central', 'Bakerloo']))",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    adjacent_buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if isinstance(journey[i-1], int):\n                adjacent_buses += 1\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    total_cost -= (adjacent_buses // 2) * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                # Two adjacent bus journeys, so count as one fare\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)"
        ]
    },
    "2": {
        "0": [
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    consecutive_buses = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            consecutive_buses += 1\n            if consecutive_buses == 2:\n                total_cost += bus_cost\n                consecutive_buses = 0\n        else:\n            if consecutive_buses > 0:\n                total_cost += bus_cost\n                consecutive_buses = 0\n            total_cost += tube_cost\n    \n    if consecutive_buses > 0:\n        total_cost += bus_cost\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "# Helper function to determine if a journey is a tube journey or a bus journey\n# A tube journey is represented by a string (e.g. 'Northern')\n# A bus journey is represented by an integer (e.g. 243)\ndef is_tube(journey):\n    return isinstance(journey, str)\n\n# Helper function to calculate the cost of a journey based on the type of journey\ndef calculate_cost(journey):\n    if is_tube(journey):\n        return 2.40\n    else:\n        return 1.50\n\n# Helper function to determine if two adjacent journeys are both bus journeys\ndef is_adjacent_bus(journey1, journey2):\n    return not is_tube(journey1) and not is_tube(journey2)\n\ndef london_city_hacker(journey):\n    total_cost = 0\n    previous_journey = None\n    for current_journey in journey:\n        if is_adjacent_bus(previous_journey, current_journey):\n            total_cost += calculate_cost(previous_journey)\n        total_cost += calculate_cost(current_journey)\n        previous_journey = current_journey\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost * 2\n                i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    is_previous_bus = False\n    \n    for travel in journey:\n        if isinstance(travel, int):\n            if is_previous_bus:\n                total_cost += bus_fare\n                is_previous_bus = False\n            else:\n                is_previous_bus = True\n        else:\n            total_cost += tube_fare\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.00\n    bus_journey = 0\n    tube_journey = 0\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int:  # bus journey\n            bus_journey += 1\n            \n            # check if next journey is also a bus journey\n            if i+1 < len(journey) and type(journey[i+1]) == int:\n                total_cost += bus_cost\n            \n            # if next journey is a tube journey or end of the sequence\n            else:\n                total_cost += bus_cost\n                total_cost += tube_cost * tube_journey\n                bus_journey = 0\n                tube_journey = 0\n                \n        else:  # tube journey\n            tube_journey += 1\n            \n            # check if next journey is also a tube journey\n            if i+1 < len(journey) and type(journey[i+1]) != int:\n                total_cost += tube_cost\n            \n            # if next journey is a bus journey or end of the sequence\n            else:\n                total_cost += tube_cost\n                total_cost += bus_cost * (bus_journey // 2)\n                bus_journey = 0\n                tube_journey = 0\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_counter = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n            bus_counter = 0\n        else:\n            if bus_counter == 0:\n                total_cost += bus_cost\n            bus_counter = (bus_counter + 1) % 2\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 1\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            buses += 1\n            if buses % 2 == 0:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            # Check if there are 2 or more adjacent bus journeys\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_cost\n                i += 1\n            else:\n                total_cost += bus_cost\n        else:\n            total_cost += tube_cost\n\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    \n    is_previous_bus = False\n    for journey_type in journey:\n        if isinstance(journey_type, str): # Tube journey\n            total_cost += 2.4\n            is_previous_bus = False\n        else: # Bus journey\n            if is_previous_bus: # If previous journey was also a bus\n                is_previous_bus = False\n            else:\n                total_cost += 1.5\n                is_previous_bus = True\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n            if bus_count == 2:\n                total_cost += bus_fare\n                bus_count = 0\n        else:\n            total_cost += tube_fare\n\n    if bus_count == 1:\n        total_cost += bus_fare\n\n    return '\u00a3{:0.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # tube journey\n            total_cost += tube_fare\n        else:  # bus journey\n            total_cost += bus_fare\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # check if next journey is also a bus journey\n                total_cost += bus_fare\n                i += 1  # skip the next journey\n                \n        i += 1  # move to the next journey\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    consecutive_buses = 0\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int:\n            consecutive_buses += 1\n        else:\n            if consecutive_buses >= 2:\n                total_cost += bus_fare\n            elif consecutive_buses == 1:\n                total_cost += bus_fare\n            consecutive_buses = 0\n            total_cost += tube_fare\n    \n    if consecutive_buses >= 2:\n        total_cost += bus_fare\n    elif consecutive_buses == 1:\n        total_cost += bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n            if bus_count > 1:\n                total_cost -= bus_count * bus_cost\n                bus_count = 0\n        else:\n            bus_count += 1\n\n    total_cost += bus_count * bus_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            total_cost += 2.4\n            if bus_count >= 2:\n                total_cost -= 1.5\n                bus_count -= 2\n    \n    total_cost += bus_count * 1.5\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n            if bus_count == 2:\n                bus_count = 0\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):\n            total_cost += tube_cost\n            bus_count = 0\n        else:\n            bus_count += 1\n            if bus_count >= 2:\n                bus_count = 0\n            else:\n                total_cost += bus_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n            if bus_count >= 2:\n                if bus_count % 2 == 0:\n                    total_cost += 1.5\n            else:\n                total_cost += 1.5\n        else:\n            total_cost += 2.4\n            bus_count = 0\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):   # Tube journey\n            total_cost += 2.40\n            if bus_count >= 2:   # If there are 2 or more adjacent bus journeys, subtract one bus fare for each set\n                total_cost -= 1.50\n                bus_count -= 2\n        else:   # Bus journey\n            total_cost += 1.50\n            bus_count += 1\n    \n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "1": [
            "def london_city_hacker(journey):\n    total_cost = 0.0\n    buses = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if buses >= 2:\n                total_cost += 1.5\n                buses = 1\n            else:\n                total_cost += 1.5\n                buses += 1\n        else:\n            total_cost += 2.4\n            buses = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += (bus_cost * 2)\n            elif bus_count == 1:\n                total_cost += bus_cost\n            bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count >= 2:\n        total_cost += (bus_cost * 2)\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_count * bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count >= 2:\n        total_cost += bus_count * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        i += 1\n\n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        # check if the current element is a bus number\n        if isinstance(journey[i], int):\n            # check if the next element is also a bus number\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare * 2\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        # check if the current element is a tube name\n        elif isinstance(journey[i], str):\n            total_cost += tube_fare\n            i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # Check if element is a bus number\n            if bus_count >= 2:\n                bus_count = 0\n                total_cost += bus_cost\n            else:\n                bus_count += 1\n                total_cost += bus_cost\n        else: # Element is a tube name\n            total_cost += tube_cost\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if type(journey[i]) == int: # If the element is a bus number\n            total_cost += 1.5 # Add the cost of a bus journey\n            bus_count += 1 # Increment the bus count\n            if bus_count >= 2: # If there are 2 or more adjacent bus journeys\n                total_cost -= 1.5 # Subtract the cost of the extra bus journey\n                bus_count = 0 # Reset the bus count\n        else: # If the element is a tube name\n            total_cost += 2.4 # Add the cost of a tube journey\n            bus_count = 0 # Reset the bus count\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # if element is bus number\n            if bus_count < 2: # if bus count is less than 2, increment bus count and add bus fare to total cost\n                bus_count += 1\n                total_cost += bus_fare\n            else: # if bus count is already 2, reset bus count and add tube fare to total cost\n                bus_count = 0\n                total_cost += tube_fare\n        else: # if element is tube name, add tube fare to total cost\n            total_cost += tube_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    num_buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i == 0 or isinstance(journey[i-1], str):\n                total_cost += bus_fare\n                num_buses += 1\n            elif isinstance(journey[i-1], int) and num_buses % 2 == 0:\n                total_cost += bus_fare\n                num_buses += 1\n            else:\n                total_cost += tube_fare\n        else:\n            total_cost += tube_fare\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int) and i+1 < len(journey) and isinstance(journey[i+1], int):\n            total_cost += bus_fare\n            i += 1\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_counter = 0\n    \n    for j in journey:\n        if isinstance(j, int):\n            bus_counter += 1\n        else:\n            if bus_counter >= 2:\n                total_cost += bus_fare * (bus_counter // 2)\n                bus_counter = 0\n            if bus_counter == 1:\n                total_cost += bus_fare\n                bus_counter = 0\n            total_cost += tube_fare\n    \n    if bus_counter >= 2:\n        total_cost += bus_fare * (bus_counter // 2)\n    if bus_counter == 1:\n        total_cost += bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # bus journey\n            if i == 0 or not isinstance(journey[i-1], int):  # first bus journey or previous journey was a tube journey\n                total_cost += bus_fare\n            else:  # previous journey was also a bus journey\n                continue\n        \n        else:  # tube journey\n            total_cost += tube_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            total_cost += bus_fare\n            # check if there are more bus journeys adjacent\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n        i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # If it is a bus number\n            bus_count += 1\n        else:  # If it is a tube name\n            if bus_count >= 2:  # If there are 2 or more adjacent buses\n                total_cost += bus_count * bus_fare  # Add cost of each bus journey\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add cost of tube journey\n    \n    if bus_count >= 2:  # If there are remaining buses at the end\n        total_cost += bus_count * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            total_cost += 1.5\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost -= 1.5\n                bus_count -= 2\n            total_cost += 2.4\n            \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    bus_counter = 0\n    for i in journey:\n        if isinstance(i, int):\n            bus_counter += 1\n            if bus_counter == 2:\n                total_cost += bus_fare\n                bus_counter = 0\n        else:\n            total_cost += tube_fare\n            if bus_counter == 1:\n                total_cost += bus_fare\n                bus_counter = 0\n    if bus_counter == 1:\n        total_cost += bus_fare\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost * 2\n                i += 1\n            else:\n                total_cost += bus_cost\n        else:\n            total_cost += tube_cost\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                i += 1\n        i += 1\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i == 0 or not isinstance(journey[i-1], int):\n                total_cost += 1.50\n                bus_count += 1\n            elif bus_count == 1:\n                bus_count = 0\n            else:\n                bus_count -= 2\n        else:\n            total_cost += 2.40\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n\n    total_cost = 0\n    is_previous_bus = False\n\n    for leg in journey:\n        if isinstance(leg, str):\n            total_cost += tube_fare\n            is_previous_bus = False\n        else:\n            if is_previous_bus:\n                is_previous_bus = False\n            else:\n                total_cost += bus_fare\n                is_previous_bus = True\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.4\n    bus_fare = 1.5\n\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if type(item) == int:\n            bus_count += 1\n        else:\n            if bus_count >= 2:\n                total_cost += bus_fare * 2\n            elif bus_count == 1:\n                total_cost += bus_fare\n            total_cost += tube_fare\n            bus_count = 0\n\n    if bus_count >= 2:\n        total_cost += bus_fare * 2\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)\n",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    consecutive_buses = 0\n    \n    for element in journey:\n        if isinstance(element, int):\n            consecutive_buses += 1\n        else:\n            if consecutive_buses >= 2:\n                total_cost += (consecutive_buses // 2) * bus_fare\n            total_cost += consecutive_buses * bus_fare\n            consecutive_buses = 0\n            total_cost += tube_fare\n    \n    if consecutive_buses >= 2:\n        total_cost += (consecutive_buses // 2) * bus_fare\n    total_cost += consecutive_buses * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    consecutive_buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            consecutive_buses = 0\n        else:  # Bus journey\n            total_cost += 1.50\n            consecutive_buses += 1\n            \n            # Check if there are 2 or more consecutive bus journeys\n            if consecutive_buses >= 2:\n                total_cost -= 1.50  # Deduct one bus fare\n                consecutive_buses = 0  # Reset counter\n                \n    return '\u00a3' + '{:.2f}'.format(total_cost)"
        ],
        "2": [
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            bus_count += 1\n        else:\n            total_cost += bus_count // 2 * 1.5 + bus_count % 2 * 1.5\n            bus_count = 0\n            total_cost += 2.4\n    total_cost += bus_count // 2 * 1.5 + bus_count % 2 * 1.5\n    return '\u00a3' + '{:.2f}'.format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int) and i == 0:\n            total_cost += bus_fare\n        elif isinstance(journey[i], int) and isinstance(journey[i-1], int):\n            continue\n        elif isinstance(journey[i], int) and isinstance(journey[i-1], str):\n            total_cost += bus_fare\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_counter = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_counter += 1\n        else:\n            total_cost += bus_cost * (bus_counter // 2 + bus_counter % 2)\n            bus_counter = 0\n            total_cost += tube_cost\n\n    total_cost += bus_cost * (bus_counter // 2 + bus_counter % 2)\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        else:\n            if bus_count >= 2:\n                bus_count -= 1\n            else:\n                total_cost += bus_cost\n                bus_count += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if i > 0 and isinstance(journey[i-1], int):\n                bus_count += 1\n            else:\n                total_cost += 1.5\n        else:\n            total_cost += 2.4\n\n    total_cost -= (bus_count // 2) * 1.5\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_journey_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += 2.40\n            bus_journey_count = 0\n        elif isinstance(journey[i], int):\n            total_cost += 1.50\n            bus_journey_count += 1\n            if bus_journey_count == 2:\n                total_cost -= 1.50\n                bus_journey_count = 0\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):\n            total_cost += 1.50\n            bus_count += 1\n        else:\n            total_cost += 2.40\n            if bus_count >= 2:\n                bus_count = 0\n                total_cost -= 1.50\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # check if element is a bus number\n            total_cost += bus_fare\n            \n            # check if there are 2 or more adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_fare\n                \n        else:  # element is a tube name\n            total_cost += tube_fare\n            \n    return \"\u00a3\" + \"{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # check if element is a tube name\n            total_cost += 2.4  # add tube fare\n            if bus_count > 1:  # if there were more than 1 adjacent bus journeys\n                total_cost -= 1.5  # subtract the extra bus fare\n            bus_count = 0  # reset the bus count\n        else:  # if element is a bus number\n            total_cost += 1.5  # add bus fare\n            bus_count += 1  # increment bus count\n    if bus_count > 1:  # if there were more than 1 adjacent bus journeys at the end\n        total_cost -= 1.5  # subtract the extra bus fare\n    return \"\u00a3{:.2f}\".format(total_cost)  # return total cost rounded to 2 decimal places",
            "def london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):\n            total_cost += tube_fare\n            bus_count = 0\n        elif isinstance(stop, int):\n            total_cost += bus_fare\n            bus_count += 1\n            if bus_count >= 2:\n                total_cost -= bus_fare\n                bus_count = 0\n\n    return \"\u00a3{:.2f}\".format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))",
            "def london_city_hacker(journey):\n    total_cost = 0.0\n    bus_count = 0\n    for i in range(len(journey)):\n        if type(journey[i]) == str: # tube journey\n            total_cost += 2.40\n            if bus_count >= 2: # apply bus fare cap\n                total_cost -= 1.50\n            bus_count = 0\n        else: # bus journey\n            total_cost += 1.50\n            bus_count += 1\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    is_last_bus = False\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            # bus journey\n            if is_last_bus:\n                # if last journey was also a bus journey, do not add fare\n                is_last_bus = False\n            else:\n                # if last journey was not a bus journey, add bus fare\n                total_cost += bus_fare\n                is_last_bus = True\n        else:\n            # tube journey\n            total_cost += tube_fare\n            is_last_bus = False\n\n    return '\u00a3{:.2f}'.format(total_cost)"
        ],
        "3": [
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str): # tube journey\n            total_cost += tube_fare\n            i += 1\n        else: # bus journey\n            bus_journeys = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_journeys += 1\n                i += 1\n            total_cost += bus_fare * ((bus_journeys + 1) // 2)\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i < len(journey) - 1 and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):\n            if i + 1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_cost\n                i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    \n    total_cost = 0.0\n    \n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n    \n    return \"\u00a3{:0.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    cost = 0\n    is_bus = False\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            cost += 2.40\n            is_bus = False\n        elif isinstance(journey[i], int):\n            if is_bus:\n                is_bus = False\n            else:\n                is_bus = True\n                cost += 1.50\n                \n    return \"\u00a3{:.2f}\".format(cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    num_buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            num_buses += 1\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                continue\n            else:\n                num_sets = num_buses // 2\n                total_cost += num_sets * bus_fare\n                if num_buses % 2 != 0:\n                    total_cost += bus_fare\n                num_buses = 0\n        else:\n            total_cost += tube_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)"
        ],
        "4": [
            "def london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):\n            bus_count += 1\n            if bus_count == 2:\n                total_cost += bus_cost\n                bus_count = 0\n        else:\n            if bus_count == 1:\n                total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count == 1:\n        total_cost += bus_cost\n\n    return '\u00a3{:.2f}'.format(total_cost)",
            "def london_city_hacker(journey):\n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n    count_bus = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n            count_bus = 0\n        elif isinstance(journey[i], int):\n            total_cost += bus_fare\n            count_bus += 1\n            if count_bus >= 2:\n                total_cost -= bus_fare\n                count_bus = 0\n    \n    return '\u00a3' + \"{:.2f}\".format(total_cost)\n\nprint(london_city_hacker(['Piccadilly', 74, 'Northern', 'Central', 89]))\nprint(london_city_hacker(['Bakerloo', 11, 'District', 12, 13, 'Circle', 55]))\nprint(london_city_hacker(['Jubilee', 13, 14, 'Bakerloo', 'Northern']))\nprint(london_city_hacker(['Jubilee', 'Victoria', 13, 'Central', 'Bakerloo']))",
            "def london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    adjacent_buses = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):\n            if isinstance(journey[i-1], int):\n                adjacent_buses += 1\n            else:\n                total_cost += bus_fare\n        else:\n            total_cost += tube_fare\n    \n    total_cost -= (adjacent_buses // 2) * bus_fare\n    \n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0\n\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):\n            if i+1 < len(journey) and isinstance(journey[i+1], int):\n                # Two adjacent bus journeys, so count as one fare\n                total_cost += bus_fare\n                i += 2\n            else:\n                total_cost += bus_fare\n                i += 1\n        else:\n            total_cost += tube_fare\n            i += 1\n\n    return \"\u00a3{:.2f}\".format(total_cost)",
            "def london_city_hacker(journey):\n    total_cost = 0\n    buses = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int): # check if element is a bus number\n            total_cost += 1.50 # add bus fare\n            buses += 1\n            if buses >= 2: # check if there are 2 or more adjacent bus journeys\n                total_cost -= 1.50 # subtract one bus fare\n                buses = 0 # reset bus counter\n        else: # element is a tube name\n            total_cost += 2.40 # add tube fare\n            buses = 0 # reset bus counter\n\n    return \"\u00a3{:.2f}\".format(total_cost)"
        ]
    }
}