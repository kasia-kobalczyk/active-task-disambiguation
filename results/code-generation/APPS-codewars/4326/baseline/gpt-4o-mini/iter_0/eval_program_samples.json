{
    "0": {
        "0": [
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # it's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # every two adjacent buses count as one\n                total_cost += 1.50\n                bus_count = 0  # reset after counting the pair\n        else:\n            raise ValueError(\"Invalid item in journey\")\n    \n    if bus_count == 1:  # if there's an odd bus at the end, count it\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            \n            if bus_count % 2 == 0:  # Every two adjacent buses\n                total_cost += 1.50  # Only add once for every pair\n            elif bus_count == 1:  # First bus of a pair\n                # Do not add anything, wait for the second bus\n            \n    # If there's an odd bus at the end, we need to add the last bus fare\n    if bus_count % 2 == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus sequence\n                total_cost += (bus_count // 2) * 1.50  # Count full pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus, add one more fare\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count for capped buses\n            elif bus_count == 1:  # First bus in a new sequence\n                total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Cap after two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of the pair\n                continue\n    \n    if bus_count == 1:  # If there's an odd bus at the end, charge it\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Every 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting 2 buses\n\n    # If there's an unpaired bus at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Check if the item is a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count capped bus fares\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:  # Handle any remaining buses at the end of the journey\n        total_cost += (bus_count // 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting a pair\n            elif bus_count == 1:  # First bus in a potential pair\n                continue  # Do not add yet, wait for the next bus\n    \n    # If there's an unpaired bus at the end\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two adjacent buses counted as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset count after capping\n            elif bus_count == 1:  # First bus counts, but not capped yet\n                continue\n    \n    if bus_count == 1:  # If there's an odd bus at the end\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube journey\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # We have a pair of adjacent buses\n                total_cost += 1.50  # Only charge for one\n                bus_count = 0  # Reset count after charging\n        else:\n            continue  # Ignore any non-string/non-int items\n\n    # Handle any uncharged single bus at the end of the journey\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Every 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after capping\n    \n    if bus_count == 1:  # If there's an unpaired bus at the end\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # reset bus count for next pair of buses\n\n    # If there's an odd bus at the end that wasn't counted\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            if bus_count > 0:  # if there were adjacent buses\n                total_cost += (bus_count // 2) * 1.50\n                bus_count = 0  # reset bus count after calculating\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n            \n    # Handle any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(journey[i], int):  # It's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus sequence\n                total_cost += 1.50 * (bus_count // 2)  # Charge for pairs\n                if bus_count % 2 == 1:  # If odd bus, charge one more\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n\n    # Handle any remaining single bus journey\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Count as one fare for every two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting a pair\n                \n    # If there is an odd bus out at the end, count its fare\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count after a tube journey\n        elif isinstance(stop, int):  # bus journey\n            bus_count += 1\n            \n            if bus_count % 2 == 1:  # count only the first of each pair\n                total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare after 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after adding the capped fare\n            # If bus_count is 1, do not add the fare yet, wait for the next bus\n    \n    # If there is an uncounted bus at the end\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(journey[i], int):  # it's a bus journey\n            bus_count += 1\n            if (i == len(journey) - 1) or (isinstance(journey[i + 1], str)):  # end of bus sequence\n                total_cost += (bus_count // 2) * 1.50  # cost for complete pairs\n                if bus_count % 2 == 1:  # if there's an odd bus at the end\n                    total_cost += 1.50\n                bus_count = 0  # reset bus count\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus number\n            bus_count += 1\n            if (i == len(journey) - 1) or (not isinstance(journey[i + 1], int)):  # End of bus sequence\n                total_cost += 1.50 * (bus_count // 2) + 1.50 * (bus_count % 2)  # Cap the fare for adjacent buses\n                bus_count = 0  # Reset bus count\n\n    return f'\u00a3{total_cost:.2f}'\n```"
        ],
        "1": [
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            total_cost += bus_fare\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n            i += 1  # Move past the last bus in the sequence\n        else:\n            i += 1  # Just in case to avoid infinite loop (should not occur)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # Every two adjacent buses count as one fare\n                total_cost += 0  # No extra cost, already counted\n            else:  # Odd bus, we charge the fare\n                total_cost += bus_fare\n\n    # Final cost formatting\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            if bus_count > 0:\n                total_cost += bus_cost * (bus_count // 2)  # Count pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus, add one more fare\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    # Handle any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += bus_cost * (bus_count // 2)\n        if bus_count % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                # Skip the next bus\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of bus sequence\n                total_cost += (bus_count // 2) * 1.50  # Add capped fare for pairs\n                if bus_count % 2 == 1:  # Add fare for the odd one out if exists\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus\n            # Count adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            # Apply bus fare cap\n            total_cost += (count // 2) * bus_fare + (count % 2) * bus_fare\n        else:\n            i += 1  # in case of unexpected item, just continue\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                i += 1  # Skip the next bus as it is part of the set\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Check if it's a bus number\n            bus_count += 1\n        else:  # It's a tube journey\n            if bus_count > 1:  # If we had adjacent buses\n                total_cost += bus_cost * (bus_count // 2)  # Apply cap for pairs\n            elif bus_count == 1:  # Single bus\n                total_cost += bus_cost\n            total_cost += tube_cost  # Add tube fare\n            bus_count = 0  # Reset bus count after encountering tube\n\n    # Check for remaining buses at the end of the journey\n    if bus_count > 1:\n        total_cost += bus_cost * (bus_count // 2)\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Capped bus fare for pairs\n                if bus_count % 2 == 1:\n                    total_cost += bus_cost  # Add fare for remaining bus\n                bus_count = 0  # Reset bus count\n            total_cost += tube_cost  # Add tube fare\n\n    if bus_count > 0:  # Add fare for any remaining buses\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # it's a bus number\n            # Count the number of adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            # Add the capped fare for adjacent buses\n            total_cost += (count // 2) * bus_fare  # for pairs of buses\n            if count % 2 == 1:  # if there's an odd bus out\n                total_cost += bus_fare\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent bus journeys\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_fare  # Counted pairs of buses\n            if count % 2 == 1:\n                total_cost += bus_fare  # Add fare for the leftover bus if odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare  # charge for pairs of buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # charge for single bus\n            bus_count = 0\n            total_cost += tube_fare  # charge for tube ride\n    \n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare  # charge for pairs of buses\n    elif bus_count == 1:\n        total_cost += bus_fare  # charge for single bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            total_cost += bus_fare\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n            i += 1  # Move past the last bus in the current group\n        else:\n            i += 1  # Just in case, though input guarantees types\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Check if it's a bus\n            # Count consecutive buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Cap fare for sets of two buses\n            total_cost += (bus_count // 2) * bus_cost\n            if bus_count % 2 != 0:  # If there's an odd bus, add one more fare\n                total_cost += bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 0:\n                total_cost += bus_fare * (bus_count // 2)  # charging for pairs of buses\n                if bus_count % 2 == 1:  # if there's an odd bus out, charge for it\n                    total_cost += bus_fare\n                bus_count = 0  # reset bus count\n            total_cost += tube_fare\n\n    # Account for any remaining buses after the loop\n    if bus_count > 0:\n        total_cost += bus_fare * (bus_count // 2)\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:\n                total_cost += bus_fare  # Count buses in pairs\n                bus_count = 0\n            elif bus_count == 1:\n                total_cost += bus_fare  # Single bus\n                bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    if bus_count > 1:\n        total_cost += bus_fare  # Count buses in pairs\n    elif bus_count == 1:\n        total_cost += bus_fare  # Single bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)  # Count capped fare for buses\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:  # Final count of buses\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n                if bus_count % 2 != 0:\n                    total_cost += bus_fare  # Add the fare for the leftover bus if exists\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare  # Count remaining pairs of buses\n        if bus_count % 2 != 0:\n            total_cost += bus_fare  # Add the fare for the leftover bus if exists\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Check if it's a bus number\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for sets of two buses\n                total_cost += (bus_count % 2) * bus_fare  # Charge for remaining bus if odd\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Charge tube fare\n\n    # Finalize any remaining buses at the end\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count capped fares for adjacent buses\n                total_cost += (bus_count % 2) * 1.50  # Add fare for the remaining bus if any\n                bus_count = 0\n            total_cost += 2.40  # Add tube fare\n    \n    if bus_count > 0:  # Handle any remaining bus counts at the end of the journey\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            count_buses = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count_buses += 1\n                i += 1\n            total_cost += (count_buses // 2) * bus_fare  # Count of pairs of buses\n            total_cost += (count_buses % 2) * bus_fare  # Add fare for an unpaired bus if exists\n            continue  # Skip the increment of i in the for loop\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "2": [
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_cost  # Remove the additional cost\n                i += 1\n            i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus journey\n            bus_count += 1\n        else:  # tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # cost for pairs of buses\n                if bus_count % 2 == 1:  # if there's an odd bus left\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost  # add tube cost\n\n    # Handle any remaining buses at the end\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(journey[i], int):  # Check if it's a bus\n            bus_count += 1\n            if bus_count == 2:  # Every 2 adjacent buses count as 1\n                total_cost += 1.50\n                bus_count = 0\n            elif bus_count == 1:  # Only add the fare for the first bus\n                total_cost += 1.50\n\n    if bus_count == 1:  # If there's an unpaired bus at the end\n        total_cost -= 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    bus_count = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                # If the next one is also a bus, don't count it yet\n                pass\n            else:\n                # Add cost for the current set of adjacent buses\n                total_cost += bus_cost\n                bus_count = 0\n        else:  # Tube journey\n            total_cost += tube_cost\n            bus_count = 0\n            \n        i += 1\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # bus number\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # end of a bus streak\n                total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n                bus_count = 0\n        else:  # tube name\n            total_cost += 2.40\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            if bus_count > 1:  # Cap the bus fares for adjacent buses\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n                total_cost += (bus_count % 2) * 1.50  # Add any remaining bus\n            else:\n                total_cost += bus_count * 1.50\n            \n            total_cost += 2.40  # Add tube fare\n            bus_count = 0  # Reset bus count\n\n    # Handle any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            \n            # Every pair of adjacent buses count as one fare\n            if bus_count == 2:\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting pair\n            elif bus_count == 1:  # Count single bus only if it's not part of a pair\n                total_cost += 1.50\n\n    # If there's an unpaired bus at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            # Calculate fare for adjacent buses\n            total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n            total_cost += (bus_count % 2) * bus_fare  # Add fare for any remaining bus\n            bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    # Final calculation for any remaining buses at the end\n    total_cost += (bus_count // 2) * bus_fare\n    total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_cost  # Remove the cost of the next bus\n                i += 1  # Move to the next bus\n            i += 1  # Move to the next item after processing adjacent buses\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus out\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare  # Charge for pairs of buses\n        if bus_count % 2 == 1:  # If there's an odd bus out\n            total_cost += bus_fare\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # Add the leftover bus if there is one\n                bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    # After finishing the loop, check if there were any remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus out\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n\n    # Handle any remaining buses after the last tube\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n            # Cap for two adjacent buses\n            if i > 0 and isinstance(journey[i - 1], int):\n                total_cost -= bus_cost  # Remove last bus cost\n                total_cost += bus_cost  # Add the capped bus cost\n            i += 1\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus journey\n            total_cost += bus_cost\n            # Check for adjacent bus journeys\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_cost  # Remove the additional cost for adjacent bus\n                i += 1\n            i += 1\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += tube_fare\n            i += 1\n        else:  # It's a bus number\n            # Count adjacent buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Add cost for the buses, capping at pairs\n            total_cost += (bus_count // 2 + bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare  # Count the first bus\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus journey\n                total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for pairs of buses\n                total_cost += (bus_count % 2) * 1.50  # Charge for any remaining bus\n                bus_count = 0\n            total_cost += 2.40  # Charge for tube journey\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for sets of two adjacent buses\n                total_cost += (bus_count % 2) * 1.50  # Charge for any remaining single bus\n                bus_count = 0\n            total_cost += 2.40  # Tube journey cost\n\n    if bus_count > 0:  # End of journey, check if there are remaining buses to charge\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 1:\n                total_cost += bus_fare * (bus_count // 2)\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 1:\n        total_cost += bus_fare * (bus_count // 2)\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Cost for pairs of buses\n                if bus_count % 2 != 0:\n                    total_cost += bus_cost  # Cost for the remaining single bus\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:  # Handle any remaining buses at the end of the journey\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 != 0:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_fare  # Cap the cost for previous buses\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += bus_fare  # Cap the cost for any remaining buses\n\n    sets_of_buses = bus_count // 2\n    total_cost += sets_of_buses * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus counter\n        else:  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping after two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus counter after capping\n            elif bus_count == 1:  # First bus in the series\n                total_cost += 1.50\n                \n    total_cost = round(total_cost, 2)\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n            \n    # Handle remaining buses at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "3": [
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            # Every two adjacent buses count as one bus fare\n            if bus_count % 2 == 1:  # Only add cost for the first in the pair\n                total_cost += bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Count consecutive bus journeys\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Apply bus fare cap\n            total_cost += (bus_count // 2) * bus_fare  # Sets of two\n            total_cost += (bus_count % 2) * bus_fare  # Remainder if odd\n            continue  # Skip the increment in the for loop\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus out\n                    total_cost += 1.50\n                bus_count = 0\n            total_cost += 2.40  # Charge for tube ride\n\n    if bus_count > 0:  # Handle remaining buses at the end\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # bus journey\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n            i += 1  # Move to the next journey item\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):\n            total_cost += tube_fare\n        else:  # it's a bus number\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # check for adjacent bus\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1  # skip the next bus\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count sets of two buses\n                if bus_count % 2 == 1:\n                    total_cost += 1.50  # Add one more bus fare if there's an odd bus\n                bus_count = 0\n            total_cost += 2.40  # Tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # It's a bus number\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # If it's the last or next is not a bus\n                total_cost += 1.50  # Add the cost for the last bus\n                bus_count = 0  # Reset bus count\n\n    total_cost += (bus_count // 2) * 1.50  # Cap adjacent bus fares\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for sets of two buses\n                total_cost += (bus_count % 2) * 1.50  # Charge for any remaining single bus\n                bus_count = 0\n            total_cost += 2.40  # Cost of tube journey\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                i += 2  # Skip the next bus as it's part of a pair\n            else:\n                total_cost += bus_fare\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:  # Apply bus cap for sets of two adjacent buses\n                total_cost += (bus_count // 2) * bus_cost\n                total_cost += (bus_count % 2) * bus_cost\n            elif bus_count == 1:\n                total_cost += bus_cost\n            bus_count = 0  # Reset bus count for tube journey\n            total_cost += tube_cost\n\n    # Handle any remaining bus counts after the loop\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_cost\n        total_cost += (bus_count % 2) * bus_cost\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # Add any leftover bus\n                bus_count = 0\n            total_cost += tube_fare\n\n    # If there are any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus number\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # Next is not a bus\n                total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n                bus_count = 0\n        else:  # Tube name\n            total_cost += 2.40\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_streak = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube\n            if bus_streak > 1:\n                total_cost += bus_cost * (bus_streak // 2)\n            elif bus_streak == 1:\n                total_cost += bus_cost\n            bus_streak = 0\n            total_cost += tube_cost\n        elif isinstance(stop, int):  # Bus\n            bus_streak += 1\n\n    if bus_streak > 1:\n        total_cost += bus_cost * (bus_streak // 2)\n    elif bus_streak == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                # Skip the next bus as it's part of the same fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_streak = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_streak += 1\n        else:  # Tube name\n            if bus_streak > 0:\n                total_cost += (bus_streak // 2) * bus_cost\n                if bus_streak % 2 == 1:\n                    total_cost += bus_cost\n                bus_streak = 0\n            total_cost += tube_cost\n\n    if bus_streak > 0:\n        total_cost += (bus_streak // 2) * bus_cost\n        if bus_streak % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n            \n            # Check if next is also a bus to handle capping\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                continue  # do not add yet if next is also a bus\n            \n            # We reached the end of a bus sequence or the end of journey\n            total_cost += 1.50  # add bus fare for the current sequence\n            bus_count = 0  # reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # If it's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost  # Count this bus\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip the next adjacent bus\n                    i += 1\n            else:\n                total_cost += bus_cost  # Count single bus\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            \n            # Check for adjacent buses\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after adding fare\n                \n            # If we have two adjacent buses, we add one fare\n            if bus_count == 2:\n                total_cost -= 1.50  # Remove one bus fare for the capped fare\n                bus_count = 0  # Reset bus count after applying cap\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_cost * ((bus_count + 1) // 2)  # Cap the bus fare\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:\n        total_cost += bus_cost * ((bus_count + 1) // 2)  # Final cap for trailing buses\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare  # Count it once\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1  # Skip the next bus\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost\n                i += 2  # Skip the next bus\n            else:\n                total_cost += bus_cost\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare  # Count this bus\n                # Skip the next bus in case it's adjacent\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare  # Count single bus\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:  # Calculate bus fare for adjacent buses\n                total_cost += (bus_count // 2) * 1.50  # charge for sets of two\n                total_cost += (bus_count % 2) * 1.50  # charge for any remaining bus\n                bus_count = 0\n            total_cost += 2.40  # Tube fare\n\n    if bus_count > 0:  # Final bus calculation if journey ends with buses\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "4": [
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus journey\n            # Check for adjacent buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Each set of two adjacent buses counts as one fare\n            total_cost += (bus_count // 2) * bus_fare\n            if bus_count % 2 == 1:  # If there's an extra bus\n                total_cost += bus_fare\n            continue  # Skip the increment at the end since i is already adjusted\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube journey\n            total_cost += tube_cost\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # it's a bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # every pair of buses is charged as one\n                total_cost += 0  # do not add additional cost\n            else:\n                total_cost += bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Count consecutive buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            total_cost += (bus_count // 2) * bus_cost  # Count pairs of buses\n            if bus_count % 2 != 0:  # If there's an unpaired bus\n                total_cost += bus_cost\n                \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            total_cost += tube_fare\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count sets of 2\n                total_cost += (bus_count % 2) * bus_fare  # Handle any remaining bus\n                bus_count = 0\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # If the item is a bus number\n            bus_count += 1\n        else:  # If the item is a tube name\n            # If there are any adjacent buses counted, calculate the fare for them\n            total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n            bus_count = 0  # Reset bus count after calculating\n\n            # Add tube fare\n            total_cost += 2.40\n\n    # After the loop, handle any remaining adjacent buses\n    total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Capped bus fares\n                total_cost += (bus_count % 2) * bus_cost  # Add any remaining bus fare\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        total_cost += (bus_count % 2) * bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost\n                # Skip the next adjacent bus\n                i += 1\n            else:\n                total_cost += bus_cost\n        \n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            # Add cost for any adjacent buses counted so far\n            total_cost += (bus_count // 2) * bus_fare\n            total_cost += (bus_count % 2) * bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    # Add cost for any remaining adjacent buses\n    total_cost += (bus_count // 2) * bus_fare\n    total_cost += (bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # If it's a bus number\n            # Check for adjacent buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Calculate the fare for adjacent buses\n            total_cost += (bus_count // 2) * bus_fare + (bus_count % 2) * bus_fare\n        else:  # It's a tube\n            total_cost += tube_fare\n            i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Apply bus cap\n                total_cost += (bus_count % 2) * bus_fare  # Add remaining bus fare\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add tube fare\n    \n    # Handle the case if the journey ends with buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count after processing tubes\n\n    # If there are any buses left to process at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # If it's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            total_cost += tube_fare\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for sets of two adjacent buses\n                if bus_count % 2 == 1:  # If there's an odd bus out\n                    total_cost += bus_fare\n                bus_count = 0\n\n    # If there are any remaining bus journeys at the end\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # Charge for any leftover bus\n                bus_count = 0\n            total_cost += tube_fare  # Charge for the tube journey\n    \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube name\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n\n            # If we have two adjacent buses, cap the fare\n            if bus_count % 2 == 0:\n                total_cost += 0  # Do not add cost for this bus, already counted\n            else:\n                total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # charge for pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # charge for any single bus left\n                bus_count = 0\n            total_cost += tube_fare  # charge for tube\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += bus_fare * (bus_count // 2)\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 1:\n        total_cost += bus_fare * (bus_count // 2)\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus\n            # Check for consecutive buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            # Add fare for sets of two adjacent buses\n            total_cost += bus_fare * (count // 2 + count % 2)\n            continue  # Skip the increment of i because it has been handled\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus\n            # Check for adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost\n                # Skip the next adjacent bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 2:  # Every 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after capping\n    \n    if bus_count == 1:  # If there's an uncounted single bus at the end\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count after a tube\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            \n            if bus_count == 2:  # every two buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # reset count after counting a set of two\n        else:\n            raise ValueError(\"Journey contains invalid entries.\")\n\n    # Any leftover bus count should also be accounted for\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(journey[i], int):  # it's a bus\n            bus_count += 1\n            if (i == len(journey) - 1) or (isinstance(journey[i + 1], str)):\n                total_cost += 1.50  # add cost for current bus\n                bus_count = 0  # reset bus count\n\n    # Apply bus fare cap for adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # count pairs of buses\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of adjacent buses\n                total_cost += (bus_count % 2) * 1.50  # Count leftover bus if any\n                bus_count = 0\n            total_cost += 2.40  # Tube fare\n            \n    # In case the journey ends with buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset the bus count after capping\n\n    if bus_count == 1:  # If there was an unpaired bus journey\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Count as one set\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting a set\n            \n    if bus_count == 1:  # If there's an uncounted bus at the end\n        total_cost += 1.50\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare  # Count this set of two buses as one\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1  # Skip the adjacent buses\n            else:\n                total_cost += bus_fare  # Single bus journey\n            i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare after 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after adding the capped fare\n                \n    # If there's an unpaired bus at the end, add its fare\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count on tube\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Cap for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset count after capping\n            elif bus_count == 1:  # First bus in a new sequence\n                total_cost += 1.50\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus\n            bus_count += 1\n            if bus_count == 2:  # We found a pair of adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after charging for the pair\n            elif bus_count == 1:  # Single bus journey\n                total_cost += 0  # Do not charge yet, wait for a pair\n\n    if bus_count == 1:  # If there's a single unpaired bus at the end\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # bus\n            bus_count += 1\n            if bus_count % 2 == 0:  # every two buses\n                total_cost += 1.50  # charge once for the set of two\n            elif bus_count == 1:  # first bus in the set\n                total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count on tube journey\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting two buses\n            elif bus_count == 1:  # Only count the first bus fare\n                total_cost += 1.50\n\n    # If there's an unpaired bus at the end, we need to add its cost\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n    \n    # Count the number of sets of two adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # Each pair counts as one fare\n    total_cost += (bus_count % 2) * 1.50  # Add fare for any remaining single bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n\n            # Calculate cost every two buses\n            if bus_count == 2:\n                total_cost += 1.50\n                bus_count = 0  # Reset after charging for a pair\n            \n    # If there's an odd bus at the end, charge for it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n\n            # If we have two or more adjacent buses, count them as capped fare\n            if bus_count == 2:\n                total_cost += 1.50  # Capped fare for two adjacent buses\n                bus_count = 0  # Reset bus count after counting the pair\n            elif bus_count == 1:\n                continue  # Just count it, will be added in the next check\n\n    # If there is an unpaired bus at the end, add its fare\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Cap after two buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting a pair\n            elif bus_count == 1:  # First bus of the pair\n                continue  # Wait for the second bus to charge\n\n    if bus_count == 1:  # If we end with an unpaired bus\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n    \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n    \n    # Calculate the number of capped bus fares\n    total_cost += (bus_count // 2) * bus_cost  # One fare for each pair of buses\n    total_cost += (bus_count % 2) * bus_cost  # Add fare for any remaining single bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n            \n            # Check if we can apply the cap for sets of two buses\n            if bus_count % 2 == 0:\n                total_cost += 1.50  # Count only once for every two buses\n            elif bus_count == 1:\n                total_cost += 1.50  # Count for the first bus in a pair\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # apply cap\n                total_cost += 1.50\n                bus_count = 0  # reset counter after capping\n            elif bus_count == 1:  # first bus in a pair\n                continue  # wait for a possible pair\n            \n    if bus_count == 1:  # if there's an unpaired bus at the end\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "1": [
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus\n            total_cost += bus_fare\n            # Check for adjacent buses\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_fare  # Remove the cost of the second bus\n                i += 1  # Skip the next bus in the count\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Check if it's a bus number\n            bus_count += 1\n        else:  # It's a tube journey\n            if bus_count > 1:  # If we had adjacent bus journeys\n                total_cost += (bus_count // 2) * bus_cost  # Cap the cost\n            elif bus_count == 1:\n                total_cost += bus_cost  # Single bus cost\n            total_cost += tube_cost  # Add the tube cost\n            bus_count = 0  # Reset bus count\n\n    # Handle case where the last items in the journey are buses\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_cost\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Capped bus fare for pairs\n                if bus_count % 2 == 1:\n                    total_cost += bus_cost  # Add fare for remaining bus if odd\n                bus_count = 0\n            total_cost += tube_cost  # Add tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost  # Capped bus fare for pairs\n        if bus_count % 2 == 1:\n            total_cost += bus_cost  # Add fare for remaining bus if odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # it's a bus number\n            # Count the number of adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            # Add the capped fare for adjacent buses\n            total_cost += (count // 2) * bus_fare  # for pairs of buses\n            if count % 2 == 1:  # if there's an odd bus out\n                total_cost += bus_fare\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Check if it's a bus number\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent buses\n                total_cost += bus_fare  # Only add fare for the first bus in the pair\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip the next bus\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent bus journeys\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_fare  # Counted pairs of buses\n            if count % 2 == 1:\n                total_cost += bus_fare  # Add fare for the leftover bus if odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost\n                i += 1  # Skip next bus as it is part of the same fare\n            else:\n                total_cost += bus_cost\n        \n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost -= bus_fare  # Remove the current bus fare for capping\n                i += 2  # Skip the next bus since it is adjacent\n            else:\n                i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare  # Count the first bus fare\n                i += 1  # Skip the next bus as it's part of the pair\n            else:\n                total_cost += bus_fare\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # If it's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # Last bus or next is not a bus\n                total_cost += 1.50 * ((bus_count + 1) // 2)  # Cap the fare\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Check if it's a bus number\n            bus_count += 1\n            if (i == len(journey) - 1 or not isinstance(journey[i + 1], int)):  # End of bus sequence\n                total_cost += (bus_count // 2) * 1.5 + (bus_count % 2) * 1.5\n                bus_count = 0\n        else:  # It's a tube\n            total_cost += 2.4\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n                if bus_count % 2 != 0:\n                    total_cost += bus_fare  # Add fare for the remaining bus if odd\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n        if bus_count % 2 != 0:\n            total_cost += bus_fare  # Add fare for the remaining bus if odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Check if it's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # Charge for remaining bus if odd\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Charge for tube\n\n    # Finalize any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count capped fares for adjacent buses\n                total_cost += (bus_count % 2) * 1.50  # Add fare for the remaining bus if any\n                bus_count = 0\n            total_cost += 2.40  # Add tube fare\n    \n    if bus_count > 0:  # Handle any remaining bus count at the end of the journey\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # If it's a bus number\n            bus_count += 1\n        else:  # It's a tube\n            total_cost += tube_fare\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count sets of 2 buses\n                total_cost += (bus_count % 2) * bus_fare  # Add fare for any single bus left over\n                bus_count = 0  # Reset bus count after handling\n            \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            count_buses = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count_buses += 1\n                i += 1\n            total_cost += (count_buses // 2) * bus_fare  # Count of pairs of buses\n            total_cost += (count_buses % 2) * bus_fare  # Add fare for any remaining bus\n            continue  # Skip to the next iteration\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus number\n            total_cost += bus_fare\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent buses\n                i += 1\n            i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n\n            # Every two adjacent buses count as one bus fare\n            if bus_count % 2 == 1:\n                total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 0:\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus journey\n            # Check for adjacent buses\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_fare  # Count the first bus in the pair\n                i += 1  # Skip the next bus since it's paired\n            else:\n                total_cost += bus_fare\n        \n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "2": [
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # charge for sets of two adjacent buses\n                total_cost += (bus_count % 2) * 1.50  # charge for any remaining single bus\n                bus_count = 0\n            total_cost += 2.40  # tube journey cost\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            # Calculate fare for adjacent buses\n            total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n            total_cost += (bus_count % 2) * bus_fare  # Add fare for any remaining bus\n            bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add tube fare\n\n    # Final check for any remaining buses at the end of the journey\n    total_cost += (bus_count // 2) * bus_fare\n    total_cost += (bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_cost  # Remove the cost of the next bus\n                i += 1  # Move to the next bus\n            i += 1  # Move to the next item after the last bus in the group\n        else:\n            i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # Add the leftover bus if there is one\n                bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    # After finishing the loop, check if there were any remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                continue\n            else:  # End of a bus sequence\n                total_cost += (bus_count // 2) * bus_cost  # Cost for pairs of buses\n                if bus_count % 2 != 0:  # If there's an odd one out\n                    total_cost += bus_cost\n                bus_count = 0  # Reset bus count\n        else:  # Tube journey\n            total_cost += tube_cost\n    \n    # Final adjustment for any remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 != 0:\n            total_cost += bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus journey\n            total_cost += bus_cost\n            # Check for adjacent bus journeys\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_cost  # Remove the additional cost for adjacent bus\n                i += 1\n            i += 1\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                i += 2  # Skip the next bus\n            else:\n                total_cost += bus_fare\n                i += 1\n                \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus number\n            # Count the number of adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_fare  # Capped fare for pairs of buses\n            if count % 2 == 1:  # If there's an odd bus\n                total_cost += bus_fare\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:  # If there were any bus journeys before\n                total_cost += bus_fare * (bus_count // 2)  # Count pairs of adjacent buses\n                if bus_count % 2 == 1:  # If there's an odd bus out\n                    total_cost += bus_fare\n                bus_count = 0  # Reset bus count for next segment\n            total_cost += tube_fare  # Add tube fare\n            \n    # If there are buses counted at the end of the journey\n    if bus_count > 0:\n        total_cost += bus_fare * (bus_count // 2)\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_cost  # Count pairs of buses\n            if count % 2 == 1:\n                total_cost += bus_cost  # Add for the remaining bus if there's an odd number\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 1:\n                total_cost += bus_fare * (bus_count // 2)\n            elif bus_count == 1:\n                total_cost += bus_fare\n            total_cost += tube_fare\n            bus_count = 0  # reset bus count after processing tube\n\n    # If the journey ends with buses\n    if bus_count > 1:\n        total_cost += bus_fare * (bus_count // 2)\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Cost for pairs of buses\n                if bus_count % 2 != 0:\n                    total_cost += bus_cost  # Cost for the remaining single bus\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:  # Handle any remaining buses at the end of the journey\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 != 0:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += 0  # Just skip the next bus cost\n                i += 1\n            i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n            \n    # Handle remaining buses at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # bus\n            # Check for adjacent buses\n            bus_count = 1\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                bus_count += 1\n                i += 1\n            # Count the fare capped for sets of two adjacent buses\n            total_cost += (bus_count // 2) * bus_fare\n            if bus_count % 2 == 1:\n                total_cost += bus_fare\n            i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # It's a bus\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 1:  # Handle adjacent buses\n                total_cost += bus_cost * (bus_count // 2)  # Count pairs of buses\n            elif bus_count == 1:\n                total_cost += bus_cost  # Single bus fare\n            total_cost += tube_cost  # Add tube fare\n            bus_count = 0  # Reset bus count for next segment\n\n    if bus_count > 1:  # Final check for adjacent buses at the end\n        total_cost += bus_cost * (bus_count // 2)\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after capping\n            elif bus_count == 1:  # Only count the first bus in a pair\n                total_cost += 1.50\n\n    return \"\u00a3\" + f\"{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        else:  # It's a bus number\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # If next is not a bus\n                total_cost += 1.50  # Count this bus fare\n                bus_count = 0  # Reset bus count for next iteration\n    \n    # Account for pairs of adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # Only count pairs\n    if bus_count % 2 == 1:\n        total_cost += 1.50  # Add one more fare if there's an unpaired bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Cap for two adjacent buses\n                total_cost += bus_cost\n                bus_count = 0  # Reset bus count after counting a pair\n            elif bus_count == 1:  # Count first bus\n                total_cost += bus_cost\n\n    if bus_count == 1:  # If there's an unpaired bus at the end\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # Last bus or next is not a bus\n                total_cost += 1.50  # count this bus fare\n                bus_count = 0  # reset bus count\n            elif bus_count % 2 == 0:  # Even count, cap fare\n                total_cost += 1.50  # count this bus fare for the pair\n                bus_count = 0  # reset bus count\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                if bus_count == 2:  # Count as one fare\n                    total_cost += 1.50\n                    bus_count = 0  # Reset bus count for the next pair\n            elif bus_count == 1:  # If it's a single bus journey\n                total_cost += 1.50\n            \n    # If there is an odd bus at the end that wasn't part of a pair\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap at 2 adjacent bus fares\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting a pair\n            elif bus_count == 1:  # First bus in a pair\n                total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            total_cost += 2.40\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * 1.50  # Count sets of two\n                total_cost += (bus_count % 2) * 1.50  # Any leftover bus\n            else:\n                total_cost += bus_count * 1.50  # Single bus fare\n            bus_count = 0  # Reset bus count after tube\n        \n    # If the journey ends with bus rides, we need to account for that as well\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50  # Count sets of two\n        total_cost += (bus_count % 2) * 1.50  # Any leftover bus\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "3": [
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count sets of two buses\n                if bus_count % 2 == 1:\n                    total_cost += 1.50  # Add one more bus fare if there's an odd bus\n                bus_count = 0\n            total_cost += 2.40  # Tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                i += 2  # Skip the next bus as it's part of a pair\n            else:\n                total_cost += bus_fare\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1  # Skip to the end of the adjacent bus journeys\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:  # Apply bus cap for sets of two adjacent buses\n                total_cost += (bus_count // 2) * bus_cost\n            elif bus_count == 1:  # Single bus case\n                total_cost += bus_cost\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count after a tube journey\n\n    # Handle any remaining bus journeys at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_cost\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n                if bus_count % 2 == 1:\n                    total_cost += 1.50  # Add fare for an odd bus out\n                bus_count = 0\n            total_cost += 2.40  # Tube fare\n    \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for pairs of buses\n                if bus_count % 2 == 1:  # Charge for an odd bus if any\n                    total_cost += 1.50\n                bus_count = 0\n            total_cost += 2.40  # Charge for tube ride\n\n    # If there are remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                # Skip the next bus as it's part of the same fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_streak = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_streak += 1\n        else:  # Tube name\n            if bus_streak > 0:\n                total_cost += (bus_streak // 2) * bus_cost\n                if bus_streak % 2 == 1:\n                    total_cost += bus_cost\n                bus_streak = 0\n            total_cost += tube_cost\n\n    if bus_streak > 0:\n        total_cost += (bus_streak // 2) * bus_cost\n        if bus_streak % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n        else:  # It's a bus number\n            total_cost += bus_cost\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1  # Skip the next adjacent bus\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            \n            # Check for adjacent buses\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):\n                total_cost += 1.50\n                bus_count = 0  # Reset after adding cost for the bus\n            \n            # If there are two adjacent buses, add one fare\n            if bus_count == 2:\n                total_cost -= 1.50  # Remove one bus fare for the capped cost\n                bus_count = 0  # Reset for the next set\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_cost * ((bus_count + 1) // 2)  # Cap the bus fare\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:\n        total_cost += bus_cost * ((bus_count + 1) // 2)  # Final cap for trailing buses\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost\n                i += 2  # Skip the next bus\n            else:\n                total_cost += bus_cost\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare  # Count this bus\n                # Skip the next bus in case it's adjacent\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare  # Count single bus\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0\n    bus_streak = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_streak += 1\n        else:  # Tube name\n            if bus_streak > 1:\n                total_cost += (bus_streak // 2) * bus_cost\n            elif bus_streak == 1:\n                total_cost += bus_cost\n            bus_streak = 0\n            total_cost += tube_cost\n            \n    if bus_streak > 1:\n        total_cost += (bus_streak // 2) * bus_cost\n    elif bus_streak == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n            if bus_count % 2 == 1:  # For every first bus in a pair\n                total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check if it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Check if it's a bus journey\n            bus_count += 1\n            \n            # Check if the next journey is also a bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                continue  # If next journey is bus, we skip adding the cost yet\n            else:\n                # If the current bus is the last in a set of adjacent buses\n                total_cost += 1.50  # Count the cost for the set of buses\n                bus_count = 0  # Reset bus count for the next set\n    \n    # Add cost for any remaining buses in case they were the last in the list\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50  # Cost for sets of two buses\n        total_cost += (bus_count % 2) * 1.50  # Cost for any remaining bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost\n                i += 2  # Skip the next bus\n            else:\n                total_cost += bus_cost\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            # Calculate the cost for the previous buses\n            total_cost += (bus_count // 2) * bus_fare  # Charge for pairs of buses\n            total_cost += (bus_count % 2) * bus_fare  # Charge for the leftover bus if exists\n            bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add tube fare\n\n    # Final check for buses at the end of the journey\n    total_cost += (bus_count // 2) * bus_fare\n    total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "4": [
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost\n                # Skip the next adjacent bus\n                i += 1\n            else:\n                total_cost += bus_cost\n        \n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                # Skip the next bus as it's part of a pair\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent bus journeys\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Cap the bus fare for every two buses\n            total_cost += (bus_count // 2) * bus_cost + (bus_count % 2) * bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count after a tube journey\n\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # count pairs of buses\n                if bus_count % 2 == 1:  # if there's an unpaired bus\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    # After the loop, we need to account for any remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            total_cost += tube_fare\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0  # Reset bus count after processing\n        \n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:\n                total_cost += bus_fare  # Add capped fare for adjacent buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # Add single bus fare\n            bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    if bus_count > 1:\n        total_cost += bus_fare  # Add capped fare for last set of adjacent buses\n    elif bus_count == 1:\n        total_cost += bus_fare  # Add last single bus fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube name\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n\n            # If we have two adjacent buses, cap the fare\n            if bus_count % 2 == 0:\n                total_cost += 0  # Do not add cost for this bus, already counted\n            else:\n                total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += bus_fare  # Add fare for each set of adjacent buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # Add fare for the single bus\n            bus_count = 0  # Reset bus count after encountering a tube\n            \n            total_cost += tube_fare  # Add tube fare\n\n    # If the journey ends with bus(es), we need to account for that\n    if bus_count > 1:\n        total_cost += bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n        else:  # It's a bus number\n            total_cost += bus_fare\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Count pairs of buses\n                total_cost += (bus_count % 2) * bus_cost  # Add the fare for any remaining bus\n                bus_count = 0\n            total_cost += tube_cost  # Add tube fare\n    \n    # If there's any remaining bus count after the last tube\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        total_cost += (bus_count % 2) * bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus\n            # Check for adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost\n                # Skip the next adjacent bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare  # charge for the set of adjacent buses\n                bus_count = 0  # reset the bus count\n            total_cost += tube_fare  # charge for tube\n\n    # If there were trailing buses, charge for them\n    if bus_count > 0:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus number\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                i += 1  # Skip the next bus as it is part of a pair\n            else:\n                total_cost += bus_fare\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # check for adjacent bus\n                total_cost += bus_cost\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):  # skip the next bus\n                    i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus journey\n            bus_count += 1\n        else:  # tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # count pairs\n                total_cost += (bus_count % 2) * 1.50  # count remaining\n                bus_count = 0\n            total_cost += 2.40  # tube journey cost\n\n    # Check for any remaining buses at the end\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # bus\n            bus_count += 1\n            if bus_count % 2 == 0:  # every two buses\n                total_cost += 1.50  # charge once for the set\n                bus_count = 0  # reset bus count\n        else:\n            continue  # just in case of unexpected types\n\n    # Handle any remaining uncharged bus counts\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count on tube journey\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting two buses\n        else:\n            raise ValueError(\"Invalid item in journey\")\n\n    if bus_count == 1:  # If there's one bus left unpaired\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count since we're not in a bus sequence\n        elif isinstance(journey[i], int):  # Check if it's a bus\n            bus_count += 1\n            if bus_count == 2:  # If we've seen 2 buses, charge for one\n                total_cost += 1.50\n                bus_count = 0  # Reset for next possible bus pair\n\n    # If there's an odd bus at the end, we add the fare for it\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n\n            # Calculate cost every two buses\n            if bus_count % 2 == 0:\n                total_cost += 1.50  # Only add cost for a pair\n                bus_count = 0  # Reset the count after pairing\n\n    # If there's an odd bus left, we add its cost\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two buses are counted as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after charging\n\n    if bus_count == 1:  # If there's an unpaired bus journey at the end\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(journey[i], int):  # If it's a bus\n            bus_count += 1\n            \n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # If it's the end or next is a tube\n                total_cost += 1.50  # Count this bus\n                bus_count = 0  # Reset bus count after calculating\n                \n    # Adding cost for capped bus journeys\n    total_cost += (bus_count // 2) * 1.50  # Count sets of two buses\n    if bus_count % 2 == 1:  # If there's one bus left after pairs\n        total_cost += 1.50  # Count this single bus\n                \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check for tube names\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count after a tube\n        elif isinstance(journey[i], int):  # Check for bus numbers\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of bus sequence\n                total_cost += (bus_count // 2) * 1.50  # Cost for complete pairs\n                if bus_count % 2 == 1:  # If there's an odd one out\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting two buses\n        if bus_count == 1 and i == len(journey) - 1:  # If one bus at the end\n            total_cost += 1.50\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            if bus_count > 0:  # Reset bus count after tube\n                total_cost += 1.50 * (bus_count // 2)\n                bus_count = 0\n        elif isinstance(journey[i], int):  # It's a bus\n            bus_count += 1\n            \n    # Handle any trailing bus journeys\n    if bus_count > 0:\n        total_cost += 1.50 * (bus_count // 2)\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Two adjacent buses\n                total_cost += 1.50  # Cap the cost for this pair\n                bus_count = 0  # Reset bus count for pairs\n            elif bus_count == 1:  # First bus in a potential pair\n                continue  # Wait for the second one\n\n    # Handle any remaining single bus\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus counter\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # cap for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus counter for the next pair\n        else:\n            raise ValueError(\"Invalid journey item\")\n    \n    # Handle any remaining single bus if they exist\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of a new group\n                continue  # Do not add cost yet\n    \n    # If there's a single bus left at the end of the journey\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # We cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of a pair\n                continue  # Wait for the second bus to cap\n            \n    # If there's an unpaired bus at the end, we add its fare\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset count after capping\n            elif bus_count == 1:  # First bus in a pair\n                continue  # Don't add cost yet\n\n    if bus_count == 1:  # If there is a single bus at the end\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count sets of two buses\n                if bus_count % 2 == 1:  # If there's an odd bus\n                    total_cost += 1.50\n                bus_count = 0\n            total_cost += 2.40  # Tube cost\n    \n    # Check if there are remaining buses after loop\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count for tube\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of bus sequence\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n                if bus_count % 2 == 1:  # If there's an unpaired bus\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count after calculating cost\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting a pair\n        else:\n            raise ValueError(\"Invalid item in journey\")\n    \n    # If there is an odd bus at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge for capped buses\n                bus_count = 0  # Reset bus count after processing\n        elif isinstance(journey[i], int):  # It's a bus number\n            bus_count += 1\n    \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare  # Charge for remaining capped buses\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            total_cost += 2.40\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n                if bus_count % 2 == 1:  # If there's an unpaired bus\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting\n            \n    # After loop, check if there are remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        if bus_count % 2 == 1:\n            total_cost += 1.50\n            \n    return f'\u00a3{total_cost:.2f}'\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus number\n            bus_count += 1\n            \n            if bus_count == 2:  # Every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting a pair\n        else:\n            raise ValueError(\"Invalid journey item\")\n    \n    # If there's an unpaired bus at the end\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f'\u00a3{total_cost:.2f}'\n```"
        ],
        "1": [
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        elif isinstance(item, str):  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)  # cap the bus fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 0:\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            total_cost += bus_fare\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost -= bus_fare  # Remove cost of the second bus fare\n                i += 1  # Move to the next bus\n            i += 1  # Move to the next item\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Check if it's a bus\n            # Count adjacent buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Calculate fare for adjacent buses\n            total_cost += (bus_count // 2) * bus_cost  # Count pairs of buses\n            total_cost += (bus_count % 2) * bus_cost  # Add fare for any leftover bus\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)  # Count capped bus fares\n                bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 0:  # If there are buses left at the end\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for sets of two buses\n                total_cost += (bus_count % 2) * 1.50  # Charge for any remaining bus\n                bus_count = 0  # Reset bus count\n            total_cost += 2.40  # Add tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n                if bus_count % 2 != 0:\n                    total_cost += bus_fare  # Add fare for the remaining bus if odd\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare  # Count full pairs of buses\n        if bus_count % 2 != 0:\n            total_cost += bus_fare  # Add fare for the remaining bus if odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Charge capped fare for sets of two buses\n                total_cost += bus_fare * (bus_count % 2)  # Charge for remaining bus if odd\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Charge tube fare\n\n    # Finalize any remaining buses at the end of the journey\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += bus_fare * (bus_count % 2)\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += bus_fare * ((bus_count + 1) // 2)  # Capped bus fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    # Handle any remaining buses after the loop\n    if bus_count > 0:\n        total_cost += bus_fare * ((bus_count + 1) // 2)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            \n            # If the next is also a bus, we check for caps\n            if bus_count % 2 == 1:  # Odd bus count\n                total_cost += bus_fare\n            \n            # If we've capped a pair, do not add more until the next tube\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            count_buses = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count_buses += 1\n                i += 1\n            total_cost += (count_buses // 2) * bus_fare  # Count of pairs of buses\n            total_cost += (count_buses % 2) * bus_fare  # Add fare for any remaining bus\n            continue  # Skip to the next iteration\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_fare = 1.50\n    tube_fare = 2.40\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_fare * (bus_count // 2)  # Charge for sets of two adjacent buses\n                if bus_count % 2 == 1:  # If there's an odd bus out\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n\n    # If there are buses left after the loop\n    if bus_count > 0:\n        total_cost += bus_fare * (bus_count // 2)\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare  # Count pairs of buses\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare  # Add fare for the odd bus if any\n            elif bus_count == 1:\n                total_cost += bus_fare  # Add fare for the single bus\n            bus_count = 0  # Reset bus count for the next segment\n            total_cost += tube_fare  # Add tube fare\n    \n    # Handle any remaining buses after the last tube\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus number\n            total_cost += bus_fare\n            i += 1\n            # Check for adjacent buses\n            while i < len(journey) and isinstance(journey[i], int):\n                i += 1\n            # Each set of two adjacent buses counts as one bus fare\n            total_cost += (i - (i - (total_cost // bus_fare))) * (bus_fare - 1.50)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # count sets of two buses\n                if bus_count % 2 != 0:  # if there's an odd bus out\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:  # final count of buses\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 != 0:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += bus_fare * (bus_count // 2)  # Add fare for sets of two adjacent buses\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare  # Add fare for an extra bus if count is odd\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add tube fare\n    \n    # Check for any remaining buses after the last tube\n    if bus_count > 0:\n        total_cost += bus_fare * (bus_count // 2)\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, int):  # Bus number\n            bus_count += 1\n        elif isinstance(transport, str):  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n                total_cost += (bus_count % 2) * 1.50  # Add remaining single bus if any\n                bus_count = 0\n            total_cost += 2.40  # Add tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus journey\n            # Check for adjacent buses\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Next is also a bus\n                total_cost += bus_fare\n                i += 1  # Skip the next bus, count as a pair\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # it's a tube journey\n            total_cost += 2.40\n        elif isinstance(item, int):  # it's a bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # every two adjacent buses\n                total_cost += 1.50  # only add the cost for one bus\n            elif bus_count == 1:  # first bus in the sequence\n                total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Check if it's a bus\n            # Check for adjacent bus journeys\n            total_cost += bus_cost\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Next is also a bus\n                # Skip the next bus to apply the cap\n                total_cost -= bus_cost\n                i += 1  # Skip the next bus cost\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare  # count pairs of adjacent buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # count single bus fare\n            total_cost += tube_fare  # add tube fare\n            bus_count = 0  # reset bus count for the next part of the journey\n\n    # If the journey ends with buses, we need to account for those as well\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            total_cost += bus_cost\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost\n                i += 2  # Skip next bus\n            else:\n                i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += tube_cost\n            if bus_count % 2 == 1:  # If we ended on a bus, account for that last bus\n                total_cost += bus_cost\n            bus_count = 0  # Reset bus count for next segment\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n\n    # Handle any remaining buses at the end\n    if bus_count % 2 == 1:\n        total_cost += bus_cost\n\n    # Account for pairs of buses\n    total_cost += (bus_count // 2) * bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            # Calculate the cost for the buses counted so far\n            total_cost += (bus_count // 2) * bus_fare\n            if bus_count % 2 == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    # Calculate the cost for any remaining buses after the loop\n    total_cost += (bus_count // 2) * bus_fare\n    if bus_count % 2 == 1:\n        total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Charging for adjacent buses\n                if bus_count % 2 == 1:  # If there's an unpaired bus\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost  # Add tube cost\n\n    # Final check for any remaining bus journeys\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost\n                if bus_count % 2 != 0:\n                    total_cost += bus_cost\n                bus_count = 0\n            total_cost += tube_cost\n\n    # Final adjustment for any remaining buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 != 0:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "2": [
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n            i += 1\n        else:  # If it's a bus number\n            total_cost += bus_cost\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                i += 2  # Skip the next bus\n            else:\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for transport in journey:\n        if isinstance(transport, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus journey\n            total_cost += bus_cost\n            # Check for adjacent bus journeys\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost -= bus_cost  # Remove the additional cost for adjacent bus\n                i += 1\n            i += 1\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Check if it's a tube\n            total_cost += tube_fare\n            i += 1\n        else:  # It's a bus number\n            # Count adjacent bus numbers\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            # Calculate capped bus fares\n            total_cost += (count // 2) * bus_fare  # Each pair counts as one fare\n            total_cost += (count % 2) * bus_fare  # Add fare for odd one out if exists\n            \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus number\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare  # Count this bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Skip adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Charge for sets of two adjacent buses\n                total_cost += (bus_count % 2) * 1.50  # Charge for any remaining single bus\n                bus_count = 0\n            total_cost += 2.40  # Tube journey cost\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 1:\n                total_cost += bus_fare * (bus_count // 2)\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n    \n    if bus_count > 1:\n        total_cost += bus_fare * (bus_count // 2)\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus\n            bus_count += 1\n        else:  # It's a tube\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Cost for pairs of buses\n                if bus_count % 2 != 0:\n                    total_cost += bus_cost  # Cost for the remaining single bus\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:  # Handle any remaining buses at the end of the journey\n        total_cost += (bus_count // 2) * bus_cost\n        if bus_count % 2 != 0:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            total_cost += bus_cost\n            # Check for adjacent buses\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n            total_cost += bus_cost * (1 if (i > 0 and isinstance(journey[i - 1], int)) else 0)\n            i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_fare  # Cap the cost for previous buses\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += bus_fare  # Cap the cost for any remaining buses\n\n    sets_of_buses = bus_count // 2\n    total_cost += sets_of_buses * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus counter\n        else:  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping after two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus counter after capping\n            elif bus_count == 1:  # First bus in the series\n                total_cost += 1.50\n                \n    total_cost = round(total_cost, 2)\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            bus_count = 0\n            total_cost += tube_fare\n            \n    # Handle remaining buses at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_cost * ((bus_count + 1) // 2)  # Charge for sets of adjacent buses\n                bus_count = 0\n            total_cost += tube_cost\n    \n    if bus_count > 0:\n        total_cost += bus_cost * ((bus_count + 1) // 2)\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        else:  # It's a bus number\n            bus_count += 1\n            \n            # Check for bus fare cap\n            if bus_count % 2 == 1:\n                total_cost += 1.50  # Add bus fare for every first bus in a pair\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count if tube is encountered\n        elif isinstance(journey[i], int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # If we have two adjacent buses\n                total_cost += 1.50  # Cap the fare for the two buses\n                bus_count = 0  # Reset count for the next potential pair\n            elif bus_count == 1:  # If it's the first bus, we do not charge yet\n                total_cost += 1.50  # Charge for the first bus\n    \n    # Adjust for any leftover bus count at the end of the journey\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus number\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent buses\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip next adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Apply cap for adjacent bus journeys\n            total_cost += (bus_count // 2) * bus_cost + (bus_count % 2) * bus_cost\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.50  # Count pairs of buses\n                total_cost += (bus_count % 2) * 1.50  # Add any leftover bus\n                bus_count = 0  # Reset bus count\n            total_cost += 2.40  # Add tube cost\n            \n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n        \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Add fare for pairs of buses\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare  # Add fare for the remaining bus if odd\n                bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare  # Add fare for pairs of buses\n        if bus_count % 2 == 1:\n            total_cost += bus_fare  # Add fare for the remaining bus if odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of bus sequence\n                total_cost += 1.50 * (bus_count // 2)  # Charge for pairs of buses\n                if bus_count % 2 == 1:  # If there's an odd bus at the end\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):  # Count adjacent buses\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_fare  # Capped fare for pairs of buses\n            if count % 2 == 1:  # If there's an odd bus\n                total_cost += bus_fare\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            # Count the number of adjacent buses\n            count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                count += 1\n                i += 1\n            total_cost += (count // 2) * bus_fare  # Charge for pairs of buses\n            total_cost += (count % 2) * bus_fare  # Charge for any remaining bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    adjacent_bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # it's a bus number\n            adjacent_bus_count += 1\n        else:  # it's a tube name\n            if adjacent_bus_count > 0:\n                total_cost += (adjacent_bus_count // 2) * bus_fare\n                if adjacent_bus_count % 2 == 1:\n                    total_cost += bus_fare\n                adjacent_bus_count = 0\n            total_cost += tube_fare\n\n    if adjacent_bus_count > 0:\n        total_cost += (adjacent_bus_count // 2) * bus_fare\n        if adjacent_bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_fare = 1.50\n    tube_fare = 2.40\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare  # Count this bus fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "3": [
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_fare\n                i += 2  # Skip the next bus as it's part of a pair\n            else:\n                total_cost += bus_fare\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        else:  # Bus journey\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Next is also a bus\n                total_cost += bus_fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:  # Apply bus cap for sets of two adjacent buses\n                total_cost += (bus_count // 2) * bus_cost\n            elif bus_count == 1:  # Single bus case\n                total_cost += bus_cost\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count after a tube journey\n\n    # Handle any remaining bus journeys at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_cost\n    elif bus_count == 1:\n        total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey):\n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # Bus number\n            bus_count += 1\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):  # End of adjacent bus sequence\n                total_cost += (bus_count // 2) * 1.50 + (bus_count % 2) * 1.50\n                bus_count = 0\n        else:  # Tube name\n            total_cost += 2.40\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # If it's a bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare\n                # Skip the next bus as it's part of the same fare\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_streak = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_streak += 1\n        else:  # Tube name\n            if bus_streak > 0:\n                total_cost += (bus_streak // 2) * bus_cost\n                if bus_streak % 2 == 1:\n                    total_cost += bus_cost\n                bus_streak = 0\n            total_cost += tube_cost\n\n    if bus_streak > 0:\n        total_cost += (bus_streak // 2) * bus_cost\n        if bus_streak % 2 == 1:\n            total_cost += bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n        else:  # It's a bus number\n            total_cost += bus_cost\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1  # Skip the next adjacent bus\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            \n            # Check for adjacent buses\n            if i == len(journey) - 1 or not isinstance(journey[i + 1], int):\n                total_cost += 1.50\n                bus_count = 0  # Reset after adding cost for the bus\n            \n            # If there are two adjacent buses, add one fare\n            if bus_count == 2:\n                total_cost -= 1.50  # Remove one bus fare if it's a pair\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += bus_cost * ((bus_count + 1) // 2)  # Cap the bus fare\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:\n        total_cost += bus_cost * ((bus_count + 1) // 2)  # Final cap for trailing buses\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # It's a bus\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Check for adjacent bus\n                total_cost += bus_cost\n                i += 2  # Skip the next bus\n            else:\n                total_cost += bus_cost\n                i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # Bus journey\n            # Check for adjacent buses\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                total_cost += bus_fare  # Count this bus\n                # Skip the next bus in the count\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_fare  # Count this single bus\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # Bus journey\n            bus_count += 1\n        else:  # Tube journey\n            if bus_count > 0:  # Calculate bus fare for adjacent buses\n                total_cost += (bus_count // 2) * 1.50  # charge for sets of two\n                total_cost += (bus_count % 2) * 1.50  # charge for any remaining bus\n                bus_count = 0  # Reset bus count\n            \n            total_cost += 2.40  # Add tube fare\n\n    # Calculate any remaining bus journeys at the end of the list\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.50\n        total_cost += (bus_count % 2) * 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0\n    bus_streak = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # it's a bus number\n            bus_streak += 1\n        else:  # it's a tube name\n            if bus_streak > 1:\n                total_cost += bus_cost  # add one fare for the streak\n            elif bus_streak == 1:\n                total_cost += bus_cost  # add fare for one bus\n            bus_streak = 0  # reset bus streak\n            total_cost += tube_cost  # add fare for the tube\n            \n    # Check if there's a bus streak at the end\n    if bus_streak > 1:\n        total_cost += bus_cost  # add one fare for the streak\n    elif bus_streak == 1:\n        total_cost += bus_cost  # add fare for one bus\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n            if bus_count % 2 == 1:  # For every first bus in a pair\n                total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Check if it's a tube journey\n            total_cost += 2.40\n        elif isinstance(journey[i], int):  # Check if it's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # Last bus or followed by tube\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count\n            elif bus_count == 2:  # Cap for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting the set\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n    \n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus\n            # Check for adjacent bus journeys\n            if i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Next is also a bus\n                total_cost += bus_cost  # Count this bus\n                while i < len(journey) - 1 and isinstance(journey[i + 1], int):  # Skip adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n        else:  # If it's a tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare  # Apply cap for adjacent buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # Single bus fare\n            total_cost += tube_fare  # Add tube fare\n            bus_count = 0  # Reset bus count\n\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += tube_cost\n            i += 1\n        elif isinstance(journey[i], int):  # If it's a bus\n            # Check for adjacent buses\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Apply the bus fare cap\n            total_cost += (bus_count // 2) * bus_cost + (bus_count % 2) * bus_cost\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_cost  # Count pairs of buses\n                total_cost += (bus_count % 2) * bus_cost  # Add remaining bus if odd\n                bus_count = 0\n            total_cost += tube_cost\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_cost\n        total_cost += (bus_count % 2) * bus_cost\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # If it's a bus\n            bus_count += 1\n            \n            if bus_count % 2 == 1:  # Only charge for the first of each pair\n                total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ],
        "4": [
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], int):  # Bus number\n            # Count the number of adjacent bus journeys\n            bus_count = 0\n            while i < len(journey) and isinstance(journey[i], int):\n                bus_count += 1\n                i += 1\n            # Calculate the cost for adjacent bus journeys\n            total_cost += (bus_count // 2) * bus_fare  # Capped fare for pairs\n            if bus_count % 2 != 0:  # If there's an odd bus out, add one more fare\n                total_cost += bus_fare\n        else:  # Tube name\n            total_cost += tube_fare\n            i += 1\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # Apply bus cap\n                total_cost += (bus_count % 2) * bus_fare  # Add remaining bus fare\n                bus_count = 0  # Reset bus count\n            total_cost += tube_fare  # Add tube fare\n    \n    # Handle the case if the journey ends with buses\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count after processing tubes\n\n    # If there are any buses left to process at the end\n    if bus_count > 1:\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            if bus_count % 2 == 0:  # For every pair of adjacent buses, count as one fare\n                total_cost += 0\n            else:\n                total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # It's a bus number\n            bus_count += 1\n        else:  # It's a tube name\n            if bus_count > 1:\n                total_cost += bus_fare  # Add capped fare for adjacent buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # Add single bus fare\n            bus_count = 0\n            total_cost += tube_fare  # Add tube fare\n\n    if bus_count > 1:\n        total_cost += bus_fare  # Add capped fare for last adjacent buses\n    elif bus_count == 1:\n        total_cost += bus_fare  # Add single bus fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # If it's a tube name\n            total_cost += tube_cost\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # If it's a bus number\n            bus_count += 1\n\n            # If we have two adjacent buses, cap the fare\n            if bus_count % 2 == 0:\n                total_cost += 0  # Do not add cost for this pair\n            else:\n                total_cost += bus_cost\n\n        # Reset bus count if a tube name is encountered\n        if bus_count > 0 and (isinstance(item, str) or item == journey[-1]):\n            bus_count = 0\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, int):  # it's a bus number\n            bus_count += 1\n        else:  # it's a tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # charge for pairs of buses\n                total_cost += (bus_count % 2) * bus_fare  # charge for any single bus left\n                bus_count = 0\n            total_cost += tube_fare  # charge for tube\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        total_cost += (bus_count % 2) * bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 1:\n                total_cost += bus_fare  # Add fare for each set of adjacent buses\n            elif bus_count == 1:\n                total_cost += bus_fare  # Add fare for the single bus\n            bus_count = 0  # Reset bus count after encountering a tube\n            \n            total_cost += tube_fare  # Add tube fare\n\n    # If the journey ends with bus(es), we need to account for that\n    if bus_count > 1:\n        total_cost += bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_fare = 2.40\n    bus_fare = 1.50\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare\n                if bus_count % 2 == 1:\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += tube_fare\n        elif isinstance(journey[i], int):  # It's a bus\n            # Check for adjacent buses\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Next is also a bus\n                total_cost += bus_fare  # Add fare for the first bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):  # Skip adjacent buses\n                    i += 1\n            else:\n                total_cost += bus_fare\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += tube_fare\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            \n            if bus_count == 1:\n                total_cost += bus_fare  # Count first bus in a possible pair\n            elif bus_count == 2:\n                total_cost += 0  # Second bus in pair doesn't add to cost\n            elif bus_count > 2:\n                bus_count = 1  # Reset to count for next pair\n                \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    tube_cost = 2.40\n    bus_cost = 1.50\n    total_cost = 0\n    i = 0\n\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # Bus\n            # Check for adjacent bus journeys\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                total_cost += bus_cost\n                # Skip the next adjacent bus\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                    i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare  # charge for the set of adjacent buses\n                bus_count = 0  # reset the bus count\n            total_cost += tube_fare  # charge for tube\n\n    # If there were trailing buses, charge for them\n    if bus_count > 0:\n        total_cost += bus_fare\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_cost = 1.50\n    tube_cost = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # tube\n            total_cost += tube_cost\n        elif isinstance(journey[i], int):  # bus\n            if i + 1 < len(journey) and isinstance(journey[i + 1], int):  # check for adjacent bus\n                total_cost += bus_cost\n                while i + 1 < len(journey) and isinstance(journey[i + 1], int):  # skip the next bus\n                    i += 1\n            else:\n                total_cost += bus_cost\n        i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus\n            bus_count += 1\n            if i + 1 >= len(journey) or not isinstance(journey[i + 1], int):  # Next is not a bus or end of list\n                total_cost += 1.50 * ((bus_count + 1) // 2)  # Count pairs of buses\n                bus_count = 0  # Reset bus count after processing\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += bus_fare * (bus_count // 2)  # charge for pairs\n                if bus_count % 2 == 1:  # charge for the leftover bus\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n            \n    if bus_count > 0:\n        total_cost += bus_fare * (bus_count // 2)\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```"
        ]
    }
}