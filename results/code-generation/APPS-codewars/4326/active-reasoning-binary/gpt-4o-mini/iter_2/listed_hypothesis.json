{
    "0": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # bus\n            bus_count += 1\n            if bus_count % 2 == 0:  # every two buses\n                total_cost += 1.50  # charge once for the set\n            else:\n                if bus_count == 1:  # charge for the first bus\n                    total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus number\n            bus_count += 1\n            if bus_count == 2:  # Every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting two buses\n        else:\n            raise ValueError(\"Invalid item in journey\")\n\n    if bus_count == 1:  # If there's one bus left unpaired\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n    \n    # Count the number of sets of two adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # Each pair counts as one fare\n    total_cost += (bus_count % 2) * 1.50  # Add fare for any remaining single bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # If there are 2 adjacent buses\n                total_cost += 1.50  # Count them as one fare\n                bus_count = 0  # Reset bus count after counting a pair\n            elif bus_count == 1:  # If it's the first bus in the pair\n                continue  # Wait to see if there's another adjacent bus\n\n    # If there's an unpaired bus journey at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Every two buses are counted as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after charging for 2 buses\n            elif bus_count == 1:  # Charge for the first bus\n                total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus counter\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # cap for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus counter for the next pair\n        else:\n            raise ValueError(\"Invalid journey item\")\n    \n    if bus_count == 1:  # if there's an unpaired bus at the end\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of a new group\n                continue  # Do not add cost yet\n    \n    # If there's a single bus left at the end of the journey\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # Every two buses are capped as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting the pair\n            \n    # If there's an odd bus at the end, count its fare\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping for two adjacent buses\n                total_cost += 1.50  # Only add one bus fare for the pair\n                bus_count = 0  # Reset bus count after counting a pair\n            elif bus_count == 1:  # First bus journey in a potential pair\n                continue  # Wait to see if a second bus follows\n\n    # If there's an odd bus at the end, charge for it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            i += 1\n        elif isinstance(journey[i], int):  # it's a bus\n            total_cost += 1.50\n            i += 1\n            # Check for adjacent buses\n            while i < len(journey) and isinstance(journey[i], int):\n                i += 1\n            # Cap the bus fares for adjacent buses\n            total_cost -= (1.50 * (i - (i - 1) // 2))  # Apply cap for every two adjacent buses\n            total_cost += (1.50 * ((i - (i - 1) // 2) // 2))  # Add capped price for sets\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # tube journey\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # bus journey\n            bus_count += 1\n            if bus_count == 2:  # cap at two buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus count after capping\n\n    if bus_count == 1:  # add fare for an unpaired bus at the end\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus segment\n                total_cost += (bus_count // 2) * 1.50  # Count pairs\n                if bus_count % 2 == 1:  # If there's an unpaired bus\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n    \n    # Count the number of sets of two adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # Each pair counts as one fare\n    total_cost += (bus_count % 2) * 1.50  # Add fare for any remaining single bus\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count since it's a tube\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # If we have two adjacent buses\n                total_cost += 1.50  # Cap the fare for this pair\n                bus_count = 0  # Reset bus count for the capped buses\n            elif bus_count == 1:  # First bus in an adjacent sequence\n                total_cost += 0  # Do not add cost yet\n\n    # If there's an odd bus at the end, add its cost\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n    \n    # Count the number of sets of 2 adjacent buses\n    total_cost += (bus_count // 2) * 1.50  # Each pair of adjacent buses counts as 1 fare\n    total_cost += (bus_count % 2) * 1.50  # If there's an odd bus, add 1 fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus counter\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # cap for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus counter for the next pair\n        else:\n            raise ValueError(\"Invalid journey item\")\n    \n    if bus_count == 1:  # if there's an unpaired bus at the end\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # If it's the second adjacent bus\n                total_cost += 0  # Do not add cost, already counted in a pair\n            else:\n                total_cost += 1.50  # Add cost for the first bus in the pair\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus journey\n            bus_count += 1\n            if bus_count % 2 == 0:  # Every two buses are capped as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting the pair\n            \n    # If there's an odd bus at the end, count its fare\n    if bus_count == 1:\n        total_cost += 1.50\n        \n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus counter\n        elif isinstance(journey[i], int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting pair\n\n    # If there's an odd bus at the end, add its cost\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            i += 1\n        elif isinstance(journey[i], int):  # it's a bus\n            total_cost += 1.50\n            i += 1\n            # Check for adjacent buses\n            while i < len(journey) and isinstance(journey[i], int):\n                i += 1\n            # Cap the bus fares for adjacent buses\n            total_cost -= (1.50 * (i - (i - 1) // 2))  # Apply cap for every two adjacent buses\n            total_cost += (1.50 * ((i - (i - 1) // 2) // 2))  # Add cap cost for sets\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # bus\n            bus_count += 1\n            if bus_count % 2 == 0:  # every two buses\n                total_cost += 1.50  # charge once for the set of two\n            elif bus_count == 1:  # first bus in the set\n                total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus number\n            bus_count += 1\n            if bus_count == 2:  # Every two adjacent buses count as one fare\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting two buses\n    \n    # If there's an odd bus at the end, we count one more fare\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # If there are 2 adjacent buses\n                total_cost += 1.50  # Count them as one fare\n                bus_count = 0  # Reset bus count after counting a pair\n            elif bus_count == 1:  # If it's the first bus in the pair\n                continue  # Wait to see if there's another adjacent bus\n\n    # If there's an unpaired bus journey at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # We have two adjacent buses\n                total_cost += 1.50  # Add the cost for the set of two buses\n                bus_count = 0  # Reset bus count for next sets\n            elif bus_count == 1:  # First bus of a potential pair\n                continue  # Don't add anything yet\n            \n    if bus_count == 1:  # If there's an unpaired bus at the end\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus counter\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # cap for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus counter for the next pair\n        else:\n            raise ValueError(\"Invalid journey item\")\n    \n    # Handle any remaining single bus at the end\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare every 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n        else:  # Should not reach here for valid inputs\n            continue\n    \n    if bus_count == 1:  # If there's one unpaired bus journey\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count for tube journey\n        elif isinstance(item, int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset count after capping\n        else:\n            continue  # In case of unexpected type (defensive coding)\n    \n    # Add remaining buses if there's an odd one out\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0\n        else:\n            bus_count = 0  # Reset if something unexpected happens\n\n    if bus_count == 1:  # Count any single remaining bus journey\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            i += 1\n        elif isinstance(journey[i], int):  # it's a bus\n            total_cost += 1.50\n            i += 1\n            # Check for adjacent buses\n            while i < len(journey) and isinstance(journey[i], int):\n                i += 1\n            # Cap the bus fares\n            total_cost -= 1.50  # refund for the last bus, because we capped\n            total_cost += 1.50 * ((i - (i - (1 + len([j for j in journey[i-1::-1] if isinstance(j, int)])))) // 2)\n        else:\n            i += 1  # should never hit here\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_fare = 1.50\n    tube_fare = 2.40\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # it's a tube journey\n            if bus_count > 1:  # cap the bus fare for the previous count\n                total_cost += (bus_count // 2) * bus_fare\n            elif bus_count == 1:\n                total_cost += bus_fare\n            \n            total_cost += tube_fare\n            bus_count = 0  # reset bus counter\n        elif isinstance(journey[i], int):  # it's a bus journey\n            bus_count += 1\n            \n    if bus_count > 1:  # cap for the last segment if ending with buses\n        total_cost += (bus_count // 2) * bus_fare\n    elif bus_count == 1:\n        total_cost += bus_fare\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, int):  # Bus number\n            bus_count += 1\n        else:  # Tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * 1.5  # Cost for pairs of buses\n                if bus_count % 2 == 1:\n                    total_cost += 1.5  # Cost for the remaining bus\n                bus_count = 0\n            total_cost += 2.4  # Tube fare\n\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * 1.5\n        if bus_count % 2 == 1:\n            total_cost += 1.5\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for transport in journey:\n        if isinstance(transport, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(transport, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # Every 2 adjacent buses count as 1 fare\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after counting pair\n            elif bus_count == 1:  # First bus in a potential pair\n                continue  # Do not add cost yet\n\n    # If there's an unpaired bus at the end, add its fare\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # Last bus or next is a tube\n                total_cost += 1.50  # Add cost for the bus set\n                bus_count = 0  # Reset bus count\n\n    total_cost += (bus_count // 2) * 1.50  # Count capped fares if there are adjacent buses\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0\n    \n    # If there is an odd bus left after the loop\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus count\n        elif isinstance(item, int):  # bus\n            bus_count += 1\n            if bus_count % 2 == 0:  # every two buses\n                total_cost += 1.50  # charge once for the set of two\n            elif bus_count == 1:  # first bus in the set\n                total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # End of a bus segment\n                total_cost += (bus_count // 2) * 1.50  # Count pairs\n                if bus_count % 2 == 1:  # If there's an unpaired bus\n                    total_cost += 1.50\n                bus_count = 0  # Reset bus count\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for stop in journey:\n        if isinstance(stop, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(stop, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # If there are 2 adjacent buses\n                total_cost += 1.50  # Count them as one fare\n                bus_count = 0  # Reset bus count after counting the pair\n\n    # If there's an odd bus at the end, count it\n    if bus_count == 1:\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for item in journey:\n        if isinstance(item, str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(item, int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # We have two adjacent buses\n                total_cost += 1.50  # Add the cost for the set of two buses\n                bus_count = 0  # Reset bus count for next possible pair\n            elif bus_count == 1:  # Only one bus, no cost added yet\n                continue\n    \n    # If there was an odd bus at the end\n    if bus_count == 1:\n        total_cost += 1.50  # Add the cost for the single remaining bus\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # it's a tube\n            total_cost += 2.40\n            bus_count = 0  # reset bus counter\n        elif isinstance(item, int):  # it's a bus\n            bus_count += 1\n            if bus_count == 2:  # cap for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # reset bus counter for the next set\n        else:\n            raise ValueError(\"Invalid journey item\")\n    \n    if bus_count == 1:  # if there's an unpaired bus at the end\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset bus count after capping\n            elif bus_count == 1:  # First bus of a pair\n                continue  # Do not add cost yet\n                \n    if bus_count == 1:  # If there's a single bus left unpaired\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # It's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count for tube journey\n        elif isinstance(item, int):  # It's a bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap the fare for two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset count after capping\n        else:\n            continue  # In case of unexpected type (defensive coding)\n    \n    # Add remaining buses if there's an odd one out\n    if bus_count == 1:\n        total_cost += 1.50\n    \n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n    \n    for item in journey:\n        if isinstance(item, str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0\n        elif isinstance(item, int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Capping for 2 adjacent buses\n                total_cost += 1.50\n                bus_count = 0\n        else:\n            bus_count = 0  # Reset if something unexpected happens\n\n    if bus_count == 1:  # Count any single remaining bus journey\n        total_cost += 1.50\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # it's a tube\n            total_cost += 2.40\n            i += 1\n        elif isinstance(journey[i], int):  # it's a bus\n            total_cost += 1.50\n            i += 1\n            # Check for adjacent buses\n            while i < len(journey) and isinstance(journey[i], int):\n                i += 1\n            # Cap the bus fares for adjacent buses\n            total_cost -= (1.50 * (i - (i - 1) // 2))  # Apply cap for every two adjacent buses\n            total_cost += (1.50 * ((i - (i - 1) // 2) // 2))  # Add cap cost for sets\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0.0\n    bus_fare = 1.50\n    tube_fare = 2.40\n    bus_count = 0\n    \n    for i in range(len(journey)):\n        if isinstance(journey[i], int):  # bus number\n            bus_count += 1\n        else:  # tube name\n            if bus_count > 0:\n                total_cost += (bus_count // 2) * bus_fare  # charge for pairs of buses\n                if bus_count % 2 == 1:  # charge for remaining bus if odd\n                    total_cost += bus_fare\n                bus_count = 0\n            total_cost += tube_fare\n    \n    # If there are any buses left after the loop\n    if bus_count > 0:\n        total_cost += (bus_count // 2) * bus_fare\n        if bus_count % 2 == 1:\n            total_cost += bus_fare\n    \n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # It's a tube\n            total_cost += 2.40\n            bus_count = 0  # Reset bus counter\n        elif isinstance(journey[i], int):  # It's a bus\n            bus_count += 1\n            if bus_count == 2:  # We've counted two adjacent buses\n                total_cost += 1.50  # Count as one fare\n                bus_count = 0  # Reset bus counter for capped fare\n        if i == len(journey) - 1 and bus_count == 1:  # If last was a single bus\n            total_cost += 1.50  # Count the last bus fare if it's odd\n\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    bus_fare = 1.50\n    tube_fare = 2.40\n    total_cost = 0.0\n    i = 0\n    while i < len(journey):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += tube_fare\n            i += 1\n        elif isinstance(journey[i], int):  # Bus journey\n            total_cost += bus_fare\n            # Check for adjacent bus journeys\n            while i + 1 < len(journey) and isinstance(journey[i + 1], int):\n                i += 1\n            total_cost -= bus_fare  # Remove last added bus fare for the group\n            total_cost += bus_fare  # Add it back as one fare for the group\n            i += 1\n    return f\"\u00a3{total_cost:.2f}\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # If it's a tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # If it's a bus journey\n            bus_count += 1\n            if i == len(journey) - 1 or isinstance(journey[i + 1], str):  # Last bus or next is a tube\n                total_cost += 1.50  # Add cost for the bus set\n\n    total_cost += (bus_count // 2) * 1.50  # Add cost for pairs of adjacent buses\n    total_cost = round(total_cost, 2)  # Round to 2 decimal places\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef london_city_hacker(journey): \n    total_cost = 0\n    bus_count = 0\n\n    for i in range(len(journey)):\n        if isinstance(journey[i], str):  # Tube journey\n            total_cost += 2.40\n            bus_count = 0  # Reset bus count\n        elif isinstance(journey[i], int):  # Bus journey\n            bus_count += 1\n            if bus_count == 2:  # Cap every two adjacent buses\n                total_cost += 1.50\n                bus_count = 0  # Reset after counting pair\n            elif bus_count == 1:  # First bus of the pair\n                continue\n    \n    if bus_count == 1:  # If there's an unpaired bus at the end\n        total_cost += 1.50\n\n    return f'\u00a3{total_cost:.2f}'\n```",
            "logp": null
        }
    ]
}