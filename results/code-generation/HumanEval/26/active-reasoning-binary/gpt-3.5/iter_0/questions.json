{
    "0": [
        "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]",
        "assert remove_duplicates([1, 2, 3, 4, 1, 2, 3, 4]) == []",
        "assert remove_duplicates([1, 2, 3, 3, 4, 4, 5, 5]) == [1, 2]",
        "assert remove_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "assert remove_duplicates([10, 10, 11, 12, 13, 14, 15]) == [10, 11, 12, 13, 14, 15]",
        "assert remove_duplicates([1, 2, 3, 4, 1, 2, 3, 4, 5]) == [5]",
        "assert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4]) == []",
        "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    ],
    "1": [
        "assert remove_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 3, 5]",
        "assert remove_duplicates([-1, -2, -2, 0, 1, 2, 2, 3]) == [-1, 0, 1, 3]",
        "assert remove_duplicates([]) == []",
        "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "assert remove_duplicates([-1, -2, -2, -3, -4, -4, -5, -5, -5]) == [-1, -2, -3, -4, -5]",
        "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
        "assert remove_duplicates([1, 2, 2, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]"
    ],
    "2": [
        "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "assert remove_duplicates([-1, -2, -2, -3, -4, -4, -4, -5]) == [-1, -3, -5]",
        "assert remove_duplicates([1, 2, 3, 3, 4, 4, 5, 5, 5]) == [1, 2]",
        "assert remove_duplicates([]) == []",
        "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "assert remove_duplicates([1, 2, 3, 2, 4, 4, 5, 6, 5]) == [1, 3, 6]",
        "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]"
    ],
    "3": [
        "assert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "assert remove_duplicates([1]) == [1]",
        "assert remove_duplicates([5, 5, 5, 5, 5, 5]) == [5]",
        "assert remove_duplicates([-1, -1, 0, 0, 1, 1]) == [-1, 0, 1]\n# Explanation: All numbers occur more than once, so the result should be a list of unique numbers in the input order.",
        "assert remove_duplicates([]) == []",
        "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 3, 5]",
        "assert remove_duplicates([2, 2, 2, 2, 2]) == []"
    ]
}