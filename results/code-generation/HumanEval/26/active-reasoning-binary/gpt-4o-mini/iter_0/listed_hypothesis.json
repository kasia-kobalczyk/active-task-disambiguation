{
    "0": [
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    seen = set()\n    duplicates = set()\n    \n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return [number for number in numbers if number not in duplicates]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return list(dict.fromkeys(num for num in numbers if numbers.count(num) == 1))\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return list(dict.fromkeys(num for num in numbers if numbers.count(num) == 1))\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\n    return list(dict.fromkeys(num for num in numbers if numbers.count(num) == 1))\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    seen = set()\n    duplicates = set()\n    \n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return [number for number in numbers if number not in duplicates]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return list(dict.fromkeys(num for num in numbers if numbers.count(num) == 1))\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return list(dict.fromkeys(num for num in numbers if numbers.count(num) == 1))\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return list(dict.fromkeys(num for num in numbers if numbers.count(num) == 1))\n```",
            "logp": null
        },
        {
            "content": "```python\n    unique_numbers = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            unique_numbers.append(num)\n    return unique_numbers\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    seen = set()\n    duplicates = set()\n    \n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return [number for number in numbers if number not in duplicates]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    return [num for num in numbers if numbers.count(num) == 1]\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    return [num for num in numbers if count[num] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    return [num for num in numbers if count[num] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    \n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    return [num for num in numbers if count[num] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    return [num for num in numbers if count[num] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    \n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    return [num for num in numbers if count[num] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    return [number for number in numbers if count[number] == 1]\n```",
            "logp": null
        },
        {
            "content": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]\n```",
            "logp": null
        }
    ]
}