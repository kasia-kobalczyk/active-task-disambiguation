{
    "0": [
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_nums = [0, 1]\n        for i in range(2, n+1):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n        return fib_nums[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n+1):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_1 = 0\n        fib_2 = 1\n        for _ in range(3, n+1):\n            fib_n = fib_1 + fib_2\n            fib_1 = fib_2\n            fib_2 = fib_n\n        return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n\n    Parameters:\n    n (int): The position of the Fibonacci number to be returned.\n\n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        fib1 = 1\n        fib2 = 1\n        for i in range(3, n+1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-2):\n            a, b = b, a+b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_1 = 0\n        fib_2 = 1\n        for _ in range(2, n+1):\n            fib_n = fib_1 + fib_2\n            fib_1 = fib_2\n            fib_2 = fib_n\n        return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n\n    Arguments:\n    n -- the position of the Fibonacci number to be returned\n\n    Returns:\n    the n-th Fibonacci number\n\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_minus_1 = 1\n        fib_minus_2 = 0\n        for i in range(3, n+1):\n            fib_current = fib_minus_1 + fib_minus_2\n            fib_minus_2 = fib_minus_1\n            fib_minus_1 = fib_current\n        return fib_current",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for i in range(3, n+1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    Examples:\n    \n    0 -> 0\n    1 -> 1\n    2 -> 1\n    3 -> 2\n    4 -> 3\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n+1):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_n_minus_2 = 0\n        fib_n_minus_1 = 1\n        for _ in range(2, n+1):\n            fib_n = fib_n_minus_1 + fib_n_minus_2\n            fib_n_minus_2 = fib_n_minus_1\n            fib_n_minus_1 = fib_n\n        return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n < 0:\n        return \"Please enter a positive integer\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    \n    # Initialize the first two Fibonacci numbers\n    fib_nums = [0, 1]\n    \n    # Calculate the n-th Fibonacci number if n is greater than 1\n    if n > 1:\n        for i in range(2, n + 1):\n            fib_nums.append(fib_nums[i - 1] + fib_nums[i - 2])\n    \n    # Return the n-th Fibonacci number\n    return fib_nums[n] if n < len(fib_nums) else None",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    Examples:\n\n    0 -> 0\n    1 -> 1\n    2 -> 1\n    3 -> 2\n    4 -> 3\n    ...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    Examples:\n\n    0 -> 0\n    1 -> 1\n    2 -> 1\n    3 -> 2\n    4 -> 3\n    ...\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_minus_two = 0\n        fib_minus_one = 1\n        fib_current = 1\n        for i in range(2, n+1):\n            fib_current = fib_minus_one + fib_minus_two\n            fib_minus_two = fib_minus_one\n            fib_minus_one = fib_current\n        return fib_current",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    Examples:\n\n    0 -> 0\n    10 -> 55\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_2 = 0\n        fib_1 = 1\n        fib_n = 0\n        for i in range(2, n+1):\n            fib_n = fib_2 + fib_1\n            fib_2 = fib_1\n            fib_1 = fib_n\n        return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_1 = 0\n        fib_2 = 1\n        fib_n = 0\n        for i in range(2, n+1):\n            fib_n = fib_1 + fib_2\n            fib_1 = fib_2\n            fib_2 = fib_n\n        return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_n_minus_1 = 1\n        fib_n_minus_2 = 0\n        for _ in range(2, n+1):\n            fib_n = fib_n_minus_1 + fib_n_minus_2\n            fib_n_minus_2 = fib_n_minus_1\n            fib_n_minus_1 = fib_n\n        return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    Examples:\n\n    0 -> 0\n    10 -> 55\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return fib_list[n]",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_prev = 0\n        fib_curr = 1\n        for _ in range(2, n+1):\n            fib_next = fib_prev + fib_curr\n            fib_prev = fib_curr\n            fib_curr = fib_next\n        return fib_curr",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n\n    Examples:\n\n    0 -> 0\n    1 -> 1\n    2 -> 1\n    3 -> 2\n    4 -> 3\n    5 -> 5\n    \"\"\"\n\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for _ in range(n-1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    fib_0 = 0\n    fib_1 = 1\n    for _ in range(2, n+1):\n        fib_n = fib_0 + fib_1\n        fib_0 = fib_1\n        fib_1 = fib_n\n    return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 1:\n        return n\n    \n    fib_n_minus_2 = 0\n    fib_n_minus_1 = 1\n    \n    for _ in range(2, n + 1):\n        fib_n = fib_n_minus_2 + fib_n_minus_1\n        fib_n_minus_2 = fib_n_minus_1\n        fib_n_minus_1 = fib_n\n    \n    return fib_n",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n + 1):\n            fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])\n        return fib_sequence[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b",
            "logp": null
        },
        {
            "content": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq[n]",
            "logp": null
        },
        {
            "content": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for _ in range(2, n+1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2",
            "logp": null
        }
    ]
}