{
    "0": [
        "assert next_smallest([9, 5, 3, 7, 2]) == 3",
        "assert next_smallest([-1, -2, -3, -4, -5]) == -4",
        "assert next_smallest([3, 2, 2, 4, 5]) == 3",
        "assert next_smallest([]) == None",
        "assert next_smallest([5, 4, 3, 2, 1]) == 2",
        "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "assert next_smallest([1, 1, 1, 1, 1]) == None",
        "assert next_smallest([1, 'a', 2, 'b', 3]) == 2",
        "assert next_smallest([5]) == None"
    ],
    "1": [
        "assert next_smallest([1, 1, 1, 1, 2]) == 2",
        "assert next_smallest([1, 1, 1, 1, 1, 1]) == None",
        "assert next_smallest([]) == None",
        "assert next_smallest([3, 5]) == 5",
        "assert next_smallest([10, 2, 30, 4, 5]) == 4",
        "assert next_smallest([1, 2, 3, 4, 5]) == 2\n2.",
        "assert next_smallest([7, 3, 8, 2, 7, 9, 2]) == 3",
        "assert next_smallest([5, 4, 3, 2, 1]) == 2",
        "assert next_smallest([5]) == None"
    ],
    "2": [
        "assert next_smallest([1, 1, 1, 1]) == None",
        "assert next_smallest([1, 3, 2, 5, 4]) == 2",
        "assert next_smallest([5, 5, 5, 5, 6, 5]) == 6",
        "assert next_smallest([3, 1, 4, 2, 5]) == 2",
        "assert next_smallest([3, 3, 3, 3, 2]) == 2",
        "assert next_smallest([7, 7, 7, 7, 7, 8, 9]) == 8",
        "assert next_smallest([5, 4, 3, 2, 1]) == 2",
        "assert next_smallest([4, 4, 4, 4, 4, 4]) == None",
        "assert next_smallest([1, 2, 3, 4, 5]) == 2"
    ],
    "3": [
        "assert next_smallest([1]) == None",
        "assert next_smallest([]) == None",
        "assert next_smallest(['a', 'b', 'c', 'd', 'e']) == None",
        "assert next_smallest([5, 5, 5, 5, 5]) == None",
        "assert next_smallest([1, 2, 3, 4, 4]) == 2",
        "assert next_smallest([-1, -5, -2, -7, -3]) == -5",
        "assert next_smallest([5]) == None"
    ]
}