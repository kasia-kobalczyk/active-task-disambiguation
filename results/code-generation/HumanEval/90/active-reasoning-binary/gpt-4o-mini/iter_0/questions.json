{
    "0": [
        "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "assert next_smallest([1]) == None",
        "assert next_smallest([10]) == None",
        "assert next_smallest([10, 20, 30, 10]) == 20",
        "assert next_smallest([3, 1, 4, 1, 5]) == 3",
        "assert next_smallest([5, 5, 5]) == None",
        "assert next_smallest([3, 1, 2]) == 2",
        "assert next_smallest([5, 5, 5, 5]) == None"
    ],
    "1": [
        "assert next_smallest([-1, -2, -3, -4]) == -3",
        "assert next_smallest([1]) == None",
        "assert next_smallest([10, 10, 10]) == None",
        "assert next_smallest([10, 1, 2, 10]) == 2",
        "assert next_smallest([-1, -2, -3, 0]) == -2",
        "assert next_smallest([3]) == None",
        "assert next_smallest([5, 3, 1, 4, 2]) == 2",
        "assert next_smallest([5, 5, 5]) == None"
    ],
    "2": [
        "assert next_smallest([10]) == None",
        "assert next_smallest([1, 1, 1, 2, 2]) == 2",
        "assert next_smallest([-5, -10, -3, -1]) == -5",
        "assert next_smallest([3]) == None",
        "assert next_smallest([5, 3, 2, 2, 1]) == 2",
        "assert next_smallest([2, 2, 2, 2]) == None",
        "assert next_smallest([5, 5, 5, 5]) == None",
        "assert next_smallest([10, 20, 30, 40]) == 20"
    ],
    "3": [
        "assert next_smallest([0, 0, -1, -2]) == -1",
        "assert next_smallest([0, -1, -2, -3, 0]) == -2",
        "assert next_smallest([3, 1, 4, 2]) == 2",
        "assert next_smallest([7, 8, 7, 9, 10]) == 8",
        "assert next_smallest([1, 1, 2, 2, 3]) == 2",
        "assert next_smallest([5, 5, 5]) == None",
        "assert next_smallest([3, 1, 2, 1]) == 2",
        "assert next_smallest([5, 5, 5, 5]) == None"
    ]
}