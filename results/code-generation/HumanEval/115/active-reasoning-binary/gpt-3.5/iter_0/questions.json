{
    "0": [
        "assert max_fill([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1) == 0",
        "assert max_fill([[1, 0, 1], [0, 1, 0], [1, 1, 1]], 5) == 3",
        "assert max_fill([[1, 0, 1], [0, 1, 0], [1, 1, 1]], 2) == 4",
        "assert max_fill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 10) == 9",
        "assert max_fill([[0, 1, 0], [1, 0, 1], [0, 1, 0]], 3) == 4"
    ],
    "1": [
        "assert max_fill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 5) == 9",
        "assert max_fill([[1, 1, 1, 1, 1]], 5) == 1",
        "assert max_fill([[1, 1], [1, 1], [1, 1], [1, 1]], 2) == 4",
        "assert max_fill([[0, 1, 0], [1, 0, 1], [0, 1, 0]], 5) == 4",
        "assert max_fill([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 5) == 0",
        "assert max_fill([[1, 0, 1, 0], [0, 1, 0, 1]], 10) == 2",
        "assert max_fill([[1, 1, 1], [0, 0, 0], [1, 1, 1]], 5) == 3",
        "assert max_fill([[0, 0, 0], [1, 1, 1], [0, 0, 0]], 5) == 3"
    ],
    "2": [
        "assert max_fill([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 5) == 0",
        "assert max_fill([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == 12",
        "assert max_fill([[1, 1, 1], [1, 1, 1]], 1) == 9",
        "assert max_fill([[1, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1]], 3) == 8",
        "assert max_fill([[1, 1, 0, 0], [1, 0, 1, 0]], 4) == 3",
        "assert max_fill([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 10) == 0",
        "assert max_fill([[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], 2) == 0",
        "assert max_fill([[1, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1]], 5) == 4",
        "assert max_fill([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 1) == 3"
    ],
    "3": [
        "assert max_fill([[1, 0, 1], [1, 1, 0], [0, 1, 1]], 2) == 6",
        "assert max_fill([[1, 0, 1, 0, 1], [0, 1, 0, 1, 0]], 10) == 2",
        "assert max_fill([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 5) == 0",
        "assert max_fill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3) == 5",
        "assert max_fill([[1, 0], [0, 1]], 1) == 2"
    ]
}