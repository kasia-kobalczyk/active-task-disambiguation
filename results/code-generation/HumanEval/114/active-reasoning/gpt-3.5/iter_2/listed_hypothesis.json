{
    "0": [
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(current_sum + num, num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n\n    if len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')  # Initialize min_sum to infinity\n\n    for i in range(len(nums)):\n        current_sum = 0  # Initialize current_sum to 0\n\n        for j in range(i, len(nums)):\n            current_sum += nums[j]  # Add the current number to current_sum\n\n            if current_sum < min_sum:\n                min_sum = current_sum  # Update min_sum if current_sum is smaller\n\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize variables\n    min_sum = float('inf')  # Set min_sum to infinity initially\n    curr_sum = 0  # Initialize current sum to 0\n    \n    # Iterate through the array\n    for num in nums:\n        curr_sum += num  # Add current number to the current sum\n        \n        # Check if the current sum is smaller than the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum  # Update the minimum sum if necessary\n        \n        # Check if the current sum is negative\n        if curr_sum < 0:\n            curr_sum = 0  # Reset the current sum if it is negative\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    # initialize the minimum sum to be the maximum possible value\n    min_sum = float('inf')\n    \n    # iterate through the array\n    for i in range(len(nums)):\n        # keep track of the current sum\n        current_sum = 0\n        # iterate through the subarrays starting from index i\n        for j in range(i, len(nums)):\n            # add the current element to the current sum\n            current_sum += nums[j]\n            # update the minimum sum if necessary\n            min_sum = min(min_sum, current_sum)\n    \n    # return the minimum sum\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize the minimum sum to be infinity\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for i in range(len(nums)):\n        # Initialize the current sum to be 0\n        curr_sum = 0\n        # Iterate through the subarrays starting from index i\n        for j in range(i, len(nums)):\n            # Add the current element to the current sum\n            curr_sum += nums[j]\n            # Update the minimum sum if the current sum is smaller\n            min_sum = min(min_sum, curr_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    current_sum = nums[0]\n    min_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    # Initialize variables to store the current sum and minimum sum\n    curr_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through each element in the array\n    for num in nums:\n        # Add the current element to the current sum\n        curr_sum += num\n        \n        # If the current sum is smaller than the minimum sum, update the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        \n        # If the current sum is larger than zero, reset the current sum to zero\n        # Otherwise, continue adding elements to the current sum\n        if curr_sum > 0:\n            curr_sum = 0\n    \n    # Return the minimum sum\n    return min_sum",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        \n        if curr_sum > 0:\n            curr_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    # Initialize variables to store the current sum and the minimum sum\n    curr_sum = nums[0]\n    min_sum = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(nums)):\n        # Calculate the current sum by adding the current element to the previous sum\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        \n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, curr_sum)\n    \n    # Return the minimum sum\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')  # initialize the minimum sum to positive infinity\n    \n    for i in range(len(nums)):  # iterate over each element in the array\n        curr_sum = 0  # initialize the current sum to 0\n        \n        for j in range(i, len(nums)):  # iterate over the sub-array starting from index i\n            curr_sum += nums[j]  # add the current element to the current sum\n            \n            min_sum = min(min_sum, curr_sum)  # update the minimum sum if necessary\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    Examples:\n\n    [1, -2, 3, -4, 5] -> -4\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    Examples:\n\n    [1, -2, 3, -4, 5] -> -4\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    current_sum = nums[0]\n    min_sum = current_sum\n    \n    for i in range(1, len(nums)):\n        current_sum = min(current_sum + nums[i], nums[i])\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    Examples:\n\n    [1, -2, 3, -4, 5] -> -4\n    \"\"\"\n    if not nums:\n        return None\n\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum = sum(nums[i:j+1])\n            min_sum = min(min_sum, sub_array_sum)\n    return min_sum\n\nprint(minSubArraySum([1, -2, 3, -4, 5]))",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    curr_sum = nums[0]\n    min_sum = curr_sum\n    \n    for i in range(1, len(nums)):\n        curr_sum = min(curr_sum + nums[i], nums[i])\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    Examples:\n\n    [1, -2, 3, -4, 5] -> -4\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(current_sum + num, num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    # Initialize the current minimum sum and the global minimum sum\n    curr_min_sum = float('inf')\n    global_min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update the current minimum sum\n        curr_min_sum = min(num, curr_min_sum + num)\n        \n        # Update the global minimum sum\n        global_min_sum = min(global_min_sum, curr_min_sum)\n    \n    # Return the global minimum sum\n    return global_min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    n = len(nums)\n    min_sum = float('inf')\n    \n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    # initialize variables\n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    # loop through the array\n    for i in range(1, len(nums)):\n        # check if adding the current element makes the sum smaller\n        if current_sum + nums[i] > nums[i]:\n            current_sum = nums[i]\n        else:\n            current_sum += nums[i]\n        \n        # update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(current_sum + num, num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        \n        if curr_sum > 0:\n            curr_sum = 0\n            \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')  # set initial min_sum to positive infinity\n    \n    for i in range(len(nums)):\n        current_sum = 0  # set initial current_sum to 0\n        \n        for j in range(i, len(nums)):\n            current_sum += nums[j]  # add current element to current_sum\n            \n            if current_sum < min_sum:  # if current_sum is less than min_sum\n                min_sum = current_sum  # update min_sum\n                \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    # Initialize the minimum sum to be the maximum possible value\n    min_sum = float('inf')\n    \n    # Iterate through each sub-array\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            # Calculate the sum of the current sub-array\n            sub_array_sum = sum(nums[i:j+1])\n            \n            # Update the minimum sum if necessary\n            if sub_array_sum < min_sum:\n                min_sum = sub_array_sum\n    \n    # Return the minimum sum\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    current_sum = nums[0]\n    min_sum = current_sum\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        \n        if curr_sum > 0:\n            curr_sum = 0\n            \n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray_sum = sum(nums[i:j+1])\n            min_sum = min(min_sum, subarray_sum)\n    return min_sum\n\nprint(minSubArraySum([1, -2, 3, -4, 5])) # -4\nprint(minSubArraySum([1, 2, 3, 4, 5])) # 1\nprint(minSubArraySum([-10, 10, -5, 5, -1])) # -10",
            "logp": null
        },
        {
            "content": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum",
            "logp": null
        }
    ]
}