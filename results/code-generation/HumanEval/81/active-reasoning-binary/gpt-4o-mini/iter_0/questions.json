{
    "0": [
        "assert numerical_letter_grade([4.0]) == ['A+']",
        "assert numerical_letter_grade([3.1, 2.9, 1.8]) == ['B+', 'B', 'C']",
        "assert numerical_letter_grade([3.2, 1.2, 2.5]) == ['B+', 'D-', 'B']",
        "assert numerical_letter_grade([3.8, 3.4, 2.5]) == ['A', 'A-', 'B']",
        "assert numerical_letter_grade([3.8, 3.5, 2.9]) == ['A', 'A-', 'B+']",
        "assert numerical_letter_grade([1.2, 0.5, 0.0]) == ['C-', 'D-', 'E']",
        "assert numerical_letter_grade([2.1, 0.0, 1.5]) == ['C+', 'E', 'D-']"
    ],
    "1": [
        "assert numerical_letter_grade([3.0, 3.7, 4.0, 1.2]) == ['B+', 'A', 'A+', 'D-']",
        "assert numerical_letter_grade([3.5, 2.5, 1.0]) == ['A-', 'B', 'D+']",
        "assert numerical_letter_grade([2.1, 1.8, 0.0]) == ['C+', 'D', 'E']",
        "assert numerical_letter_grade([2.5]) == ['B']",
        "assert numerical_letter_grade([3.8]) == ['A']",
        "assert numerical_letter_grade([1.5]) == ['C-']",
        "assert numerical_letter_grade([0.5]) == ['D-']"
    ],
    "2": [
        "assert numerical_letter_grade([3.5, 2.5, 1.0]) == ['A-', 'B', 'D+']",
        "assert numerical_letter_grade([2.1, 1.8, 0.0]) == ['C+', 'D', 'E']",
        "assert numerical_letter_grade([2.5]) == ['B']",
        "assert numerical_letter_grade([3.8]) == ['A']",
        "assert numerical_letter_grade([1.5]) == ['C-']",
        "assert numerical_letter_grade([0.5]) == ['D-']"
    ],
    "3": [
        "assert numerical_letter_grade([2.1, 1.8, 0.0]) == ['C+', 'D', 'E']",
        "assert numerical_letter_grade([2.5]) == ['B']",
        "assert numerical_letter_grade([3.8]) == ['A']",
        "assert numerical_letter_grade([0.5]) == ['D-']",
        "assert numerical_letter_grade([1.5]) == ['D+']"
    ]
}