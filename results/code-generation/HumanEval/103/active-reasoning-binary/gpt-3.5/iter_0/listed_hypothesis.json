{
    "0": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) / (m-n+1)\n        avg = round(avg)\n        avg_binary = bin(avg)[2:]\n        return avg_binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(average)[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return int(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = round(avg)\n    \n    binary = bin(avg)[2:]\n    \n    return binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return int(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return int(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return int(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)",
            "logp": null
        }
    ]
}