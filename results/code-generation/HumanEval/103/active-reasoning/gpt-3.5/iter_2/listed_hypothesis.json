{
    "0": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        avg_rounded = round(avg)\n        avg_binary = bin(avg_rounded)[2:]\n        return avg_binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    avg = total / count\n\n    return bin(round(avg))[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)",
            "logp": null
        },
        {
            "content": "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = int(avg)\n    avg = bin(avg)[2:]\n    return avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = (n + m) // 2\n    rounded_average = round(average)\n\n    return bin(rounded_average)[2:]",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    average = total / count\n    rounded = round(average)\n    binary = bin(rounded)\n    \n    return binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    \n    return bin(avg_rounded)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) / (m - n + 1)\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)\n        return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    \n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = int(round((n + m) / 2))\n    return bin(average)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = round((n + m) / 2)\n    binary = bin(average)\n    return binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)\n    \n    return avg_binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(average)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1))/(m-n+1))\n        return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total / count)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg = int(round(avg))\n    \n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    return bin(avg_rounded)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = int(avg)\n    avg = bin(avg)\n    \n    return avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_average = round(average)\n    return bin(rounded_average)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = round(sum(range(n, m+1)) / (m - n + 1))\n    binary = bin(average)\n    return binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = round(avg)\n    \n    return bin(avg)",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg = round(avg)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    avg = total / count\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        avg_rounded = round(avg)\n        avg_binary = bin(avg_rounded)\n        return avg_binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = round((n + m) / 2)\n    binary = bin(average)\n\n    return binary",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round((n + m) / 2)\n    return bin(average)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = int(round((n + m) / 2))\n        return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)",
            "logp": null
        },
        {
            "content": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    \n    return binary_average",
            "logp": null
        }
    ]
}