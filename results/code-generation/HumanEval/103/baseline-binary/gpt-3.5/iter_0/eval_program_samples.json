{
    "0": {
        "0": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) / (m-n+1)\n        avg = round(avg)\n        avg_binary = bin(avg)[2:]\n        return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1)) / (m - n + 1)\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    \n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n        \n    avg = total / count\n    avg = round(avg)\n    \n    binary = bin(avg)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return int(avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = round(avg)\n    \n    binary = bin(avg)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total_sum += i\n        count += 1\n    \n    average = round(total_sum / count)\n    \n    return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]"
        ],
        "1": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg_binary = bin(avg)[2:]\n    \n    return int(avg_binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round(sum(range(n, m + 1)) / (m - n + 1))\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total/count)\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary_avg = bin(round(avg))[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1)) / (m-n+1)\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n\n    return int(binary_average)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average"
        ],
        "2": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg_binary = bin(avg)[2:]\n    \n    return int(avg_binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round(sum(range(n, m + 1)) / (m - n + 1))\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total/count)\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary_avg = bin(round(avg))[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1)) / (m-n+1)\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n\n    return int(binary_average)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average"
        ],
        "3": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    binary_avg = bin(avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    \n    binary_average = bin(rounded_average)[2:]\n    \n    return int(binary_average)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for num in range(n, m+1):\n        total += num\n        count += 1\n    \n    avg = total / count\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    \n    return binary_average",
            "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1)) / (m-n+1)\n        rounded_avg = round(average)\n        return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded = round(average)\n    binary = bin(rounded)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)[2:]\n\n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:] # exclude '0b' prefix\n\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:] # remove '0b' prefix\n\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = bin(avg)\n    return int(avg, 2)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n\n    return int(binary)"
        ],
        "4": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    binary_avg = bin(avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    \n    binary_average = bin(rounded_average)[2:]\n    \n    return int(binary_average)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for num in range(n, m+1):\n        total += num\n        count += 1\n    \n    avg = total / count\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    \n    return binary_average",
            "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded = round(average)\n    binary = bin(rounded)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:] # exclude '0b' prefix\n\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:] # remove '0b' prefix\n\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = bin(avg)\n    return int(avg, 2)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n\n    return int(binary)"
        ]
    },
    "1": {
        "0": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return int(avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = round(avg)\n    \n    binary = bin(avg)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total_sum += i\n        count += 1\n    \n    average = round(total_sum / count)\n    \n    return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        avg_rounded = round(avg)\n        avg_binary = bin(avg_rounded)[2:]\n        return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    avg = total / count\n\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)",
            "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = int(avg)\n    avg = bin(avg)[2:]\n    return avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_average = round(average)\n    binary = bin(rounded_average)[2:]\n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]"
        ],
        "1": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary_avg = bin(round(avg))[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1)) / (m-n+1)\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n\n    return int(binary_average)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = round(total / (m-n+1))\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = math.ceil((n + m) / 2)\n    binary = bin(average)[2:]\n    \n    return int(binary)"
        ],
        "2": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary_avg = bin(round(avg))[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1)) / (m-n+1)\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n\n    return int(binary_average)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = round(total / (m-n+1))\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg\n\nassert rounded_avg(10, 1) == -1",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    average = total / (m - n + 1)\n    rounded_average = round(average)\n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg_binary = bin(avg)\n    return avg_binary[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = int(round(sum(range(n, m+1)) / (m - n + 1)))\n        return bin(average)[2:]"
        ],
        "3": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded = round(average)\n    binary = bin(rounded)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:] # exclude '0b' prefix\n\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:] # remove '0b' prefix\n\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = bin(avg)\n    return int(avg, 2)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n\n    return int(binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = int(round(avg))\n    avg_binary = bin(avg)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for num in range(n, m+1):\n        total += num\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m + 1)) / (m - n + 1)\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg"
        ],
        "4": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return bin(round(average))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded = round(average)\n    binary = bin(rounded)[2:]\n    \n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:] # exclude '0b' prefix\n\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:] # remove '0b' prefix\n\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = bin(avg)\n    return int(avg, 2)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n\n    return int(binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = int(round(avg))\n    avg_binary = bin(avg)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for num in range(n, m+1):\n        total += num\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m + 1)) / (m - n + 1)\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg"
        ]
    },
    "2": {
        "0": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        avg_rounded = round(avg)\n        avg_binary = bin(avg_rounded)[2:]\n        return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m-n+1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    avg = total / count\n\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)",
            "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = int(avg)\n    avg = bin(avg)[2:]\n    return avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m + 1)) / (m - n + 1)\n    rounded_average = round(average)\n    binary = bin(rounded_average)[2:]\n    return binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = (n + m) // 2\n    rounded_average = round(average)\n\n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    \n    return int(avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = int(round((n + m) / 2))\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) // 2\n    binary = bin(average)[2:]\n    return int(binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    avg = total_sum / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg"
        ],
        "1": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = round(total / (m-n+1))\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "import math\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = math.ceil((n + m) / 2)\n    binary = bin(average)[2:]\n    \n    return int(binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg\n\nassert rounded_avg(10, 1) == -1",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    average = total / (m - n + 1)\n    rounded_average = round(average)\n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg_binary = bin(avg)\n    return avg_binary[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = int(round(sum(range(n, m+1)) / (m - n + 1)))\n        return bin(average)[2:]"
        ],
        "2": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = round(total / (m-n+1))\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    \n    avg = total / count\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg\n\nassert rounded_avg(10, 1) == -1",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    average = total / (m - n + 1)\n    rounded_average = round(average)\n    return bin(rounded_average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg_binary = bin(avg)\n    return avg_binary[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = int(round(sum(range(n, m+1)) / (m - n + 1)))\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    \n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round((n + m) / 2)\n    binary = bin(average)\n    \n    return binary[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary_avg = bin(round(avg))\n    \n    return binary_avg[2:]"
        ],
        "3": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    avg_rounded = round(avg)\n    avg_binary = bin(avg_rounded)[2:]\n\n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:] # exclude '0b' prefix\n\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:] # remove '0b' prefix\n\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = bin(avg)\n    return int(avg, 2)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n\n    return int(binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = int(round(avg))\n    avg_binary = bin(avg)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for num in range(n, m+1):\n        total += num\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m + 1)) / (m - n + 1)\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg"
        ],
        "4": [
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\n    return bin(rounded_avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:] # exclude '0b' prefix\n\n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:] # remove '0b' prefix\n\n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = round((n + m) / 2)\n        return bin(average)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    avg = round(avg)\n    avg = bin(avg)\n    return int(avg, 2)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    \n    return binary_average",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n\n    return int(binary)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = int(round(avg))\n    avg_binary = bin(avg)[2:]\n    \n    return avg_binary",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return int(binary_avg)",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    \n    return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for num in range(n, m+1):\n        total += num\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m + 1)) / (m - n + 1)\n        return bin(round(avg))[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total/count)\n    return bin(avg)[2:]",
            "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n    return binary_avg"
        ]
    }
}