{
    "0": {
        "0": [
            "def is_simple_power(x, n):\n    return x == n**int(x**0.5)",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**0.5) if x >= 1 else False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return n ** int(x ** (1 / n)) == x",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**0.5)",
            "def is_simple_power(x, n):\n    if n**int(x**(1/n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if x <= 0:\n        return False\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return n**int(x**0.5) == x",
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n        return is_simple_power(x//n, n)",
            "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    elif n == 0:\n        return x == 0\n    else:\n        i = 1\n        while n ** i <= x:\n            if n ** i == x:\n                return True\n            i += 1\n        return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1/n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))"
        ],
        "1": [
            "def is_simple_power(x, n):\n    if x == n**int(x**(1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n\n    if x == 1 and n == 1:\n        return True\n\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n\n    return False",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n, False otherwise.\"\"\"\n    return n ** int(x ** (1 / n)) == x",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1/n)) == x:\n        return True\n    return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n**int(x**(1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x == 0:\n        return n == 0\n    if x == 1:\n        return n == 1\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False\n\nassert is_simple_power(9, 3) == True",
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif n == 1:\n        return False\n    else:\n        while x % n == 0:\n            x /= n\n        return x == 1",
            "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n\n    power = 0\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1 / n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1 / n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x"
        ],
        "2": [
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x//n, n)\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if x <= 0:\n        return False\n    \n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n        \n    return True",
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False"
        ],
        "3": [
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif n == 0:\n        return False\n    else:\n        while x % n == 0:\n            x = x / n\n        return x == 1",
            "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 1:\n        return n == 1\n    if x == n:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"
        ],
        "4": [
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x == 0:\n        return n == 0\n    if x == 1:\n        return n == 1\n    i = 1\n    while n**i <= x:\n        if n**i == x:\n            return True\n        i += 1\n    return False\n\nassert is_simple_power(9, 3) == True\nassert is_simple_power(36, 6) == True\nassert is_simple_power(25, 5) == True\nassert is_simple_power(49, 7) == True"
        ]
    },
    "1": {
        "0": [
            "def is_simple_power(x, n):\n    if x <= 0:\n        return False\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return n**int(x**0.5) == x",
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n        return is_simple_power(x//n, n)",
            "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    elif n == 0:\n        return x == 0\n    else:\n        i = 1\n        while n ** i <= x:\n            if n ** i == x:\n                return True\n            i += 1\n        return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1/n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return n ** int(x ** (1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**0.5)",
            "def is_simple_power(x, n):\n    if x == n**int(x**(1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n**int(x**0.5):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))"
        ],
        "1": [
            "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n, False otherwise.\"\"\"\n    return n ** int(x ** (1 / n)) == x",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1/n)) == x:\n        return True\n    return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n**int(x**(1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x == 0:\n        return n == 0\n    if x == 1:\n        return n == 1\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False\n\nassert is_simple_power(9, 3) == True",
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif n == 1:\n        return False\n    else:\n        while x % n == 0:\n            x /= n\n        return x == 1",
            "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n\n    power = 0\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1 / n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1 / n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1/n)):\n        return True\n    else:\n        return False\n\nassert is_simple_power(9, 3) == True",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))"
        ],
        "2": [
            "def is_simple_power(x, n):\n    if x <= 0:\n        return False\n    \n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n        \n    return True",
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n    return False\n\nassert is_simple_power(9, 3) == True\nassert is_simple_power(36, 6) == True"
        ],
        "3": [
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif n == 0:\n        return False\n    else:\n        while x % n == 0:\n            x = x / n\n        return x == 1",
            "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 1:\n        return n == 1\n    if x == n:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x",
            "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"
        ],
        "4": [
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x == 0:\n        return n == 0\n    if x == 1:\n        return n == 1\n    i = 1\n    while n**i <= x:\n        if n**i == x:\n            return True\n        i += 1\n    return False\n\nassert is_simple_power(9, 3) == True\nassert is_simple_power(36, 6) == True\nassert is_simple_power(25, 5) == True\nassert is_simple_power(49, 7) == True"
        ]
    },
    "2": {
        "0": [
            "def is_simple_power(x, n):\n    return n ** int(x ** (1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**0.5)",
            "def is_simple_power(x, n):\n    if x == n**int(x**(1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1/n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n**int(x**0.5):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    elif x == 1:\n        return True\n    else:\n        power = 1\n        while power < x:\n            power *= n\n        return power == x",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if i**n == x:\n            return True\n    return False",
            "def is_simple_power(x, n):\n    return n ** int(x ** (1 / n)) == x",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if n**int(x**(1/n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
            "def is_simple_power(x, n):\n    if x == 1 or x == n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n        while x % n == 0:\n            x = x / n\n            if x == 1:\n                return True\n        return False",
            "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    elif n == 1 and x != 1:\n        return False\n    else:\n        power = 0\n        while n ** power < x:\n            power += 1\n        return n ** power == x"
        ],
        "1": [
            "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n\n    power = 0\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if n ** int(x ** (1 / n)) == x:\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1 / n)):\n        return True\n    else:\n        return False",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    if x == n ** int(x ** (1/n)):\n        return True\n    else:\n        return False\n\nassert is_simple_power(9, 3) == True",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))",
            "def is_simple_power(x, n):\n    return n**int(x**(1/n)) == x",
            "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))",
            "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
            "def is_simple_power(x, n):\n    return n ** int(x ** (1/n)) == x"
        ],
        "2": [
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False",
            "def is_simple_power(x, n):\n    if x == n:\n        return True\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n    return False\n\nassert is_simple_power(9, 3) == True\nassert is_simple_power(36, 6) == True"
        ],
        "3": [
            "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 1:\n        return n == 1\n    if x == n:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x",
            "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"
        ],
        "4": [
            "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x == 0:\n        return n == 0\n    if x == 1:\n        return n == 1\n    i = 1\n    while n**i <= x:\n        if n**i == x:\n            return True\n        i += 1\n    return False\n\nassert is_simple_power(9, 3) == True\nassert is_simple_power(36, 6) == True\nassert is_simple_power(25, 5) == True\nassert is_simple_power(49, 7) == True"
        ]
    }
}