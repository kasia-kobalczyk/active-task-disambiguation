{
    "0": [
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # We know that the two sets of cars start out very far from each other\n    # So, there won't be any collisions until the cars from one set catches up to the cars from the other set\n    # The number of collisions will be the same as the number of cars in one of the sets\n\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Number of collisions\n    collisions = 0\n    \n    # Loop through all the cars from left to right\n    for i in range(1, n+1):\n        \n        # Loop through all the cars from right to left\n        for j in range(1, n+1):\n            \n            # If the car from left to right is at the same position as the car from right to left\n            if i == j:\n                # Increase the number of collisions by 1\n                collisions += 1\n    \n    return collisions",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n - 1) // 2",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n-1) // 2",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n*(n-1)",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n - 1) // 2",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n - 1)",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # We know that the two sets of cars start out very far from each other\n    # So, there won't be any collisions until the cars from one set catches up to the cars from the other set\n    # The number of collisions will be the same as the number of cars in one of the sets\n\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Number of collisions\n    collisions = 0\n    \n    # Loop through all the cars from left to right\n    for i in range(1, n+1):\n        \n        # Loop through all the cars from right to left\n        for j in range(1, n+1):\n            \n            # If the car from left to right is at the same position as the car from right to left\n            if i == j:\n                # Increase the number of collisions by 1\n                collisions += 1\n    \n    return collisions",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n*(n-1)",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n - 1)",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # The total number of collisions is equal to the number of cars moving left to right\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # There will be n collisions since all the left-to-right cars will collide\n    # with the right-to-left cars.\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # The number of collisions will be the same as the number of cars going in the opposite direction.\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n - 1)",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n-1)",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    return n*(n-1)",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    return n * (n-1)",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # We know that the two sets of cars start out very far from each other\n    # So, there won't be any collisions until the cars from one set catches up to the cars from the other set\n    # The number of collisions will be the same as the number of cars in one of the sets\n\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Number of collisions\n    collisions = 0\n    \n    # Loop through all the cars from left to right\n    for i in range(1, n+1):\n        \n        # Loop through all the cars from right to left\n        for j in range(1, n+1):\n            \n            # If the car from left to right is at the same position as the car from right to left\n            if i == j:\n                # Increase the number of collisions by 1\n                collisions += 1\n    \n    return collisions",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # The total number of collisions is equal to the number of cars moving left to right\n    return n",
            "logp": null
        },
        {
            "content": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # The number of collisions will be the same as the number of cars going in the opposite direction.\n    return n",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n",
            "logp": null
        }
    ]
}