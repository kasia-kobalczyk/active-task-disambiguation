{
    "0": {
        "0": [
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    \n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        \n        sorted_lst.append(min_val)\n        if min_val == max_val:\n            break\n        sorted_lst.append(max_val)\n        \n        lst.remove(min_val)\n        lst.remove(max_val)\n        \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_list.append(min_val)\n        sorted_list.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    \n    # create an empty list to store the strange sorted elements\n    result = []\n    \n    # initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # append the element at the left pointer to the result list\n        result.append(lst[left])\n        \n        # increment the left pointer\n        left += 1\n        \n        # if the left pointer is now greater than the right pointer, break out of the loop\n        if left > right:\n            break\n        \n        # append the element at the right pointer to the result list\n        result.append(lst[right])\n        \n        # decrement the right pointer\n        right -= 1\n    \n    # return the strange sorted list\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        result.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    sorted_lst = sorted(lst)\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        sorted_lst.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            sorted_lst.append(max_value)\n            lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        sorted_lst.append(min_value)\n        sorted_lst.append(max_value)\n        lst.remove(min_value)\n        lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    \n    while lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        sorted_list.append(minimum)\n        sorted_list.append(maximum)\n        lst.remove(minimum)\n        lst.remove(maximum)\n    \n    return sorted_list",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        if min_val != max_val:\n            result.append(max_val)\n        lst.remove(min_val)\n        if min_val != max_val:\n            lst.remove(max_val)\n    return result"
        ],
        "1": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # Sort the list in ascending order\n    \n    # Initialize the start and end indices\n    start = 0\n    end = len(lst) - 1\n    \n    # Iterate until start is less than or equal to end\n    while start <= end:\n        # If start and end are equal, only one element is remaining in the list\n        if start == end:\n            sorted_lst.append(lst[start])\n            break\n        \n        # Append the minimum value to the sorted list\n        sorted_lst.append(lst[start])\n        start += 1\n        \n        # Append the maximum value to the sorted list\n        sorted_lst.append(lst[end])\n        end -= 1\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst = sorted(lst)  # sort the list in ascending order\n    result = []  # initialize an empty list to store the strange sorted elements\n    while len(lst) > 0:  # iterate until all elements are added to the result list\n        result.append(lst.pop(0))  # add the minimum element to the result list and remove it from the original list\n        if len(lst) > 0:\n            result.append(lst.pop())  # add the maximum element to the result list and remove it from the original list\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n\n    # create an empty result list\n    result = []\n\n    # iterate over the sorted list\n    while lst:\n        # add the minimum value to the result list\n        result.append(lst.pop(0))\n\n        # if there are still elements in the list, add the maximum value\n        if lst:\n            result.append(lst.pop())\n\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Create an empty list to store the strange ordering\n    strange_order = []\n    \n    # Iterate over the sorted list\n    while sorted_lst:\n        # Append the minimum value to the strange ordering\n        strange_order.append(sorted_lst.pop(0))\n        \n        # If there are still elements in the list, append the maximum value to the strange ordering\n        if sorted_lst:\n            strange_order.append(sorted_lst.pop())\n    \n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    n = len(lst)\n    result = []\n    for i in range(n // 2):  # iterate through the first half of the list\n        result.append(lst[i])  # add the minimum value\n        result.append(lst[n - i - 1])  # add the maximum value\n    if n % 2 != 0:  # if the list has odd length, add the middle element\n        result.append(lst[n // 2])\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    sorted_lst = sorted(lst)\n    # create an empty list to store the strange sorted list\n    strange_sorted_lst = []\n    # iterate through the sorted list and add the minimum and maximum values alternately to the strange sorted list\n    while sorted_lst:\n        # add the minimum value\n        strange_sorted_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            # add the maximum value\n            strange_sorted_lst.append(sorted_lst.pop())\n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    while lst:\n        result.append(lst.pop(0)) # append the minimum value to the result list\n        if lst: # check if there are remaining values in the list\n            result.append(lst.pop()) # append the maximum value to the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    sorted_lst = sorted(lst)\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        minimum = min(lst)\n        result.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            result.append(maximum)\n            lst.remove(maximum)\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst[0])\n        lst.pop(0)\n        if len(lst) > 0:\n            sorted_list.append(lst[-1])\n            lst.pop(-1)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        minimum = min(lst)\n        sorted_list.append(minimum)\n        lst.remove(minimum)\n        \n        if len(lst) > 0:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n            \n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n\n    # initialize the result list\n    result = []\n\n    # iterate over the list\n    while lst:\n        # get the minimum value and append it to the result list\n        result.append(lst.pop(0))\n\n        # if there are still elements in the list\n        if lst:\n            # get the maximum value and append it to the result list\n            result.append(lst.pop())\n\n    # return the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"
        ],
        "2": [
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Create a new list to hold the strange sorting order\n    result = []\n\n    # Initialize two pointers, one at the start of the list and one at the end\n    left = 0\n    right = len(lst) - 1\n\n    # Alternate between adding the minimum and maximum values to the result list\n    while left <= right:\n        # Add the minimum value to the result list\n        result.append(lst[left])\n        left += 1\n\n        # If there are more than 2 elements remaining, add the maximum value to the result list\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 1:\n        sorted_lst.append(lst.pop(0))\n        sorted_lst.append(lst.pop())\n    if lst:\n        sorted_lst.append(lst[0])\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        min_val = lst.pop(0)\n        sorted_lst.append(min_val)\n        if len(lst) > 0:\n            max_val = lst.pop()\n            sorted_lst.append(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the result\n    while lst:\n        result.append(lst.pop(0)) # append the minimum value to the result\n        if lst: # if there are remaining elements in the list\n            result.append(lst.pop()) # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted list\n\n    while len(sorted_lst) > 0:  # repeat until all elements are added to the result list\n        result.append(sorted_lst.pop(0))  # add the minimum value to the result list\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))  # add the maximum value to the result list\n    return result\n\nassert strange_sort_list([-5, -3, -2, -4, -1]) == [-5, -1, -4, -2, -3]\nassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while len(sorted_lst) > 0:\n        result_lst.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result_lst.append(sorted_lst.pop(-1))\n    return result_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst = sorted(lst) # sort the list in ascending order\n    while lst: # while the list is not empty\n        result.append(lst.pop(0)) # append the minimum value to the result list\n        if lst: # if the list is still not empty\n            result.append(lst.pop()) # append the maximum value to the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(lst)\n    result = []\n    for i in range(n // 2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n - i - 1])\n    if n % 2 == 1:\n        result.append(sorted_lst[n // 2])\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Create a new list to store the strange order\n    strange_order = []\n\n    # Loop through the list and add the minimum value and the maximum value of the remaining integers alternately to the strange order list\n    while len(lst) > 0:\n        strange_order.append(lst.pop(0))\n        if len(lst) > 0:\n            strange_order.append(lst.pop())\n\n    return strange_order",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()  # sort the list in ascending order\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))  # add minimum value to sorted_list\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())  # add maximum value to sorted_list\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    while lst: # while there are still elements in the list\n        result.append(lst.pop(0)) # append the minimum value to the result\n        if lst: # if there are still elements in the list\n            result.append(lst.pop()) # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))  # Add the first element (minimum) to the sorted list\n        if lst:\n            sorted_lst.append(lst.pop())  # Add the last element (maximum) to the sorted list\n    return sorted_lst\n\n# Test Cases\nprint(strange_sort_list([-5, -3, -2, -4, -1]))  # Output: [-5, -1, -4, -2, -3]\nprint(strange_sort_list([1, 2, 3, 4, 5]))  # Output: [1, 5, 2, 4, 3]",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []  # Initialize an empty list for the result\n\n    while sorted_lst:\n        # Get the minimum and maximum values from the sorted list\n        min_val = sorted_lst.pop(0)\n        max_val = sorted_lst.pop() if sorted_lst else None\n\n        # Append the minimum and maximum values to the result list\n        result.append(min_val)\n        if max_val is not None:\n            result.append(max_val)\n\n    return result"
        ],
        "3": [
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # sort the list in ascending order\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))  # add the smallest value to the sorted list\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop(-1))  # add the largest value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_value = min(lst)\n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        if lst:\n            max_value = max(lst)\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    n = len(lst)\n    for i in range(n // 2):\n        sorted_lst.append(lst[i])\n        sorted_lst.append(lst[n - i - 1])\n    if n % 2 != 0:\n        sorted_lst.append(lst[n // 2])\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    \n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    \n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    n = len(sorted_lst)\n    result = []\n\n    for i in range(n // 2):\n        result.append(sorted_lst[i])  # Append the i-th smallest element\n        result.append(sorted_lst[n - 1 - i])  # Append the i-th largest element\n\n    if n % 2 != 0:\n        result.append(sorted_lst[n // 2])  # Append the middle element if the list has odd length\n\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # initialize an empty list to store the strange sorted list\n\n    # loop through the sorted list and append the minimum and maximum values alternatively\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value\n        if lst:  # check if the list is not empty\n            result.append(lst.pop(-1))  # append the maximum value\n\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst"
        ],
        "4": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0))  # append the minimum value\n        if lst:\n            sorted_lst.append(lst.pop(-1))  # append the maximum value\n    return sorted_lst",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n\n    # create an empty result list\n    result = []\n\n    # iterate over the sorted list\n    while lst:\n        # append the minimum value to the result list\n        result.append(lst.pop(0))\n        \n        # if there are still values in the list, append the maximum value to the result list\n        if lst:\n            result.append(lst.pop())\n\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the sorted list\n\n    while lst:\n        result.append(lst.pop(0))  # take the first element (minimum) and append it to the result list\n        if lst:\n            result.append(lst.pop())  # take the last element (maximum) and append it to the result list\n\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the strange sorted order\n    strange_sorted_lst = []\n    \n    # Start with the minimum value\n    min_val = lst[0]\n    \n    # Append the minimum value to the strange sorted list\n    strange_sorted_lst.append(min_val)\n    \n    # Remove the minimum value from the list\n    lst.remove(min_val)\n    \n    # Loop until the list is empty\n    while lst:\n        # Get the maximum value from the remaining list\n        max_val = max(lst)\n        \n        # Append the maximum value to the strange sorted list\n        strange_sorted_lst.append(max_val)\n        \n        # Remove the maximum value from the list\n        lst.remove(max_val)\n        \n        # Check if the list is empty\n        if not lst:\n            break\n        \n        # Get the minimum value from the remaining list\n        min_val = min(lst)\n        \n        # Append the minimum value to the strange sorted list\n        strange_sorted_lst.append(min_val)\n        \n        # Remove the minimum value from the list\n        lst.remove(min_val)\n    \n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort() # Sort the list in ascending order\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0)) # Add the minimum value to the sorted list\n        if len(lst) > 0:\n            sorted_list.append(lst.pop()) # Add the maximum value to the sorted list\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while len(sorted_list) > 0:\n        result.append(sorted_list.pop(0))\n        if len(sorted_list) > 0:\n            result.append(sorted_list.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through the list and append the minimum and maximum values alternately to the result list\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    \n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    \n    while len(lst) > 0: # loop until all elements are added to the result list\n        result.append(lst.pop(0)) # add the smallest element to the result list\n        if len(lst) > 0: # check if there are still elements remaining\n            result.append(lst.pop()) # add the largest element to the result list\n            \n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst = sorted(lst)  # sort the list in ascending order\n    while len(lst) > 0:\n        result.append(lst.pop(0))  # take the minimum value\n        if len(lst) > 0:\n            result.append(lst.pop())  # take the maximum value\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while len(sorted_lst) > 0:\n        result_lst.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    for i in range(len(lst) // 2):\n        sorted_lst.append(lst[i])\n        sorted_lst.append(lst[-(i + 1)])\n    if len(lst) % 2 != 0:\n        sorted_lst.append(lst[len(lst) // 2])\n    return sorted_lst\n\nassert strange_sort_list([-5, -3, -2, -4, -1]) == [-5, -1, -4, -2, -3]\nassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 6, 2, 5, 3, 4]",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    if sorted_lst:\n        result.append(sorted_lst[0])\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"
        ]
    },
    "1": {
        "0": [
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        sorted_lst.append(min_value)\n        sorted_lst.append(max_value)\n        lst.remove(min_value)\n        lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    \n    while lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        sorted_list.append(minimum)\n        sorted_list.append(maximum)\n        lst.remove(minimum)\n        lst.remove(maximum)\n    \n    return sorted_list",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        if min_val != max_val:\n            result.append(max_val)\n        lst.remove(min_val)\n        if min_val != max_val:\n            lst.remove(max_val)\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the result\n    while lst: # Loop until the list is empty\n        result.append(lst.pop(0)) # Append the minimum value to the result list\n        if lst: # Check if the list is not empty\n            result.append(lst.pop(-1)) # Append the maximum value to the result list\n    return result # Return the result list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    # create a new list to store the strange order\n    strange_order = []\n    # iterate over the list and add the minimum value to the strange order list\n    # then remove the minimum value from the original list\n    while lst:\n        strange_order.append(lst.pop(0))\n        # if there are still values in the list, add the maximum value\n        if lst:\n            strange_order.append(lst.pop())\n    # return the strange order list\n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted list\n    while len(lst) > 0:  # while there are still elements in the original list\n        result.append(lst.pop(0))  # add the first element (minimum) to the result list and remove it from the original list\n        if len(lst) > 0:  # if there are still elements in the original list\n            result.append(lst.pop())  # add the last element (maximum) to the result list and remove it from the original list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Create an empty list to store the result\n    \n    # Start with the minimum value\n    # and add the maximum value of the remaining integers,\n    # then add the minimum value and so on\n    while len(lst) > 0:\n        result.append(lst.pop(0)) # Add the minimum value\n        if len(lst) > 0:\n            result.append(lst.pop()) # Add the maximum value\n            \n    return result"
        ],
        "1": [
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Create an empty list to store the strange ordering\n    strange_order = []\n    \n    # Iterate over the sorted list\n    while sorted_lst:\n        # Append the minimum value to the strange ordering\n        strange_order.append(sorted_lst.pop(0))\n        \n        # If there are still elements in the list, append the maximum value\n        if sorted_lst:\n            strange_order.append(sorted_lst.pop())\n    \n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    n = len(lst)\n    result = []\n    for i in range(n // 2):  # iterate through the first half of the list\n        result.append(lst[i])  # add the minimum value\n        result.append(lst[n - i - 1])  # add the maximum value\n    if n % 2 != 0:  # if the list has odd length, add the middle element\n        result.append(lst[n // 2])\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    sorted_lst = sorted(lst)\n    # create an empty list to store the strange sorted list\n    strange_sorted_lst = []\n    # iterate through the sorted list and add the minimum and maximum values alternately to the strange sorted list\n    while sorted_lst:\n        # add the minimum value\n        strange_sorted_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            # add the maximum value\n            strange_sorted_lst.append(sorted_lst.pop())\n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    while lst:\n        result.append(lst.pop(0)) # append the minimum value to the result list\n        if lst: # check if there are remaining values in the list\n            result.append(lst.pop()) # append the maximum value to the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    sorted_lst = sorted(lst)\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        minimum = min(lst)\n        result.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            result.append(maximum)\n            lst.remove(maximum)\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst[0])\n        lst.pop(0)\n        if len(lst) > 0:\n            sorted_list.append(lst[-1])\n            lst.pop(-1)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        minimum = min(lst)\n        sorted_list.append(minimum)\n        lst.remove(minimum)\n        \n        if len(lst) > 0:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n            \n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n\nprint(strange_sort_list([-5, -3, -2, -4, -1]))\n# Output: [-5, -1, -4, -2, -3]",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0))  # add the minimum value to the sorted list\n        if lst:\n            sorted_lst.append(lst.pop(-1))  # add the maximum value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst = sorted(lst)\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val]\n    lst.remove(min_val)\n    \n    while len(lst) > 1:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(max_val)\n        result.append(min_val)\n        lst.remove(max_val)\n        lst.remove(min_val)\n    \n    if len(lst) == 1:\n        result.append(lst[0])\n    \n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty result list\n    result = []\n\n    # Loop through the sorted list\n    while lst:\n        # Add the minimum value to the result list\n        result.append(lst.pop(0))\n\n        # If there are still values in the list\n        if lst:\n            # Add the maximum value to the result list\n            result.append(lst.pop())\n\n    # Return the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()  # Sort the list in ascending order\n    while lst:\n        sorted_list.append(lst.pop(0))  # Add the smallest value to the sorted list\n        if lst:\n            sorted_list.append(lst.pop())  # Add the largest value to the sorted list\n    return sorted_list"
        ],
        "2": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while len(sorted_lst) > 0:\n        result_lst.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result_lst.append(sorted_lst.pop(-1))\n    return result_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst = sorted(lst) # sort the list in ascending order\n    while lst: # while the list is not empty\n        result.append(lst.pop(0)) # append the minimum value to the result list\n        if lst: # if the list is still not empty\n            result.append(lst.pop()) # append the maximum value to the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(lst)\n    result = []\n    for i in range(n // 2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n - i - 1])\n    if n % 2 == 1:\n        result.append(sorted_lst[n // 2])\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Create a new list to store the strange order\n    strange_order = []\n\n    # Loop through the list and add the minimum value and the maximum value of the remaining integers alternately to the strange order list\n    while len(lst) > 0:\n        strange_order.append(lst.pop(0))\n        if len(lst) > 0:\n            strange_order.append(lst.pop())\n\n    return strange_order",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()  # sort the list in ascending order\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))  # add minimum value to sorted_list\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())  # add maximum value to sorted_list\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    while lst: # while there are still elements in the list\n        result.append(lst.pop(0)) # append the minimum value to the result\n        if lst: # if there are still elements in the list\n            result.append(lst.pop()) # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))  # Add the first element (minimum) to the sorted list\n        if lst:  # If there are remaining elements\n            sorted_lst.append(lst.pop())  # Add the last element (maximum) to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the result\n    while lst:\n        result.append(lst.pop(0)) # Append the minimum value to the result\n        if lst:\n            result.append(lst.pop()) # Append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []  # Initialize an empty list for the result\n\n    while sorted_lst:\n        # Get the minimum and maximum values from the sorted list\n        min_val = sorted_lst.pop(0)\n        max_val = sorted_lst.pop() if sorted_lst else None\n\n        # Append the minimum and maximum values to the result list\n        result.append(min_val)\n        if max_val is not None:\n            result.append(max_val)\n\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result\n        if sorted_lst: # check if there are remaining values\n            result.append(sorted_lst.pop(-1)) # add the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Create an empty list to store the strange order\n    strange_order = []\n    \n    # Iterate over the sorted list\n    while sorted_lst:\n        # Append the minimum value to the strange order\n        strange_order.append(sorted_lst.pop(0))\n        \n        # If there are still elements in the sorted list, append the maximum value to the strange order\n        if sorted_lst:\n            strange_order.append(sorted_lst.pop())\n    \n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    new_lst = [] # create an empty list to store the strange order\n    while lst:\n        new_lst.append(lst.pop(0)) # append the minimum value to the new list\n        if lst: # check if there are still elements in the list\n            new_lst.append(lst.pop(-1)) # append the maximum value to the new list\n    return new_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value\n        if lst:  # if there are remaining elements in the list\n            result.append(lst.pop())  # append the maximum value\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(lst)\n    result = []\n    for i in range(n // 2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n - i - 1])\n    if n % 2 == 1:\n        result.append(sorted_lst[n // 2])\n    return result"
        ],
        "3": [
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    \n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    \n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    n = len(sorted_lst)\n    result = []\n\n    for i in range(n // 2):\n        result.append(sorted_lst[i])  # Append the i-th smallest element\n        result.append(sorted_lst[n - 1 - i])  # Append the i-th largest element\n\n    if n % 2 != 0:\n        result.append(sorted_lst[n // 2])  # Append the middle element if the list has odd length\n\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_lst = []\n    while sorted_lst:\n        strange_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            strange_lst.append(sorted_lst.pop())\n    return strange_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # sort the list in ascending order\n    result = []  # create an empty list to store the strange order\n    \n    while sorted_lst:  # repeat until sorted_lst is empty\n        result.append(sorted_lst.pop(0))  # append the minimum value to the result\n        if sorted_lst:  # if sorted_lst is not empty\n            result.append(sorted_lst.pop())  # append the maximum value to the result\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst: # loop until the sorted list is empty\n        result.append(sorted_lst.pop(0)) # append the minimum value to the result\n        if sorted_lst: # check if there are still elements in the sorted list\n            result.append(sorted_lst.pop()) # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    result = []\n    \n    for i in range(n//2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n-i-1])\n        \n    if n % 2 != 0:\n        result.append(sorted_lst[n//2])\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    \n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    \n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"
        ],
        "4": [
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    \n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    \n    while len(lst) > 0: # loop until all elements are added to the result list\n        result.append(lst.pop(0)) # add the smallest element to the result list\n        if len(lst) > 0: # check if there are still elements remaining\n            result.append(lst.pop()) # add the largest element to the result list\n            \n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst = sorted(lst)  # sort the list in ascending order\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value\n        if lst:\n            result.append(lst.pop())  # append the maximum value\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while len(sorted_lst) > 0:\n        result_lst.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    for i in range(len(lst) // 2):\n        sorted_lst.append(lst[i])\n        sorted_lst.append(lst[-(i + 1)])\n    if len(lst) % 2 != 0:\n        sorted_lst.append(lst[len(lst) // 2])\n    return sorted_lst\n\nassert strange_sort_list([-5, -3, -2, -4, -1]) == [-5, -1, -4, -2, -3]\nassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 6, 2, 5, 3, 4]",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    if sorted_lst:\n        result.append(sorted_lst[0])\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0)) # get the minimum value and add it to the result\n        if sorted_lst: # check if there are still elements in the list\n            result.append(sorted_lst.pop()) # get the maximum value and add it to the result\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    sorted_lst = []\n    while lst:  # Repeat until the list is empty\n        sorted_lst.append(lst.pop(0))  # Append the minimum value to the sorted list\n        if lst:  # If there are remaining integers in the list\n            sorted_lst.append(lst.pop())  # Append the maximum value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    sorted_list = [] # create an empty list to store the strange sorted order\n\n    # iterate over the list\n    while lst:\n        sorted_list.append(lst.pop(0)) # add the minimum value to the sorted_list\n        if lst: # check if there are more elements in the list\n            sorted_list.append(lst.pop()) # add the maximum value to the sorted_list\n\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort() #sort the list in ascending order\n\n    while len(lst) > 0:\n        result.append(lst.pop(0)) #append the minimum value to result\n        if len(lst) > 0:\n            result.append(lst.pop()) #append the maximum value to result\n\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    result = []\n    for i in range(n // 2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n - i - 1])\n    if n % 2 != 0:\n        result.append(sorted_lst[n // 2])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_list = []\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 1:\n        result.append(lst.pop(0))\n        result.append(lst.pop())\n    if len(lst) == 1:\n        result.append(lst[0])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"
        ]
    },
    "2": {
        "0": [
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the result\n    while lst: # Loop until the list is empty\n        result.append(lst.pop(0)) # Append the minimum value to the result list\n        if lst: # Check if the list is not empty\n            result.append(lst.pop(-1)) # Append the maximum value to the result list\n    return result # Return the result list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    # create a new list to store the strange order\n    strange_order = []\n    # iterate over the list and add the minimum value to the strange order list\n    # then remove the minimum value from the original list\n    while lst:\n        strange_order.append(lst.pop(0))\n        # if there are still values in the list, add the maximum value\n        if lst:\n            strange_order.append(lst.pop())\n    # return the strange order list\n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted list\n    while len(lst) > 0:  # while there are still elements in the original list\n        result.append(lst.pop(0))  # add the first element (minimum) to the result list and remove it from the original list\n        if len(lst) > 0:  # if there are still elements in the original list\n            result.append(lst.pop())  # add the last element (maximum) to the result list and remove it from the original list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Create an empty list to store the result\n    \n    # Start with the minimum value\n    # and add the maximum value of the remaining integers,\n    # then add the minimum value and so on\n    while len(lst) > 0:\n        result.append(lst.pop(0)) # Add the minimum value\n        if len(lst) > 0:\n            result.append(lst.pop()) # Add the maximum value\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()  # sort the list in ascending order\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value to the result list\n        if lst:  # check if there are remaining integers in the list\n            result.append(lst.pop())  # append the maximum value to the result list\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_list = []\n    \n    while lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        \n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        \n        if lst:\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    \n    return sorted_list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n\n    result = [] # Create an empty list to store the sorted values\n\n    lst.sort() # Sort the input list in ascending order\n\n    while len(lst) > 0: # Repeat until the input list is empty\n\n        result.append(lst.pop(0)) # Add the minimum value to the result list\n\n        if len(lst) > 0: # Check if the input list is not empty\n\n            result.append(lst.pop()) # Add the maximum value to the result list\n\n    return result"
        ],
        "1": [
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        minimum = min(lst)\n        result.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            result.append(maximum)\n            lst.remove(maximum)\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst[0])\n        lst.pop(0)\n        if len(lst) > 0:\n            sorted_list.append(lst[-1])\n            lst.pop(-1)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        minimum = min(lst)\n        sorted_list.append(minimum)\n        lst.remove(minimum)\n        \n        if len(lst) > 0:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n            \n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n\nprint(strange_sort_list([-5, -3, -2, -4, -1]))\n# Output: [-5, -1, -4, -2, -3]",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0))  # add the minimum value to the sorted list\n        if lst:\n            sorted_lst.append(lst.pop(-1))  # add the maximum value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst = sorted(lst)\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val]\n    lst.remove(min_val)\n    \n    while len(lst) > 1:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(max_val)\n        result.append(min_val)\n        lst.remove(max_val)\n        lst.remove(min_val)\n    \n    if len(lst) == 1:\n        result.append(lst[0])\n    \n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty result list\n    result = []\n\n    # Loop through the sorted list\n    while lst:\n        # Add the minimum value to the result list\n        result.append(lst.pop(0))\n\n        # If there are still values in the list\n        if lst:\n            # Add the maximum value to the result list\n            result.append(lst.pop())\n\n    # Return the result list\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()  # Sort the list in ascending order\n    while lst:\n        sorted_list.append(lst.pop(0))  # Add the smallest value to the sorted list\n        if lst:\n            sorted_list.append(lst.pop())  # Add the largest value to the sorted list\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # Sort the list in ascending order\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        if i == j:\n            sorted_lst.append(lst[i])\n        else:\n            sorted_lst.append(lst[i])\n            sorted_lst.append(lst[j])\n        i += 1\n        j -= 1\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []  # Initialize an empty list to store the result\n    \n    # Loop through the sorted list\n    while len(sorted_lst) > 0:\n        # Append the minimum value to the result list\n        result.append(sorted_lst.pop(0))\n        # If there are remaining elements, append the maximum value to the result list\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []\n    i = 0\n    j = len(lst) - 1\n\n    while i <= j:\n        if i == j:  # if there is only one element remaining\n            result.append(lst[i])\n            break\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n            i += 1\n            j -= 1\n\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    \n    # create an empty list to store the strange order\n    result = []\n    \n    # loop through the sorted list\n    while lst:\n        # append the minimum value to the result list\n        result.append(lst.pop(0))\n        \n        # if there are still elements in the list, append the maximum value to the result list\n        if lst:\n            result.append(lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the sorted values\n    \n    while len(lst) > 0:\n        result.append(lst.pop(0))  # add the smallest value to the result list\n        if len(lst) > 0:\n            result.append(lst.pop())  # add the largest value to the result list\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst"
        ],
        "2": [
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] # create an empty list to store the strange order\n    while lst: # while there are still elements in the list\n        result.append(lst.pop(0)) # append the minimum value to the result\n        if lst: # if there are still elements in the list\n            result.append(lst.pop()) # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))  # Add the first element (minimum) to the sorted list\n        if lst:  # If there are remaining elements\n            sorted_lst.append(lst.pop())  # Add the last element (maximum) to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the result\n    while lst:\n        result.append(lst.pop(0)) # Append the minimum value to the result\n        if lst:\n            result.append(lst.pop()) # Append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []  # Initialize an empty list for the result\n\n    while sorted_lst:\n        # Get the minimum and maximum values from the sorted list\n        min_val = sorted_lst.pop(0)\n        max_val = sorted_lst.pop() if sorted_lst else None\n\n        # Append the minimum and maximum values to the result list\n        result.append(min_val)\n        if max_val is not None:\n            result.append(max_val)\n\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result\n        if sorted_lst: # check if there are remaining values\n            result.append(sorted_lst.pop(-1)) # add the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Create an empty list to store the strange order\n    strange_order = []\n    \n    # Iterate over the sorted list\n    while sorted_lst:\n        # Take the first element, which is the minimum value\n        min_val = sorted_lst.pop(0)\n        \n        # Add the minimum value to the strange order list\n        strange_order.append(min_val)\n        \n        # Check if there are still elements in the sorted list\n        if sorted_lst:\n            # Take the last element, which is the maximum of the remaining integers\n            max_val = sorted_lst.pop()\n            \n            # Add the maximum value to the strange order list\n            strange_order.append(max_val)\n    \n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    new_lst = [] # create an empty list to store the strange order\n    while lst:\n        new_lst.append(lst.pop(0)) # append the minimum value to the new list\n        if lst: # check if there are still elements in the list\n            new_lst.append(lst.pop(-1)) # append the maximum value to the new list\n    return new_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value\n        if lst:  # if there are remaining elements in the list\n            result.append(lst.pop())  # append the maximum value\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(lst)\n    result = []\n    for i in range(n // 2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n - i - 1])\n    if n % 2 == 1:\n        result.append(sorted_lst[n // 2])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0)) # append the minimum value\n        if sorted_lst:\n            result.append(sorted_lst.pop()) # append the maximum value\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            result.append(max_value)\n            lst.remove(max_value)\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst = sorted(lst)\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Create an empty list to store the strange sorted order\n    \n    while lst: # Continue the loop until lst is empty\n        result.append(lst.pop(0)) # Append the minimum value to the result list\n        if lst: # Check if lst is not empty\n            result.append(lst.pop()) # Append the maximum value to the result list\n            \n    return result"
        ],
        "3": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_lst = []\n    while sorted_lst:\n        strange_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            strange_lst.append(sorted_lst.pop())\n    return strange_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # sort the list in ascending order\n    result = []  # create an empty list to store the strange order\n    \n    while sorted_lst:  # repeat until sorted_lst is empty\n        result.append(sorted_lst.pop(0))  # append the minimum value to the result\n        if sorted_lst:  # if sorted_lst is not empty\n            result.append(sorted_lst.pop())  # append the maximum value to the result\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst: # loop until the sorted list is empty\n        result.append(sorted_lst.pop(0)) # append the minimum value to the result\n        if sorted_lst: # check if there are still elements in the sorted list\n            result.append(sorted_lst.pop()) # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    result = []\n    \n    for i in range(n//2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[n-i-1])\n        \n    if n % 2 != 0:\n        result.append(sorted_lst[n//2])\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    \n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    \n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while len(sorted_lst) > 0:\n        result_lst.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted order\n    while lst:  # continue until lst is empty\n        result.append(lst.pop(0))  # append the minimum value to result\n        if lst:  # check if lst is not empty\n            result.append(lst.pop())  # append the maximum value to result\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    n = len(lst)\n    result = []\n    i = 0\n    while i < n:\n        result.append(lst[i])\n        if i+1 < n:\n            result.append(lst[n-1])\n        i += 1\n        n -= 1\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"
        ],
        "4": [
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0)) # get the minimum value and add it to the result\n        if sorted_lst: # check if there are still elements in the list\n            result.append(sorted_lst.pop()) # get the maximum value and add it to the result\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    sorted_lst = []\n    while lst:  # Repeat until the list is empty\n        sorted_lst.append(lst.pop(0))  # Append the minimum value to the sorted list\n        if lst:  # If there are remaining integers in the list\n            sorted_lst.append(lst.pop())  # Append the maximum value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    sorted_list = [] # create an empty list to store the strange sorted order\n\n    # iterate over the list\n    while lst:\n        sorted_list.append(lst.pop(0)) # add the minimum value to the sorted_list\n        if lst: # check if there are more elements in the list\n            sorted_list.append(lst.pop()) # add the maximum value to the sorted_list\n\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort() #sort the list in ascending order\n\n    while len(lst) > 0:\n        result.append(lst.pop(0)) #append the minimum value to result\n        if len(lst) > 0:\n            result.append(lst.pop()) #append the maximum value to result\n\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_list = []\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 1:\n        result.append(lst.pop(0))\n        result.append(lst.pop())\n    if len(lst) == 1:\n        result.append(lst[0])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Initialize an empty result list\n    result = []\n    \n    # Iterate through the list, adding values in the strange order\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        \n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # create an empty list to store the strange sorted list\n    while sorted_lst: # while there are elements in the sorted list\n        result.append(sorted_lst.pop(0)) # remove the first element (minimum) and add it to the result list\n        if sorted_lst: # if there are still elements in the sorted list\n            result.append(sorted_lst.pop()) # remove the last element (maximum) and add it to the result list\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    n = len(lst)\n    i = 0\n    j = n - 1\n    result = []\n    while i < j:\n        result.append(lst[i])\n        result.append(lst[j])\n        i += 1\n        j -= 1\n    if i == j:\n        result.append(lst[i])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        if min_val != max_val:\n            sorted_lst.append(max_val)\n        lst.remove(min_val)\n        if min_val != max_val:\n            lst.remove(max_val)\n    return sorted_lst\n\nassert strange_sort_list([-5, -3, -2, -4, -1]) == [-5, -1, -4, -2, -3]\nassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 6, 2, 5, 3, 4]"
        ]
    }
}