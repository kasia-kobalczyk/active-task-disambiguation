{
    "0": {
        "0": [
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    \n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        \n        sorted_lst.append(min_val)\n        if min_val == max_val:\n            break\n        sorted_lst.append(max_val)\n        \n        lst.remove(min_val)\n        lst.remove(max_val)\n        \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_list.append(min_val)\n        sorted_list.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    \n    # create an empty list to store the strange sorted elements\n    result = []\n    \n    # initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # append the element at the left pointer to the result list\n        result.append(lst[left])\n        \n        # increment the left pointer\n        left += 1\n        \n        # if the left pointer is now greater than the right pointer, break out of the loop\n        if left > right:\n            break\n        \n        # append the element at the right pointer to the result list\n        result.append(lst[right])\n        \n        # decrement the right pointer\n        right -= 1\n    \n    # return the strange sorted list\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        result.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    sorted_lst = sorted(lst)\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        sorted_lst.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            sorted_lst.append(max_value)\n            lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        sorted_lst.append(min_value)\n        sorted_lst.append(max_value)\n        lst.remove(min_value)\n        lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    \n    while lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        sorted_list.append(minimum)\n        sorted_list.append(maximum)\n        lst.remove(minimum)\n        lst.remove(maximum)\n    \n    return sorted_list",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        if min_val != max_val:\n            result.append(max_val)\n        lst.remove(min_val)\n        if min_val != max_val:\n            lst.remove(max_val)\n    return result"
        ],
        "1": [
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted values\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value to the result\n        if lst:\n            result.append(lst.pop())  # append the maximum value to the result\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # initialize two pointers: one at the beginning of the list and one at the end\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # create an empty result list\n    result = []\n    \n    # iterate while there are still elements in the sorted list\n    while left <= right:\n        # add the minimum value to the result list\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # check if there are still elements in the sorted list\n        if left <= right:\n            # add the maximum value to the result list\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(sorted_lst[i // 2])\n        else:\n            result.append(sorted_lst[-(i // 2 + 1)])\n    return result",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the strange order\n    \n    while lst:\n        result.append(lst.pop(0)) # Add the smallest number to the result\n        if lst: # If there are remaining numbers\n            result.append(lst.pop(-1)) # Add the largest number to the result\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        min_val = lst.pop(0)\n        max_val = lst.pop() if lst else None\n        sorted_lst.append(min_val)\n        if max_val:\n            sorted_lst.append(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        min_val = lst.pop(0)\n        sorted_lst.append(min_val)\n        if len(lst) > 0:\n            max_val = lst.pop()\n            sorted_lst.append(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sorting the list in ascending order\n    result = [] # creating an empty list to store the strange sorted values\n    while lst: # loop until the list is empty\n        result.append(lst.pop(0)) # append the first element (minimum value) to the result list\n        if lst: # if the list is not empty after removing the first element\n            result.append(lst.pop()) # append the last element (maximum value) to the result list\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    sorted_lst = []  # create an empty list to store the sorted values\n    while lst:  # continue the loop until lst is empty\n        sorted_lst.append(lst.pop(0))  # add the first element (minimum) to sorted_lst\n        if lst:  # check if lst is not empty\n            sorted_lst.append(lst.pop(-1))  # add the last element (maximum) to sorted_lst\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        minimum = min(lst)\n        sorted_list.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list"
        ],
        "2": [
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    result = []  # Create an empty list to store the strange sorted order\n\n    while lst:\n        result.append(lst.pop(0))  # Add the minimum value to the result list\n\n        if lst:  # Check if there are remaining elements in the list\n            result.append(lst.pop())  # Add the maximum value to the result list\n\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    if sorted_lst:\n        result.append(sorted_lst[0])\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    result = []  # Initialize an empty list to store the strange sorted elements\n    while lst:  # Loop until all elements are removed from the original list\n        result.append(lst.pop(0))  # Add the first (minimum) element to the result\n        if lst:  # Check if there are remaining elements in the list\n            result.append(lst.pop())  # Add the last (maximum) element to the result\n    return result  # Return the strange sorted list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"
        ],
        "3": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    \n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n            \n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty result list\n    result = []\n    \n    # Iterate over the sorted list\n    while len(lst) > 0:\n        # Add the minimum value to the result list\n        result.append(lst.pop(0))\n        \n        # If there are still elements in the list\n        if len(lst) > 0:\n            # Add the maximum value to the result list\n            result.append(lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_sorted_lst = []\n\n    while len(sorted_lst) > 0:\n        min_value = sorted_lst.pop(0)\n        strange_sorted_lst.append(min_value)\n\n        if len(sorted_lst) > 0:\n            max_value = sorted_lst.pop()\n            strange_sorted_lst.append(max_value)\n\n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize two pointers, one at the beginning of the list and one at the end\n    left = 0\n    right = len(lst) - 1\n\n    # Create an empty list to store the strange sorted order\n    strange_sorted = []\n\n    # Loop until the left and right pointers meet in the middle\n    while left <= right:\n        # Append the minimum value to the strange_sorted list\n        strange_sorted.append(lst[left])\n\n        # Increment the left pointer\n        left += 1\n\n        # Check if the left pointer has crossed the right pointer\n        if left > right:\n            break\n\n        # Append the maximum value to the strange_sorted list\n        strange_sorted.append(lst[right])\n\n        # Decrement the right pointer\n        right -= 1\n\n    return strange_sorted",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    \n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # initialize an empty list to store the sorted values in strange order\n    \n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result list\n        result.append(sorted_lst.pop(-1)) # add the maximum value to the result list\n    \n    if len(sorted_lst) == 1:\n        result.append(sorted_lst[0]) # add the remaining value to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # Sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0)) # Append the minimum value to the sorted_lst\n        if lst: # Check if there are still values in lst\n            sorted_lst.append(lst.pop()) # Append the maximum value to the sorted_lst\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        \n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())        \n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst"
        ],
        "4": [
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the sorted elements\n\n    while lst:  # while there are still elements in the list\n        result.append(lst.pop(0))  # append the first element (minimum value) to the result list\n        if lst:  # if there are still elements remaining in the list\n            result.append(lst.pop())  # append the last element (maximum value) to the result list\n\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # create an empty list to store the strange sorted order\n    while sorted_lst: # while there are still elements in the sorted list\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result list and remove it from the sorted list\n        if sorted_lst: # if there are still elements in the sorted list\n            result.append(sorted_lst.pop()) # add the maximum value to the result list and remove it from the sorted list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_lst = []\n    while sorted_lst:\n        min_val = sorted_lst.pop(0)\n        strange_lst.append(min_val)\n        if sorted_lst:\n            max_val = sorted_lst.pop()\n            strange_lst.append(max_val)\n    return strange_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # sort the list in ascending order\n    result = []  # create an empty list to store the sorted elements in strange order\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # add the minimum value to the result list\n        if sorted_lst:  # check if there are more elements in the sorted list\n            result.append(sorted_lst.pop())  # add the maximum value to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # initialize an empty list to store the strange sorted list\n    \n    # iterate through the sorted list\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0)) # remove the minimum value and add it to the result list\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop()) # remove the maximum value and add it to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst"
        ]
    },
    "1": {
        "0": [
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        sorted_lst.append(min_value)\n        sorted_lst.append(max_value)\n        lst.remove(min_value)\n        lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    \n    while lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        sorted_list.append(minimum)\n        sorted_list.append(maximum)\n        lst.remove(minimum)\n        lst.remove(maximum)\n    \n    return sorted_list",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        minimum = min(lst)\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_lst.append(maximum)\n            lst.remove(maximum)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        if min_val != max_val:\n            result.append(max_val)\n        lst.remove(min_val)\n        if min_val != max_val:\n            lst.remove(max_val)\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the result\n    while lst: # Loop until the list is empty\n        result.append(lst.pop(0)) # Append the minimum value to the result list\n        if lst: # Check if the list is not empty\n            result.append(lst.pop(-1)) # Append the maximum value to the result list\n    return result # Return the result list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    # create a new list to store the strange order\n    strange_order = []\n    # iterate over the list and add the minimum value to the strange order list\n    # then remove the minimum value from the original list\n    while lst:\n        strange_order.append(lst.pop(0))\n        # if there are still values in the list, add the maximum value\n        if lst:\n            strange_order.append(lst.pop())\n    # return the strange order list\n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted list\n    while len(lst) > 0:  # while there are still elements in the original list\n        result.append(lst.pop(0))  # add the first element (minimum) to the result list and remove it from the original list\n        if len(lst) > 0:  # if there are still elements in the original list\n            result.append(lst.pop())  # add the last element (maximum) to the result list and remove it from the original list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Create an empty list to store the result\n    \n    # Start with the minimum value\n    # and add the maximum value of the remaining integers,\n    # then add the minimum value and so on\n    while len(lst) > 0:\n        result.append(lst.pop(0)) # Add the minimum value\n        if len(lst) > 0:\n            result.append(lst.pop()) # Add the maximum value\n            \n    return result"
        ],
        "1": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        min_val = lst.pop(0)\n        sorted_lst.append(min_val)\n        if len(lst) > 0:\n            max_val = lst.pop()\n            sorted_lst.append(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # sorting the list in ascending order\n    result = [] # creating an empty list to store the strange sorted list\n    while lst: # loop until the list is empty\n        result.append(lst.pop(0)) # append the first element (minimum value) to the result\n        if lst: # if there are still elements remaining in the list\n            result.append(lst.pop()) # append the last element (maximum value) to the result\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    sorted_lst = []  # create an empty list to store the sorted values\n    while lst:  # continue the loop until lst is empty\n        sorted_lst.append(lst.pop(0))  # add the first element (minimum) to sorted_lst\n        if lst:  # check if lst is not empty\n            sorted_lst.append(lst.pop(-1))  # add the last element (maximum) to sorted_lst\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # sort the list in ascending order\n\n    while lst:\n        sorted_lst.append(lst.pop(0))  # add minimum value to sorted list\n        if lst:\n            sorted_lst.append(lst.pop())  # add maximum value to sorted list\n\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        minimum = min(lst)\n        sorted_list.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty result list\n    result = []\n\n    # Iterate through the sorted list\n    while len(lst) > 0:\n        # Append the minimum value to the result list\n        result.append(lst[0])\n        # Remove the minimum value from the sorted list\n        lst = lst[1:]\n\n        # If there are still elements in the sorted list\n        if len(lst) > 0:\n            # Append the maximum value to the result list\n            result.append(lst[-1])\n            # Remove the maximum value from the sorted list\n            lst = lst[:-1]\n\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # sort the list in ascending order\n    while lst:\n        # append the minimum value to the sorted list\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            # append the maximum value to the sorted list\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []  # Initialize an empty list to store the strange order\n    \n    while len(sorted_lst) > 0:  # Continue until all elements are added to the result list\n        result.append(sorted_lst.pop(0))  # Add the minimum value to the result list\n        \n        if len(sorted_lst) > 0:  # Check if there are remaining elements in the sorted list\n            result.append(sorted_lst.pop())  # Add the maximum value to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"
        ],
        "2": [
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    result = []  # Create an empty list to store the strange sorted order\n\n    while lst:  # Continue until the list is empty\n        result.append(lst.pop(0))  # Append the minimum value to the result list\n        if lst:  # If the list is not empty\n            result.append(lst.pop())  # Append the maximum value to the result list\n\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    if sorted_lst:\n        result.append(sorted_lst[0])\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    result = []  # Initialize an empty list to store the strange sorted elements\n    while lst:  # Loop until all elements are removed from the original list\n        result.append(lst.pop(0))  # Add the first (minimum) element to the result\n        if lst:  # Check if there are remaining elements in the list\n            result.append(lst.pop())  # Add the last (maximum) element to the result\n    return result  # Return the strange sorted list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 1:\n        result.append(lst.pop(0))\n        result.append(lst.pop(-1))\n    if len(lst) == 1:\n        result.append(lst.pop())\n    return result"
        ],
        "3": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    \n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n            \n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty result list\n    result = []\n    \n    # Iterate over the sorted list\n    while len(lst) > 0:\n        # Add the minimum value to the result list\n        result.append(lst.pop(0))\n        \n        # If there are still elements in the list\n        if len(lst) > 0:\n            # Add the maximum value to the result list\n            result.append(lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_sorted_lst = []\n\n    while len(sorted_lst) > 0:\n        min_value = sorted_lst.pop(0)\n        strange_sorted_lst.append(min_value)\n\n        if len(sorted_lst) > 0:\n            max_value = sorted_lst.pop()\n            strange_sorted_lst.append(max_value)\n\n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize two pointers, one at the beginning of the list and one at the end\n    left = 0\n    right = len(lst) - 1\n\n    # Create an empty list to store the strange sorted order\n    strange_sorted = []\n\n    # Loop until the left and right pointers meet in the middle\n    while left <= right:\n        # Append the minimum value to the strange_sorted list\n        strange_sorted.append(lst[left])\n\n        # Increment the left pointer\n        left += 1\n\n        # Check if the left pointer has crossed the right pointer\n        if left > right:\n            break\n\n        # Append the maximum value to the strange_sorted list\n        strange_sorted.append(lst[right])\n\n        # Decrement the right pointer\n        right -= 1\n\n    return strange_sorted",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    \n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # initialize an empty list to store the sorted values in strange order\n    \n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result list\n        result.append(sorted_lst.pop(-1)) # add the maximum value to the result list\n    \n    if len(sorted_lst) == 1:\n        result.append(sorted_lst[0]) # add the remaining value to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # Sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0)) # Append the minimum value to the sorted_lst\n        if lst: # Check if there are still values in lst\n            sorted_lst.append(lst.pop()) # Append the maximum value to the sorted_lst\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        \n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())        \n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty result list\n    result = []\n\n    # Iterate through the list\n    while lst:\n        # Append the minimum value to the result list\n        result.append(lst.pop(0))\n\n        # If there are still elements in the list, append the maximum value to the result list\n        if lst:\n            result.append(lst.pop())\n\n    # Return the result list\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange ordered list\n    \n    while len(lst) > 1:\n        result.append(lst.pop(0))  # add the first element (minimum value) to the result list\n        result.append(lst.pop())  # add the last element (maximum value) to the result list\n\n    if lst:  # if there is a remaining element in the list\n        result.append(lst[0])  # add it to the result list\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop(-1))\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # create an empty list to store the strange sorted list\n    \n    while sorted_lst: # while the sorted_lst is not empty\n        result.append(sorted_lst.pop(0)) # add the minimum value to result\n        if sorted_lst: # check if sorted_lst is not empty\n            result.append(sorted_lst.pop()) # add the maximum value to result\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # sort the input list in ascending order\n    while lst: # while the list is not empty\n        sorted_lst.append(lst.pop(0)) # add the minimum value to the sorted list\n        if lst: # if the list is not empty\n            sorted_lst.append(lst.pop()) # add the maximum value to the sorted list\n    return sorted_lst"
        ],
        "4": [
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # create an empty list to store the strange sorted order\n    while sorted_lst: # while there are still elements in the sorted list\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result list and remove it from the sorted list\n        if sorted_lst: # if there are still elements in the sorted list\n            result.append(sorted_lst.pop()) # add the maximum value to the result list and remove it from the sorted list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_lst = []\n    while sorted_lst:\n        min_val = sorted_lst.pop(0)\n        strange_lst.append(min_val)\n        if sorted_lst:\n            max_val = sorted_lst.pop()\n            strange_lst.append(max_val)\n    return strange_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # initialize an empty list to store the strange sorted list\n    \n    # iterate through the sorted list\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0)) # remove the minimum value and add it to the result list\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop()) # remove the maximum value and add it to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 1:\n        sorted_lst.append(lst.pop(0))\n        sorted_lst.append(lst.pop(-1))\n    if lst:\n        sorted_lst.append(lst.pop(0))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    if sorted_lst:\n        result.append(sorted_lst[0])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = []\n    while len(lst) > 1:\n        result.append(lst.pop(0)) # Append the minimum value\n        result.append(lst.pop()) # Append the maximum value\n    if len(lst) == 1:\n        result.append(lst[0]) # Append the last remaining value if there is any\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"
        ]
    },
    "2": {
        "0": [
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        if len(lst) > 0:\n            max_value = max(lst)\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Initialize an empty list to store the result\n    while lst: # Loop until the list is empty\n        result.append(lst.pop(0)) # Append the minimum value to the result list\n        if lst: # Check if the list is not empty\n            result.append(lst.pop(-1)) # Append the maximum value to the result list\n    return result # Return the result list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    # create a new list to store the strange order\n    strange_order = []\n    # iterate over the list and add the minimum value to the strange order list\n    # then remove the minimum value from the original list\n    while lst:\n        strange_order.append(lst.pop(0))\n        # if there are still values in the list, add the maximum value\n        if lst:\n            strange_order.append(lst.pop())\n    # return the strange order list\n    return strange_order",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange sorted list\n    while len(lst) > 0:  # while there are still elements in the original list\n        result.append(lst.pop(0))  # add the first element (minimum) to the result list and remove it from the original list\n        if len(lst) > 0:  # if there are still elements in the original list\n            result.append(lst.pop())  # add the last element (maximum) to the result list and remove it from the original list\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = [] # Create an empty list to store the result\n    \n    # Start with the minimum value\n    # and add the maximum value of the remaining integers,\n    # then add the minimum value and so on\n    while len(lst) > 0:\n        result.append(lst.pop(0)) # Add the minimum value\n        if len(lst) > 0:\n            result.append(lst.pop()) # Add the maximum value\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()  # sort the list in ascending order\n    while lst:\n        result.append(lst.pop(0))  # append the minimum value to the result list\n        if lst:  # check if there are remaining integers in the list\n            result.append(lst.pop())  # append the maximum value to the result list\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_list = []\n    \n    while lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        \n        sorted_list.append(min_value)\n        lst.remove(min_value)\n        \n        if lst:\n            sorted_list.append(max_value)\n            lst.remove(max_value)\n    \n    return sorted_list",
            "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n\n    result = [] # Create an empty list to store the sorted values\n\n    lst.sort() # Sort the input list in ascending order\n\n    while len(lst) > 0: # Repeat until the input list is empty\n\n        result.append(lst.pop(0)) # Add the minimum value to the result list\n\n        if len(lst) > 0: # Check if the input list is not empty\n\n            result.append(lst.pop()) # Add the maximum value to the result list\n\n    return result"
        ],
        "1": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    sorted_lst = []  # create an empty list to store the sorted values\n    while lst:  # continue the loop until lst is empty\n        sorted_lst.append(lst.pop(0))  # add the first element (minimum) to sorted_lst\n        if lst:  # check if lst is not empty\n            sorted_lst.append(lst.pop(-1))  # add the last element (maximum) to sorted_lst\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()  # sort the list in ascending order\n\n    while lst:\n        sorted_lst.append(lst.pop(0))  # add minimum value to sorted list\n        if lst:\n            sorted_lst.append(lst.pop())  # add maximum value to sorted list\n\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_list.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        minimum = min(lst)\n        sorted_list.append(minimum)\n        lst.remove(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty result list\n    result = []\n\n    # Iterate through the sorted list\n    while len(lst) > 0:\n        # Append the minimum value to the result list\n        result.append(lst[0])\n        # Remove the minimum value from the sorted list\n        lst = lst[1:]\n\n        # If there are still elements in the sorted list\n        if len(lst) > 0:\n            # Append the maximum value to the result list\n            result.append(lst[-1])\n            # Remove the maximum value from the sorted list\n            lst = lst[:-1]\n\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        min_val = lst.pop(0)\n        sorted_lst.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            sorted_lst.append(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []  # Initialize an empty list to store the strange order\n    \n    while len(sorted_lst) > 0:  # Continue until all elements are added to the result list\n        result.append(sorted_lst.pop(0))  # Add the minimum value to the result list\n        \n        if len(sorted_lst) > 0:  # Check if there are remaining elements in the sorted list\n            result.append(sorted_lst.pop())  # Add the maximum value to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    lst.sort()\n    \n    # create an empty list to store the strange sorted order\n    strange_sorted_lst = []\n    \n    # iterate over the sorted list\n    while len(lst) > 0:\n        # add the minimum value to the strange sorted list\n        strange_sorted_lst.append(lst.pop(0))\n        \n        # if there are still elements in the list, add the maximum value to the strange sorted list\n        if len(lst) > 0:\n            strange_sorted_lst.append(lst.pop())\n    \n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # sort the list in ascending order\n    n = len(sorted_lst)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:  # even index\n            result.append(sorted_lst[i // 2])\n        else:  # odd index\n            result.append(sorted_lst[-((i + 1) // 2)])\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # initialize an empty result list\n    result = []\n    \n    # loop through the sorted list\n    while sorted_lst:\n        # append the minimum value to the result list\n        result.append(sorted_lst.pop(0))\n        \n        # if there are still elements in the sorted list\n        if sorted_lst:\n            # append the maximum value to the result list\n            result.append(sorted_lst.pop(-1))\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_value = min(lst)\n        sorted_lst.append(min_value)\n        lst.remove(min_value)\n        if lst:\n            max_value = max(lst)\n            sorted_lst.append(max_value)\n            lst.remove(max_value)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"
        ],
        "2": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 1:\n        result.append(lst.pop(0))\n        result.append(lst.pop(-1))\n    if len(lst) == 1:\n        result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)  # sort the list in ascending order\n    result = []  # initialize an empty list to store the sorted values\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))  # append the first element (minimum value) to the result list\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())  # append the last element (maximum value) to the result list\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    n = len(lst)\n    result = []\n    for i in range(n//2):\n        result.append(lst[i])\n        result.append(lst[n-1-i])\n    if n % 2 == 1:\n        result.append(lst[n//2])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    # sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # initialize empty result list\n    result = []\n    \n    # loop until all elements are moved to the result list\n    while sorted_lst:\n        # move the minimum value to the result list\n        result.append(sorted_lst.pop(0))\n        \n        # if there are remaining elements in sorted_lst, move the maximum value to the result list\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        sorted_list.append(minimum)\n        if minimum != maximum:\n            sorted_list.append(maximum)\n        lst.remove(minimum)\n        if minimum != maximum:\n            lst.remove(maximum)\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst"
        ],
        "3": [
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize two pointers, one at the beginning of the list and one at the end\n    left = 0\n    right = len(lst) - 1\n\n    # Create an empty list to store the strange sorted order\n    strange_sorted = []\n\n    # Loop until the left and right pointers meet in the middle\n    while left <= right:\n        # Append the minimum value to the strange_sorted list\n        strange_sorted.append(lst[left])\n\n        # Increment the left pointer\n        left += 1\n\n        # Check if the left pointer has crossed the right pointer\n        if left > right:\n            break\n\n        # Append the maximum value to the strange_sorted list\n        strange_sorted.append(lst[right])\n\n        # Decrement the right pointer\n        right -= 1\n\n    return strange_sorted",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    \n    while len(lst) > 0:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        \n        if len(lst) > 0:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # initialize an empty list to store the sorted values in strange order\n    \n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0)) # add the minimum value to the result list\n        result.append(sorted_lst.pop(-1)) # add the maximum value to the result list\n    \n    if len(sorted_lst) == 1:\n        result.append(sorted_lst[0]) # add the remaining value to the result list\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # Sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0)) # Append the minimum value to the sorted_lst\n        if lst: # Check if there are still values in lst\n            sorted_lst.append(lst.pop()) # Append the maximum value to the sorted_lst\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    \n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        \n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())        \n    \n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty result list\n    result = []\n\n    # Iterate through the list\n    while lst:\n        # Append the minimum value to the result list\n        result.append(lst.pop(0))\n\n        # If there are still elements in the list, append the maximum value to the result list\n        if lst:\n            result.append(lst.pop())\n\n    # Return the result list\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()  # sort the list in ascending order\n    result = []  # create an empty list to store the strange ordered list\n    \n    while len(lst) > 1:\n        result.append(lst.pop(0))  # add the first element (minimum value) to the result list\n        result.append(lst.pop())  # add the last element (maximum value) to the result list\n\n    if lst:  # if there is a remaining element in the list\n        result.append(lst[0])  # add it to the result list\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # Sort the list in ascending order\n    while lst:\n        sorted_lst.append(lst.pop(0)) # Append minimum value\n        if lst: # Check if there are still remaining elements in the list\n            sorted_lst.append(lst.pop()) # Append maximum value\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # create an empty list to store the strange sorted list\n    \n    while sorted_lst: # while the sorted_lst is not empty\n        result.append(sorted_lst.pop(0)) # add the minimum value to result\n        if sorted_lst: # check if sorted_lst is not empty\n            result.append(sorted_lst.pop()) # add the maximum value to result\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # sort the input list in ascending order\n    while lst: # while the list is not empty\n        sorted_lst.append(lst.pop(0)) # add the minimum value to the sorted list\n        if lst: # if the list is not empty\n            sorted_lst.append(lst.pop()) # add the maximum value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n    return sorted_lst",
            "def strange_sort_list(lst):\n    # create an empty list to store the sorted values\n    sorted_lst = []\n    \n    # sort the list in ascending order\n    lst.sort()\n    \n    # iterate through the list\n    while len(lst) > 0:\n        # add the minimum value to the sorted list\n        sorted_lst.append(lst.pop(0))\n        \n        # if the list is still not empty, add the maximum value to the sorted list\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    \n    # return the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort() # Sort the list in ascending order\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0)) # Add the minimum value to the sorted list\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop()) # Add the maximum value to the sorted list\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"
        ],
        "4": [
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n            \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # initialize an empty list to store the strange sorted list\n    \n    # iterate through the sorted list\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0)) # append the minimum value to the result list\n        \n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop()) # append the maximum value to the result list\n        \n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 1:\n        sorted_lst.append(lst.pop(0))\n        sorted_lst.append(lst.pop(-1))\n    if lst:\n        sorted_lst.append(lst.pop(0))\n    return sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    if sorted_lst:\n        result.append(sorted_lst[0])\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result",
            "def strange_sort_list(lst):\n    lst.sort() # Sort the list in ascending order\n    result = []\n    while len(lst) > 1:\n        result.append(lst.pop(0)) # Append the minimum value\n        result.append(lst.pop()) # Append the maximum value\n    if len(lst) == 1:\n        result.append(lst[0]) # Append the last remaining value if there is any\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # sort the list in ascending order\n    result = [] # create an empty list to store the strange sorted list\n    while sorted_lst:\n        result.append(sorted_lst.pop(0)) # append the minimum value\n        if sorted_lst: # check if there are remaining elements in the list\n            result.append(sorted_lst.pop()) # append the maximum value\n    return result",
            "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()  # sort the input list in ascending order\n    while lst:  # repeat until the input list is empty\n        sorted_list.append(lst.pop(0))  # append the minimum value to the sorted list\n        if lst:  # if the input list is not empty\n            sorted_list.append(lst.pop())  # append the maximum value to the sorted list\n    return sorted_list",
            "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop(-1))\n    \n    return result_lst",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst) # Sort the list in ascending order\n    result = []\n    while sorted_lst: # While there are still elements in the sorted list\n        result.append(sorted_lst.pop(0)) # Append the minimum value\n        if sorted_lst: # If there are still elements in the sorted list\n            result.append(sorted_lst.pop()) # Append the maximum value\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
            "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    strange_sorted_lst = []\n    while len(sorted_lst) > 1:\n        strange_sorted_lst.append(sorted_lst.pop(0))\n        strange_sorted_lst.append(sorted_lst.pop(-1))\n    if len(sorted_lst) == 1:\n        strange_sorted_lst.append(sorted_lst[0])\n    return strange_sorted_lst",
            "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst"
        ]
    }
}