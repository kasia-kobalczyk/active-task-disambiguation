{
    "0": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    depths.append(max_depth)\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(current_level)\n            current_level = 0\n    levels.append(current_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                result.append(len(stack))\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into a list of groups\n    groups = paren_string.split()\n\n    # Create a list to store the deepest level of nesting for each group\n    deepest_levels = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize variables to keep track of the current nesting level and the deepest nesting level\n        current_level = 0\n        deepest_level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increase the nesting level\n                current_level += 1\n                # Update the deepest nesting level if necessary\n                if current_level > deepest_level:\n                    deepest_level = current_level\n            elif char == ')':\n                # Decrease the nesting level\n                current_level -= 1\n\n        # Add the deepest nesting level for this group to the result list\n        deepest_levels.append(deepest_level)\n\n    # Return the result list\n    return deepest_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    stack = []\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n\n    depths.append(max_depth)\n\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    output = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        output.append(max_level)\n    return output",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n    levels.append(max_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n    result.append(max_depth)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_nesting = 0\n    nesting_level = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            nesting_level += 1\n            max_nesting = max(max_nesting, nesting_level)\n        elif char == \")\":\n            nesting_level -= 1\n            \n    result.append(max_nesting)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_levels = []\n    for group in paren_string.split(\" \"):\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == \"(\":\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n            elif char == \")\":\n                current_level -= 1\n        max_levels.append(max_level)\n    return max_levels",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the string by spaces to get individual groups\n    groups = paren_string.split()\n    \n    # List to store the deepest level of nesting for each group\n    deepest_levels = []\n    \n    # Iterate over each group\n    for group in groups:\n        # Initialize the current depth and maximum depth to 0\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth when an opening parenthesis is encountered\n                current_depth += 1\n                # Update the max depth if the current depth is greater\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                # Decrement the current depth when a closing parenthesis is encountered\n                current_depth -= 1\n        \n        # Add the max depth for the current group to the list\n        deepest_levels.append(max_depth)\n    \n    # Return the list of deepest levels\n    return deepest_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == \")\":\n            stack.pop()\n        elif char == \" \":\n            levels.append(max_depth)\n            max_depth = 0\n    levels.append(max_depth)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_string = paren_string.split()\n    result = []\n    \n    for group in paren_string:\n        stack = []\n        count = 0\n        max_count = 0\n        \n        for char in group:\n            if char == '(':\n                stack.append(char)\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                    count -= 1\n                else:\n                    return 'Invalid input: Unbalanced parentheses'\n        \n        if stack:\n            return 'Invalid input: Unbalanced parentheses'\n        \n        result.append(max_count)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    \n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    \n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif c == ')':\n            stack.pop()\n            current_depth -= 1\n        elif c == ' ':\n            result.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    result.append(max_depth)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    stack = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            stack.append('(')\n            current_depth = max(current_depth, len(stack))\n        elif c == ')':\n            stack.pop()\n\n    return [current_depth] * len(paren_string.split())",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_levels = []\n    count = 0\n    for paren_group in paren_string.split():\n        max_level = 0\n        for paren in paren_group:\n            if paren == '(':\n                count += 1\n                max_level = max(max_level, count)\n            elif paren == ')':\n                count -= 1\n        max_levels.append(max_level)\n    return max_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    count = 0\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            levels.append(count)\n            count -= 1\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the string by spaces to get individual groups\n    groups = paren_string.split()\n\n    depths = []\n    for group in groups:\n        # Initialize a stack to track the nested parentheses\n        stack = []\n        max_depth = 0\n        current_depth = 0\n\n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Push opening parentheses onto the stack\n                stack.append(char)\n                # Increase the current depth\n                current_depth += 1\n                # Update the max depth if the current depth is greater\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                # Pop the last opening parentheses from the stack\n                stack.pop()\n                # Decrease the current depth\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    level = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            max_depth = max(max_depth, level)\n        elif char == ')':\n            level -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n    depths.append(max_depth)\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    current_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            if current_level > max_level:\n                max_level = current_level\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            max_level = 0\n            current_level = 0\n    \n    levels.append(max_level)\n    \n    return levels",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the deepest level of nesting for each group\n    deepest_levels = []\n\n    # Iterate through each group\n    for group in groups:\n        # Initialize a count variable to keep track of the current level of nesting\n        count = 0\n        # Initialize a maximum count variable to keep track of the deepest level of nesting\n        max_count = 0\n\n        # Iterate through each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the count\n            if char == '(':\n                count += 1\n                # Update the maximum count if the current count is greater than the maximum count\n                if count > max_count:\n                    max_count = count\n            # If the character is a closing parenthesis, decrement the count\n            elif char == ')':\n                count -= 1\n\n        # Append the maximum count to the deepest_levels list\n        deepest_levels.append(max_count)\n\n    # Return the deepest_levels list\n    return deepest_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == \"(\":\n            current_level += 1\n            if current_level > max_level:\n                max_level = current_level\n        elif char == \")\":\n            current_level -= 1\n        elif char == \" \":\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    levels.append(max_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == \"(\":\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == \")\":\n                current_level -= 1\n        result.append(max_level)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    levels = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        levels.append(max_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    max_levels = []\n    for group in paren_groups:\n        max_level = 0\n        curr_level = 0\n        for char in group:\n            if char == '(':\n                curr_level += 1\n                max_level = max(max_level, curr_level)\n            elif char == ')':\n                curr_level -= 1\n        max_levels.append(max_level)\n    return max_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        stack = []\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                    current_depth -= 1\n        \n        result.append(max_depth)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    levels = []\n    \n    for group in paren_groups:\n        level = 0\n        max_level = 0\n        \n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n            \n            max_level = max(max_level, level)\n        \n        levels.append(max_level)\n    \n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == \")\":\n            current_depth -= 1\n        elif char == \" \":\n            depths.append(max_depth)\n            current_depth = 0\n            max_depth = 0\n    depths.append(max_depth)\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    max_level = 0\n    level = 0\n    for char in paren_string:\n        if char == \"(\":\n            level += 1\n            max_level = max(max_level, level)\n        elif char == \")\":\n            level -= 1\n        elif char == \" \":\n            result.append(max_level)\n            max_level = 0\n            level = 0\n    result.append(max_level)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == \")\":\n            current_depth -= 1\n        \n        if char == \" \":\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    depths.append(max_depth)\n    \n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_level = 0\n    current_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            if current_level > max_level:\n                max_level = current_level\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            result.append(max_level)\n            max_level = 0\n            current_level = 0\n    \n    result.append(max_level)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    for group in paren_string.split(' '):\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        levels.append(max_level)\n    return levels",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    curr_level = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            curr_level += 1\n            max_level = max(max_level, curr_level)\n        elif char == \")\":\n            curr_level -= 1\n        \n        if char == \" \":\n            levels.append(max_level)\n            max_level = 0\n            curr_level = 0\n    \n    levels.append(max_level)\n    \n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        result.append(max_depth)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    for group in paren_string.split():\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        levels.append(max_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    curr_depth = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n        elif char == \")\":\n            curr_depth -= 1\n        elif char == \" \":\n            depths.append(max_depth)\n            max_depth = 0\n            curr_depth = 0\n    \n    depths.append(max_depth)\n    \n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    output = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        output.append(max_depth)\n    return output",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths",
            "logp": null
        }
    ]
}