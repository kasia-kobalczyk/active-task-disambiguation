{
    "0": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    level = 0\n    for char in paren_string:\n        if char == \"(\":\n            level += 1\n            max_level = max(max_level, level)\n        elif char == \")\":\n            level -= 1\n    levels.append(max_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depth_list = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n            depth_list.append(depth)\n            depth = 0\n    depth_list.append(depth)\n    return depth_list",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        \n        if char == ' ':\n            depths.append(max_depth)\n            current_depth = 0\n            max_depth = 0\n    \n    depths.append(max_depth)\n    \n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    result = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    result.append(max_depth)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Initialize an empty list to store the results\n    levels = []\n    # Initialize a variable to keep track of the current level\n    current_level = 0\n    # Iterate through each character in the paren_string\n    for char in paren_string:\n        # If the character is an opening parenthesis, increase the current level by 1\n        if char == '(':\n            current_level += 1\n        # If the character is a closing parenthesis, add the current level to the levels list and decrease the current level by 1\n        elif char == ')':\n            levels.append(current_level)\n            current_level -= 1\n    # Return the levels list\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    depths.append(max_depth)\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(current_level)\n            current_level = 0\n    levels.append(current_level)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                result.append(len(stack))\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into a list of groups\n    groups = paren_string.split()\n\n    # Create a list to store the deepest level of nesting for each group\n    deepest_levels = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize variables to keep track of the current nesting level and the deepest nesting level\n        current_level = 0\n        deepest_level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increase the nesting level\n                current_level += 1\n                # Update the deepest nesting level if necessary\n                if current_level > deepest_level:\n                    deepest_level = current_level\n            elif char == ')':\n                # Decrease the nesting level\n                current_level -= 1\n\n        # Add the deepest nesting level for this group to the result list\n        deepest_levels.append(deepest_level)\n\n    # Return the result list\n    return deepest_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    stack = []\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n\n    depths.append(max_depth)\n\n    return depths",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \")\n    levels = []\n\n    for group in paren_groups:\n        count = 0\n        max_count = 0\n\n        for char in group:\n            if char == \"(\":\n                count += 1\n                max_count = max(max_count, count)\n            elif char == \")\":\n                count -= 1\n\n        levels.append(max_count)\n\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_nesting = 0\n        nesting = 0\n        for char in group:\n            if char == '(':\n                nesting += 1\n                max_nesting = max(max_nesting, nesting)\n            elif char == ')':\n                nesting -= 1\n        result.append(max_nesting)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    deepest_levels = []\n    for group in paren_groups:\n        stack = []\n        deepest_level = 0\n        for char in group:\n            if char == \"(\":\n                stack.append(char)\n                deepest_level = max(deepest_level, len(stack))\n            elif char == \")\":\n                stack.pop()\n        deepest_levels.append(deepest_level)\n    return deepest_levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    count = 0\n    max_count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count > max_count:\n                max_count = count\n        elif char == ')':\n            count -= 1\n        elif char == ' ':\n            result.append(max_count)\n            max_count = 0\n    result.append(max_count)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split(' ')\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for c in group:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    count = 0\n    max_count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            max_count = max(max_count, count)\n        elif char == ')':\n            count -= 1\n        elif char == ' ':\n            levels.append(max_count)\n            max_count = 0\n    levels.append(max_count)\n    return levels",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    count = 0\n    max_count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count > max_count:\n                max_count = count\n        elif char == ')':\n            count -= 1\n        elif char == ' ':\n            result.append(max_count)\n            max_count = 0\n    result.append(max_count)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            result.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    result.append(max_depth)\n    \n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    count = 0\n    max_count = 0\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            max_count = max(count, max_count)\n        elif char == \")\":\n            count -= 1\n        elif char == \" \":\n            result.append(max_count)\n            max_count = 0\n    result.append(max_count)\n    return result",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == \"(\":\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == \")\":\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Initialize a list to store the deepest level of nesting for each group\n    result = []\n    \n    # Split the input string into individual groups\n    groups = paren_string.split()\n    \n    # Iterate through each group\n    for group in groups:\n        # Initialize a variable to store the current depth of nesting\n        depth = 0\n        \n        # Initialize a variable to store the maximum depth of nesting\n        max_depth = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increase the depth\n            if char == \"(\":\n                depth += 1\n                # Update the maximum depth if the current depth is greater\n                if depth > max_depth:\n                    max_depth = depth\n            # If the character is a closing parenthesis, decrease the depth\n            elif char == \")\":\n                depth -= 1\n        \n        # Append the maximum depth to the result list\n        result.append(max_depth)\n    \n    # Return the result list\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            count += 1\n        elif char == ')':\n            stack.pop()\n        elif char == ' ':\n            result.append(count)\n            count = 0\n    result.append(count)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_nesting = 0\n    current_nesting = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            current_nesting += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif char == \")\":\n            current_nesting -= 1\n        \n        if char == \" \":\n            result.append(max_nesting)\n            max_nesting = 0\n            current_nesting = 0\n    \n    result.append(max_nesting)\n    return result",
            "logp": null
        },
        {
            "content": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # split the string by spaces to get individual groups\n    groups = paren_string.split()\n\n    result = []\n    for group in groups:\n        # initialize count and max_count to 0\n        count = 0\n        max_count = 0\n\n        # iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # increment count when opening parentheses is encountered\n                count += 1\n            elif char == ')':\n                # decrement count when closing parentheses is encountered\n                count -= 1\n\n            # update max_count with the maximum value of count\n            max_count = max(max_count, count)\n\n        # append max_count to the result list\n        result.append(max_count)\n\n    return result",
            "logp": null
        }
    ]
}