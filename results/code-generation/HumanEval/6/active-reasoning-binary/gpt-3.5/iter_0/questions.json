{
    "0": [
        "assert parse_nested_parens(\"(() ()() ((())\") == [2, 1, 2]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"() ()() ()((()))\") == [1, 1, 3]",
        "assert parse_nested_parens(\"() () ()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"() () ((())) ()\") == [1, 1, 3, 1]",
        "assert parse_nested_parens(\"()()()\") == [0]",
        "assert parse_nested_parens(\"\") == []",
        "assert parse_nested_parens(\"((()))\") == [3]"
    ],
    "1": [
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"((()(())))\") == [4]",
        "assert parse_nested_parens(\"() ()\") == [1, 1]",
        "assert parse_nested_parens(\"(())\") == [2], \"Test Case 2 Failed\"",
        "assert parse_nested_parens(\"()()\") == [1, 1], \"Test Case 3 Failed\"",
        "assert parse_nested_parens(\"((()))(())\") == [3, 2], \"Test Case 4 Failed\"",
        "assert parse_nested_parens(\"() () ()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"((()))()\") == [3, 1], \"Test Case 5 Failed\"",
        "assert parse_nested_parens(\"()()()\") == [1, 1, 1], \"Test Case 1 Failed\""
    ],
    "2": [
        "assert parse_nested_parens(\"(((()))) ()\") == [4, 1]",
        "assert parse_nested_parens(\"((()) (()())())\") == [3, 2]",
        "assert parse_nested_parens(\"(((())())())\") == [4]",
        "assert parse_nested_parens(\"()() ()() ()()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"(((() ())()())(()()))\") == [5, 4]",
        "assert parse_nested_parens(\"((()())()) ((()()))\") == [3, 2, 3]",
        "assert parse_nested_parens(\"\") == []",
        "assert parse_nested_parens(\"((()())())\") == [3, 2]",
        "assert parse_nested_parens(\"() () () ()\") == [1, 1, 1, 1]"
    ],
    "3": [
        "assert parse_nested_parens(\"(((())))\") == [4]",
        "assert parse_nested_parens(\"()() ()()()\") == [1, 1, 1, 1]",
        "assert parse_nested_parens(\"()()()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"((())) (()) (())\") == [3, 1, 1]",
        "assert parse_nested_parens(\"() () () ()\") == [1, 1, 1, 1]"
    ]
}