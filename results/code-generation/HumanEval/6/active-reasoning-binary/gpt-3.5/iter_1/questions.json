{
    "0": [
        "assert parse_nested_parens(\"()() (())\") == [1, 2]",
        "assert parse_nested_parens(\"()() ()()\") == [1, 1]",
        "assert parse_nested_parens(\"(() (()()))\") == [2, 3]",
        "assert parse_nested_parens(\"(((())) ((())(())) (()(()))())\") == [4, 5, 3]\n# Therefore, the overall output should be [4, 5, 3].",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"((())) (()((())))\") == [3, 4]",
        "assert parse_nested_parens(\"((()))\") == [3]",
        "assert parse_nested_parens(\"()()\") == [1]",
        "assert parse_nested_parens(\"(()) ()\") == [2, 1]"
    ],
    "1": [
        "assert parse_nested_parens(\"((()())) ()\") == [3, 1]",
        "assert parse_nested_parens(\"((()) ()) ((())) ()\") == [3, 2, 3, 1]",
        "assert parse_nested_parens(\"() ()\") == [1, 1]",
        "assert parse_nested_parens(\"((()())()) ()\") == [3, 2]",
        "assert parse_nested_parens(\"() () ()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"() ((())) ()\") == [1, 3, 1]",
        "assert parse_nested_parens(\"()() ()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"(((()))) () ()\") == [4, 1, 1]",
        "assert parse_nested_parens(\"(((()))) ()\") == [4, 1]"
    ],
    "2": [
        "assert parse_nested_parens(\"((()())) ()\") == [3, 1]",
        "assert parse_nested_parens(\"() ()\") == [1, 1]",
        "assert parse_nested_parens(\"((()())()) ()\") == [3, 2]",
        "assert parse_nested_parens(\"() () ()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"() ((())) ()\") == [1, 3, 1]",
        "assert parse_nested_parens(\"()() ()\") == [1, 1, 1]",
        "assert parse_nested_parens(\"(((()))) () ()\") == [4, 1, 1]",
        "assert parse_nested_parens(\"(((()))) ()\") == [4, 1]"
    ],
    "3": [
        "assert parse_nested_parens(\"() ()\") == [1, 1]",
        "assert parse_nested_parens(\"(()) (()) (())\") == [2, 2, 2]",
        "assert parse_nested_parens(\"(((())))\") == [4]",
        "assert parse_nested_parens(\"() (())\") == [1, 2]",
        "assert parse_nested_parens(\"(())\") == [1]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"((()))\") == [3]",
        "assert parse_nested_parens(\"\") == []",
        "assert parse_nested_parens(\"() ()() (())\") == [1, 1, 2]"
    ]
}