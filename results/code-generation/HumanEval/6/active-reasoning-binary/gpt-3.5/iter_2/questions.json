{
    "0": [
        "assert parse_nested_parens(\"(()) (() (() (() (() () (() (()()(()))))) ()) () (() (()) ))\") == [2, 2, 3, 3, 4, 5, 4, 1, 2], \"Test case 4 failed\"",
        "assert parse_nested_parens(\"() ((())(()))\") == [1, 3]",
        "assert parse_nested_parens(\"((())) (((()))) ((()))\") == [3, 4, 3], \"Test case 2 failed\"",
        "assert parse_nested_parens(\"() (() (() ()))\") == [1, 2, 3], \"Test case 5 failed\"",
        "assert parse_nested_parens(\"((()) () ((())))\") == [2, 1, 3], \"Test case 3 failed\"",
        "assert parse_nested_parens(\"(((())))\") == [4]",
        "assert parse_nested_parens(\"() ()() ((()))\") == [1, 2, 3]",
        "assert parse_nested_parens(\"((((())))) (((()()))) ((())))\") == [6, 5, 3]",
        "assert parse_nested_parens(\"()() ((())) () ()() ((()))\") == [1, 3, 1, 2]",
        "assert parse_nested_parens(\"() () ()\") == [1, 1, 1], \"Test case 1 failed\""
    ],
    "1": [
        "assert parse_nested_parens(\"() (())\") == [1, 1]",
        "assert parse_nested_parens(\"() ((())(())) (((((())))))\") == [1, 3, 5]",
        "assert parse_nested_parens(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n# Explanation: The input has four groups with increasing levels of nesting: 1, 2, 3, and 4.",
        "assert parse_nested_parens(\"(()) ()\") == [2, 0]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"((())) () (()) (()(())) ()\") == [3, 1, 2, 3, 1]",
        "assert parse_nested_parens(\"(())\") == [1]",
        "assert parse_nested_parens(\"((()(())))\") == [3]"
    ],
    "2": [
        "assert parse_nested_parens(\"() ((())(())) (((((())))))\") == [1, 3, 5]",
        "assert parse_nested_parens(\"(()) ()\") == [2, 0]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n# Explanation: The input has four groups with increasing levels of nesting: 1, 2, 3, 4.",
        "assert parse_nested_parens(\"((())) () (()) (()(())) ()\") == [3, 1, 2, 3, 1]",
        "assert parse_nested_parens(\"(())\") == [1]",
        "assert parse_nested_parens(\"((()(())))\") == [3]"
    ],
    "3": [
        "assert parse_nested_parens(\"(()) ()\") == [2, 0]",
        "assert parse_nested_parens(\"()\") == [1]",
        "assert parse_nested_parens(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n# Explanation: The input has four groups with increasing levels of nesting: 1, 2, 3, 4.",
        "assert parse_nested_parens(\"((())) () (()) (()(())) ()\") == [3, 1, 2, 3, 1]",
        "assert parse_nested_parens(\"(())\") == [1]",
        "assert parse_nested_parens(\"((()(())))\") == [3]"
    ]
}