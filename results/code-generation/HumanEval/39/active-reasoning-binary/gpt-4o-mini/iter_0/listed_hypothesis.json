{
    "0": [
        {
            "content": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            count += 1\n            if count == n:\n                return fib1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            count += 1\n            if count == n:\n                return fib1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fibs.append(a)\n\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib in fibonacci():\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            count += 1\n            if count == n:\n                return fib1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while len(primes) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n    \n    return primes[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fibs.append(a)\n    \n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fibonacci():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            count += 1\n            if count == n:\n                return fib1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib_sequence = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        \n        if next_fib > 1:\n            is_prime = True\n            for i in range(2, int(next_fib**0.5) + 1):\n                if next_fib % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_fib)\n    \n    return primes[n - 1]\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fibs.append(a)\n    \n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    prime_fibs = []\n    \n    while len(prime_fibs) < n:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            prime_fibs.append(fib2)\n    \n    return prime_fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n    \n    return primes[n-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            prime_fibs.append(a)\n    \n    return prime_fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[n-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    prime_fib_numbers = []\n    \n    while len(prime_fib_numbers) < n:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            prime_fib_numbers.append(fib2)\n    \n    return prime_fib_numbers[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    prime_fib_count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return a\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fibs.append(a)\n    \n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    prime_fibs = []\n    \n    while len(prime_fibs) < n:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            prime_fibs.append(fib2)\n    \n    return prime_fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n    \n    return primes[n-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            prime_fibs.append(a)\n    \n    return prime_fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    prime_fib_numbers = []\n    \n    while len(prime_fib_numbers) < n:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            prime_fib_numbers.append(fib2)\n    \n    return prime_fib_numbers[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib, a, b = [], 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fib.append(a)\n                count += 1\n    return fib[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    prime_fib_count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return a\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fibs.append(a)\n    \n    return fibs[-1]\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        \n        if next_fib > 1:\n            is_prime = True\n            for i in range(2, int(next_fib**0.5) + 1):\n                if next_fib % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_fib)\n\n    return primes[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        \n        if next_fib > 1:\n            is_prime = True\n            for i in range(2, int(next_fib**0.5) + 1):\n                if next_fib % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_fib)\n    \n    return primes[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if next_fib > 1:\n            is_prime = True\n            for i in range(2, int(next_fib**0.5) + 1):\n                if next_fib % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_fib)\n    \n    return primes[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib = [0, 1]\n    primes = []\n    \n    while len(primes) < n:\n        fib.append(fib[-1] + fib[-2])\n        if fib[-1] > 1 and all(fib[-1] % i != 0 for i in range(2, int(fib[-1]**0.5) + 1)):\n            primes.append(fib[-1])\n    \n    return primes[n - 1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            count += 1\n            if count == n:\n                return fib1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if a > 1:\n            for i in range(2, int(a**0.5) + 1):\n                if a % i == 0:\n                    break\n            else:\n                fibs.append(a)\n    return fibs[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fib = [0, 1]\n    primes = []\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            primes.append(next_fib)\n\n    return primes[-1]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    primes = []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n    \n    return primes[-1]\n```",
            "logp": null
        }
    ]
}