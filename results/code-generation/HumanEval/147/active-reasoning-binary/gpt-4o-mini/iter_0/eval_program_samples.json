{
    "0": {
        "0": [
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for value in a:\n        count[value % 3] += 1\n\n    res = 0\n    res += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    res += count[1] * count[1] * count[1] // 6\n    res += count[2] * count[2] * count[2] // 6\n    res += count[0] * count[1] * count[2]\n\n    return res\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    \n    result = 0\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from c0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from c1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from c2\n    result += c0 * c1 * c2                     # one from each\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    \n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * count[1] * count[1] // 6\n    total += count[2] * count[2] * count[2] // 6\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6 + (c1 * (c1 - 1) * (c1 - 2)) // 6 + (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples where all three are from the same modulo category\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Count triples where one from each category (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Case 1: all three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Case 2: one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for number in a:\n        count[number % 3] += 1\n    \n    c0, c1, c2 = count\n    \n    total_triples = c0 * (c0 - 1) * (c0 - 2) // 6\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    \n    # Triples of the same type\n    for i in range(3):\n        if count[i] >= 3:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n    \n    # One from each type\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Choose three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Choose one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count triples of same mod\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples of different mods\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Count triples where all three elements are from the same residue class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count triples where one element from each residue class\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples with all three numbers having the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with one of each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * mod_count[1] * mod_count[1]) // 6\n    count += (mod_count[2] * mod_count[2] * mod_count[2]) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    \n    # Choosing triples from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Choosing one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total += count[i] * count[j] * count[k]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Counting triples where the sum is a multiple of 3\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All from group 0\n    total_triples += count[1] * count[1] * (count[1] - 1) // 2 * count[0]  # 1, 1, 0\n    total_triples += count[2] * count[2] * (count[2] - 1) // 2 * count[0]  # 2, 2, 0\n    total_triples += count[1] * count[2] * count[0]  # 1, 2, 0\n    total_triples += count[1] * count[2] * (count[1] - 1) // 2  # 1, 2, 1\n    total_triples += count[1] * count[2] * (count[2] - 1) // 2  # 1, 2, 2\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```"
        ],
        "1": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6  # all three are 0 mod 3\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6  # all three are 1 mod 3\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6  # all three are 2 mod 3\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one of each mod 3\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # (0,1,2)\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from count[1]\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from count[2]\n    \n    total_triples += count[0] * count[1] * count[2]  # one from each count\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    # Count triples where the sum is a multiple of 3\n    # Case 1: All are the same\n    for c in count:\n        if c >= 3:\n            result += c * (c - 1) * (c - 2) // 6\n    \n    # Case 2: One from each category\n    result += count[1] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6  # all zeroes\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6  # all ones\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6  # all twos\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]  # one from each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```"
        ],
        "2": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All zero\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All one\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All two\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6  # all three are 0 mod 3\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6  # all three are 1 mod 3\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6  # all three are 2 mod 3\n\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one of each mod 3\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for number in a:\n        mod_count[number % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # (0,1,2)\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from count[1]\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from count[2]\n    \n    total_triples += count[0] * count[1] * count[2]  # one from each count\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```"
        ],
        "3": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All zero\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All one\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All two\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    triples = 0\n    triples += (c0 * (c0 - 1) * (c0 - 2)) // 6\n    triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    triples += c0 * c1 * c2\n    \n    return triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6  # all three are 0 mod 3\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6  # all three are 1 mod 3\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6  # all three are 2 mod 3\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one of each mod 3\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for number in a:\n        mod_count[number % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += (mod_count[0] * mod_count[1] * mod_count[2])  # (0,1,2)\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from count[1]\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from count[2]\n    \n    total_triples += count[0] * count[1] * count[2]  # one from each count\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value] += 1\n    total_triples = 0\n    \n    # Calculate the number of triples\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three are 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6  # all zeroes\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6  # all ones\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6  # all twos\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]  # one from each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```"
        ],
        "4": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All zero\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All one\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All two\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6  # all three are 0 mod 3\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6  # all three are 1 mod 3\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6  # all three are 2 mod 3\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one of each mod 3\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += (mod_count[0] * mod_count[1] * mod_count[2])  # (0,1,2)\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[i] * count[j] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value] += 1\n    total_triples = 0\n    \n    # Calculate the number of triples\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three are 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three are of the same mod\n    for m in range(3):\n        count += mod_count[m] * (mod_count[m] - 1) * (mod_count[m] - 2) // 6\n\n    # Case 2: One of each mod\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations of one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Count triples where all three elements are from the same residue class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count triples where one element from each residue class\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples with all three numbers having the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with one of each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6\n    count += remainder_count[1] * remainder_count[1] * remainder_count[0] // 2\n    count += remainder_count[2] * remainder_count[2] * remainder_count[0] // 2\n    count += remainder_count[1] * remainder_count[2] * remainder_count[1] // 2\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    \n    # Choosing triples from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Choosing one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total += count[i] * count[j] * count[k]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Counting triples where the sum is a multiple of 3\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All from group 0\n    total_triples += count[1] * count[1] * count[1] // 6  # All from group 1\n    total_triples += count[2] * count[2] * count[2] // 6  # All from group 2\n    total_triples += count[0] * count[1] * count[2]  # One from each group\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # all three from count[0]\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6  # all three from count[1]\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6  # all three from count[2]\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Calculate triples from count\n    # 1. All three from same group\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # 2. One from each group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for number in a:\n        count[number % 3] += 1\n    \n    total_triples = 0\n    \n    # Triples where all three numbers have the same remainder\n    for i in range(3):\n        if count[i] >= 3:\n            total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n    \n    # Triples where one number from each remainder class\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * count[1] * count[1] // 6            # (1, 1, 1)\n    total_triples += count[2] * count[2] * count[2] // 6            # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]                 # (0, 1, 2)\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    \n    # Count the triples from the counts of remainders\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are multiples of 3\n    result += count[1] * count[1] * count[1] // 6              # All three give remainder 1\n    result += count[2] * count[2] * count[2] // 6              # All three give remainder 2\n    result += count[0] * count[1] * count[2]                   # One of each\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result += count[1] * count[1] * count[1] // 6\n    result += count[2] * count[2] * count[2] // 6\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    \n    # Count combinations of 3 from the same remainder\n    for c in count:\n        if c >= 3:\n            result += c * (c - 1) * (c - 2) // 6\n            \n    # Count combinations of 1 from each remainder\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```"
        ],
        "1": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from remainder 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from remainder 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from remainder 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[i] * count[j] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all three from 0\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all three from 1\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all three from 2\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one from each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    \n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    result = 0\n\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    result += c0 * c1 * c2\n\n    return result\n```"
        ],
        "2": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three are 2\n    total_triples += count[0] * count[1] * count[2]  # one of each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[i] * count[j] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all three from mod 0\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all three from mod 1\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all three from mod 2\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one from each mod\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    \n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    \n    # Calculate triples that sum to 0 mod 3\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    result += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    result += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    \n    # Calculate triples (0, 1, 2)\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```"
        ],
        "3": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # (0,1,2)\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from remainder 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from remainder 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from remainder 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    # Count triples where the sum is a multiple of 3\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all three from 0\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all three from 1\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all three from 2\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one from each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6  # all zeroes\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6  # all ones\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6  # all twos\n    count += (remainder_count[0] * remainder_count[1] * remainder_count[2])  # one of each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainders = [0] * 3\n\n    for number in a:\n        remainders[number % 3] += 1\n\n    count += (remainders[0] * (remainders[0] - 1) * (remainders[0] - 2)) // 6\n    count += (remainders[1] * (remainders[1] - 1) * (remainders[1] - 2)) // 6\n    count += (remainders[2] * (remainders[2] - 1) * (remainders[2] - 2)) // 6\n    count += remainders[0] * remainders[1] * remainders[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three have the same remainder\n    for r in range(3):\n        if remainder_count[r] >= 3:\n            count += (remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2)) // 6\n\n    # Case 2: One from each remainder class\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three from group 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three from group 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three from group 2\n    total_triples += count[0] * count[1] * count[2]  # One from each group\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += (mod_count[0] * mod_count[1] * mod_count[2])\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    result = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    result += c0 * c1 * c2\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```"
        ],
        "4": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # (0,1,2)\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from remainder 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from remainder 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from remainder 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[i] * count[j] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in range(3):\n        if mod_count[m] >= 3:\n            count += (mod_count[m] * (mod_count[m] - 1) * (mod_count[m] - 2)) // 6\n\n    # Case 2: One number from each remainder\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three from group 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three from group 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three from group 2\n    total_triples += count[0] * count[1] * count[2]  # One from each group\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    return (c0 * (c0 - 1) * (c0 - 2) // 6) + (c1 * (c1 - 1) * (c1 - 2) // 6) + (c2 * (c2 - 1) * (c2 - 2) // 6) + (c0 * c1 * c2)\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0, 0, 0]\n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Case 1: All three numbers have the same remainder (0, 0, 0) or (1, 1, 1) or (2, 2, 2)\n    for r in range(3):\n        count += remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2) // 6\n    \n    # Case 2: One of each remainder (0, 1, 2)\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    result = 0\n\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from group 0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from group 1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from group 2\n    result += c0 * c1 * c2  # one from each group\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n\n    # All triples (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n\n    # All triples (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n\n    # All triples (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n\n    # All triples (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Calculate triples for (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Calculate triples for (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Calculate triples for (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Calculate triples for (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for number in a:\n        count[number % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * count[1] * count[1] // 6            # (1, 1, 1)\n    total_triples += count[2] * count[2] * count[2] // 6            # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]                 # (0, 1, 2)\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    \n    # Count the triples where the sum is a multiple of 3\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    result += count[1] * count[1] * count[1] // 6  # all three from count[1]\n    result += count[2] * count[2] * count[2] // 6  # all three from count[2]\n    result += count[0] * count[1] * count[2]  # one from each\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result += count[1] * count[1] * count[1] // 6\n    result += count[2] * count[2] * count[2] // 6\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    total_triples = 0\n    \n    total_triples += c0 * (c0 - 1) * (c0 - 2) // 6\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of 3 with the same mod\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations of 1 from each mod class\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n\n    def nC3(x):\n        return x * (x - 1) * (x - 2) // 6 if x >= 3 else 0\n\n    total = nC3(count[0]) + nC3(count[1]) + nC3(count[2])\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    # Selecting 3 from counts that are all mod 3 == 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    # Selecting 3 from counts that are all mod 3 == 1\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    # Selecting 3 from counts that are all mod 3 == 2\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    # Selecting 1 from each mod group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from mod 0\n    total_triples += count[1] * count[1] * count[1] // 6            # all three from mod 1\n    total_triples += count[2] * count[2] * count[2] // 6            # all three from mod 2\n    total_triples += count[0] * count[1] * count[2]                 # one from each mod\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Count triples (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Count triples (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Count triples (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    \n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one of each\n    \n    return count\n```"
        ],
        "1": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three have the same remainder\n    for r in range(3):\n        if remainder_count[r] >= 3:\n            count += (remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2)) // 6\n\n    # Case 2: One from each remainder class\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triplets = 0\n    \n    # Count triplets where all three have the same remainder\n    for c in count:\n        if c >= 3:\n            total_triplets += c * (c - 1) * (c - 2) // 6\n    \n    # Count triplets where one of each remainder is selected\n    total_triplets += count[0] * count[1] * count[2]\n    \n    return total_triplets\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    modulo_counts = [0] * 3\n    \n    for num in a:\n        modulo_counts[num % 3] += 1\n    \n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (modulo_counts[i] * (modulo_counts[i] - 1) * (modulo_counts[i] - 2)) // 6\n                    elif i == j:\n                        count += (modulo_counts[i] * (modulo_counts[i] - 1) // 2) * modulo_counts[k]\n                    elif j == k:\n                        count += (modulo_counts[j] * (modulo_counts[j] - 1) // 2) * modulo_counts[i]\n                    elif i == k:\n                        count += (modulo_counts[i] * (modulo_counts[i] - 1) // 2) * modulo_counts[j]\n                    else:\n                        count += modulo_counts[i] * modulo_counts[j] * modulo_counts[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    result += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from count[1]\n    result += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from count[2]\n    result += count[0] * count[1] * count[2]  # one from each\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    \n    # Count combinations of (0,0,0), (1,1,1), (2,2,2)\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Count combinations of (0,1,2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```"
        ],
        "2": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    result = 0\n\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from group 0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from group 1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from group 2\n    result += c0 * c1 * c2  # one from each group\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    modulo_counts = [0] * 3\n    \n    for num in a:\n        modulo_counts[num % 3] += 1\n    \n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (modulo_counts[i] * (modulo_counts[i] - 1) * (modulo_counts[i] - 2)) // 6\n                    elif i == j:\n                        count += (modulo_counts[i] * (modulo_counts[i] - 1) // 2) * modulo_counts[k]\n                    elif j == k:\n                        count += (modulo_counts[j] * (modulo_counts[j] - 1) // 2) * modulo_counts[i]\n                    elif i == k:\n                        count += (modulo_counts[i] * (modulo_counts[i] - 1) // 2) * modulo_counts[j]\n                    else:\n                        count += modulo_counts[i] * modulo_counts[j] * modulo_counts[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    result = 0\n    \n    # Calculate triples that sum to 0 mod 3\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    result += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    result += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    \n    # Calculate triples (0, 1, 2)\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    \n    # Count combinations of (0,0,0), (1,1,1), (2,2,2)\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Count combinations of (0,1,2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    modulo_count = [0, 0, 0]\n    \n    for value in a:\n        modulo_count[value % 3] += 1\n    \n    count += (modulo_count[0] * (modulo_count[0] - 1) * (modulo_count[0] - 2)) // 6\n    count += (modulo_count[1] * (modulo_count[1] - 1) * (modulo_count[1] - 2)) // 6\n    count += (modulo_count[2] * (modulo_count[2] - 1) * (modulo_count[2] - 2)) // 6\n    count += modulo_count[0] * modulo_count[1] * modulo_count[2]\n    \n    return count\n```"
        ],
        "3": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    result = 0\n\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from group 0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from group 1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from group 2\n    result += c0 * c1 * c2  # one from each group\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    modulo_counts = [0] * 3\n    \n    for num in a:\n        modulo_counts[num % 3] += 1\n    \n    count += (modulo_counts[0] * (modulo_counts[0] - 1) * (modulo_counts[0] - 2)) // 6\n    count += (modulo_counts[1] * (modulo_counts[1] - 1) * (modulo_counts[1] - 2)) // 6\n    count += (modulo_counts[2] * (modulo_counts[2] - 1) * (modulo_counts[2] - 2)) // 6\n    count += (modulo_counts[0] * modulo_counts[1] * modulo_counts[2])\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    \n    # Count combinations of (0,0,0), (1,1,1), (2,2,2)\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Count combinations of (0,1,2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```"
        ],
        "4": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2\n    total_triples += count[0] * count[1] * count[2]  # One from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0, 0, 0]\n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Case 1: All three numbers have the same remainder (0, 0, 0) or (1, 1, 1) or (2, 2, 2)\n    for r in range(3):\n        count += remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2) // 6\n    \n    # Case 2: One of each remainder (0, 1, 2)\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    result = 0\n\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from group 0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from group 1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from group 2\n    result += c0 * c1 * c2  # one from each group\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    \n    # Counting triples with all three values being the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            result += c * (c - 1) * (c - 2) // 6\n            \n    # Counting triples with one value from each modulo class\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```"
        ]
    }
}