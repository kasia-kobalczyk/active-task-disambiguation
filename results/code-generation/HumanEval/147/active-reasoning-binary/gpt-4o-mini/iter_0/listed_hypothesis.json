{
    "0": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for value in a:\n        count[value % 3] += 1\n\n    res = 0\n    res += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    res += count[1] * count[1] * count[1] // 6\n    res += count[2] * count[2] * count[2] // 6\n    res += count[0] * count[1] * count[2]\n\n    return res\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    \n    result = 0\n    result += (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from c0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from c1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from c2\n    result += c0 * c1 * c2                     # one from each\n    \n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    \n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * count[1] * count[1] // 6\n    total += count[2] * count[2] * count[2] // 6\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    total_triples = c0 * (c0 - 1) * (c0 - 2) // 6  # triples from c0\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6  # triples from c1\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6  # triples from c2\n    total_triples += c0 * c1 * c2  # one from each\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations of one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Count triples where all are in the same category\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0 mod 3\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1 mod 3\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2 mod 3\n\n    # Count triples where one is from each category\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples with all three numbers having the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with one of each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += (mod_count[0] * mod_count[1] * mod_count[2])  # (0,1,2)\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from count[1]\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from count[2]\n    \n    total_triples += count[0] * count[1] * count[2]  # one from each count\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three from group 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three from group 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three from group 2\n    total_triples += count[0] * count[1] * count[2]  # One from each group\n    \n    return total_triples\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # (0,0,0)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # (1,1,1)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # (2,2,2)\n    count += (mod_count[0] * mod_count[1] * mod_count[2])  # (0,1,2)\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from remainder 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from remainder 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from remainder 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainders = [0] * 3\n\n    for number in a:\n        remainders[number % 3] += 1\n\n    count += (remainders[0] * (remainders[0] - 1) * (remainders[0] - 2)) // 6\n    count += (remainders[1] * (remainders[1] - 1) * (remainders[1] - 2)) // 6\n    count += (remainders[2] * (remainders[2] - 1) * (remainders[2] - 2)) // 6\n    count += remainders[0] * remainders[1] * remainders[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three are of the same mod\n    for m in range(3):\n        count += mod_count[m] * (mod_count[m] - 1) * (mod_count[m] - 2) // 6\n\n    # Case 2: One of each mod\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    \n    # Count triples where all numbers are the same\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Count triples where one number from each group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of a[i] % 3\n    mod_count = [0, 0, 0]\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Calculate number of valid triples\n    # Case 1: All three numbers have the same remainder\n    for m in mod_count:\n        if m >= 3:\n            count += m * (m - 1) * (m - 2) // 6\n\n    # Case 2: One of each type (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Case 1: All three are the same modulo 3\n    for c in count.values():\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Case 2: One from each modulo group\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n\n    return total_triples\n```",
            "logp": null
        }
    ]
}