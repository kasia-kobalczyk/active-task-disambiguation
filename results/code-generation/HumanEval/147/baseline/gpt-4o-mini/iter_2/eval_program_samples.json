{
    "0": {
        "0": [
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from count[0]\n    total_triples += count[1] * count[1] * count[1] // 6  # all three from count[1]\n    total_triples += count[2] * count[2] * count[2] // 6  # all three from count[2]\n    total_triples += count[0] * count[1] * count[2]  # one from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    \n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * count[1] * count[1] // 6\n    total += count[2] * count[2] * count[2] // 6\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6 + (c1 * (c1 - 1) * (c1 - 2)) // 6 + (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples where all three are from the same modulo category\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Count triples where one from each category (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples of the same residue class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count one of each residue class\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for number in a:\n        count[number % 3] += 1\n    \n    c0, c1, c2 = count\n    \n    total_triples = c0 * (c0 - 1) * (c0 - 2) // 6\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    \n    # Triples of the same type\n    for i in range(3):\n        if count[i] >= 3:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n    \n    # One from each type\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Combinations of all three with the same mod\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Combinations of one from each mod\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations of one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0 mod 3\n    total_triples += count[1] * count[1] * (count[1] - 1) // 2 * count[0]  # two 1 mod 3, one 0 mod 3\n    total_triples += count[2] * count[2] * (count[2] - 1) // 2 * count[0]  # two 2 mod 3, one 0 mod 3\n    total_triples += count[1] * count[2] * count[0]  # one 1 mod 3, one 2 mod 3, one 0 mod 3\n    total_triples += count[1] * count[2] * count[1] * count[2]  # one 1 mod 3 and two 2 mod 3\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Count triples where all three elements are from the same residue class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count triples where one element from each residue class\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples with all three numbers having the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with one of each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n        \n    count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6\n    count += remainder_count[1] * remainder_count[1] * remainder_count[1] // 6\n    count += remainder_count[2] * remainder_count[2] * remainder_count[2] // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    \n    # Choosing triples from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Choosing one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total += count[i] * count[j] * count[k]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Counting triples where the sum is a multiple of 3\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all from group 0\n    total_triples += count[1] * count[1] * count[1] // 6  # all from group 1\n    total_triples += count[2] * count[2] * count[2] // 6  # all from group 2\n    total_triples += count[0] * count[1] * count[2]  # one from each group\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```"
        ],
        "1": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n        \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += (remainder_count[0] * remainder_count[1] * remainder_count[2])\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for number in a:\n        mod_count[number % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += (mod_count[0] * mod_count[1] * mod_count[2])\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all from mod 0\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all from mod 1\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all from mod 2\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one from each mod\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += (mod_count[0] * mod_count[1] * mod_count[2])\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All three are 0 mod 3\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All three are 1 mod 3\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All three are 2 mod 3\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One from each mod group\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```"
        ],
        "2": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2)) // 6\n                    elif i == j:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) // 2) * remainder_count[k]\n                    elif j == k:\n                        count += remainder_count[i] * (remainder_count[j] * (remainder_count[j] - 1) // 2)\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All zero\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All one\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All two\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One of each\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2) // 6\n                    elif i == j:\n                        count += remainder_count[i] * (remainder_count[i] - 1) // 2 * remainder_count[k]\n                    elif j == k:\n                        count += remainder_count[j] * (remainder_count[j] - 1) // 2 * remainder_count[i]\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    \n    # Combinations of three from each remainder category\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three from remainder 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three from remainder 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three from remainder 2\n    \n    # Combinations of one from each category\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0,0,0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1,1,1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2,2,2)\n    total_triples += count[0] * count[1] * count[2]  # (0,1,2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three from remainder 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three from remainder 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three from remainder 2\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples of the same remainder\n    for r in range(3):\n        if count[r] >= 3:\n            total_triples += count[r] * (count[r] - 1) * (count[r] - 2) // 6\n    \n    # Count triples of different remainders\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1, 1, 1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    \n    # Triples from all 0's, 1's, and 2's\n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Mixed triples (0, 1, 2)\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    result = 0\n    \n    # Triples from all same residue\n    for i in range(3):\n        if count[i] >= 3:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n            \n    # Triples from different residues\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```"
        ],
        "3": [
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for num in a:\n        count[num % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2) // 6\n                    elif i == j:\n                        count += mod_count[i] * (mod_count[i] - 1) // 2 * mod_count[k]\n                    elif j == k:\n                        count += mod_count[i] * mod_count[j] * (mod_count[j] - 1) // 2\n                    else:\n                        count += mod_count[i] * mod_count[j] * mod_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0 mod 3\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1 mod 3\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2 mod 3\n    total_triples += count[0] * count[1] * count[2]                     # One of each mod\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2) // 6\n                    elif i == j:\n                        count += mod_count[i] * (mod_count[i] - 1) // 2 * mod_count[k]\n                    elif j == k:\n                        count += mod_count[j] * (mod_count[j] - 1) // 2 * mod_count[i]\n                    elif i == k:\n                        count += mod_count[i] * (mod_count[i] - 1) // 2 * mod_count[j]\n                    else:\n                        count += mod_count[i] * mod_count[j] * mod_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all 0\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all 1\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all 2\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one from each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n        \n    for r in range(3):\n        for r1 in range(r, 3):\n            for r2 in range(r1, 3):\n                if (r + r1 + r2) % 3 == 0:\n                    if r == r1 == r2:\n                        count += remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2) // 6\n                    elif r == r1:\n                        count += remainder_count[r] * (remainder_count[r] - 1) // 2 * remainder_count[r2]\n                    elif r == r2:\n                        count += remainder_count[r] * (remainder_count[r] - 1) // 2 * remainder_count[r1]\n                    elif r1 == r2:\n                        count += remainder_count[r1] * (remainder_count[r1] - 1) // 2 * remainder_count[r]\n                    else:\n                        count += remainder_count[r] * remainder_count[r1] * remainder_count[r2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2) // 6\n                    elif i == j:\n                        count += remainder_count[i] * (remainder_count[i] - 1) // 2 * remainder_count[k]\n                    elif j == k:\n                        count += remainder_count[j] * (remainder_count[j] - 1) // 2 * remainder_count[i]\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += (remainder_count[0] * remainder_count[1] * remainder_count[2])\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    modulo_count = [0, 0, 0]\n    \n    for num in a:\n        modulo_count[num % 3] += 1\n    \n    count += (modulo_count[0] * (modulo_count[0] - 1) * (modulo_count[0] - 2)) // 6\n    count += (modulo_count[1] * (modulo_count[1] - 1) * (modulo_count[1] - 2)) // 6\n    count += (modulo_count[2] * (modulo_count[2] - 1) * (modulo_count[2] - 2)) // 6\n    count += modulo_count[0] * modulo_count[1] * modulo_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All zeroes\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All ones\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All twos\n    total_triples += count[0] * count[1] * count[2]  # One of each\n\n    return total_triples\n```"
        ],
        "4": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total += count[i] * count[j] * count[k]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count the occurrences of each residue mod 3\n    residues = [0] * 3\n    for value in a:\n        residues[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    count += residues[0] * (residues[0] - 1) * (residues[0] - 2) // 6  # All from residue 0\n    count += residues[1] * (residues[1] - 1) * (residues[1] - 2) // 6  # All from residue 1\n    count += residues[2] * (residues[2] - 1) * (residues[2] - 2) // 6  # All from residue 2\n    count += residues[0] * residues[1] * residues[2]  # One from each residue\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0, 0, 0]\n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Case 1: All three have the same remainder\n    for r in range(3):\n        if remainder_count[r] >= 3:\n            count += (remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2)) // 6\n    \n    # Case 2: One of each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n\n    # Calculate triples for (0, 0, 0)\n    if count[0] >= 3:\n        total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n\n    # Calculate triples for (1, 1, 1)\n    if count[1] >= 3:\n        total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n\n    # Calculate triples for (2, 2, 2)\n    if count[2] >= 3:\n        total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n\n    # Calculate triples for (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j != k:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif i != j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    elif i != k and j != k and i != j:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for number in a:\n        count[number % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    result = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    # Count combinations\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All 0's\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All 1's\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All 2's\n    total_triples += count[0] * count[1] * count[2]  # One of each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    \n    total_triples = 0\n    \n    total_triples += c0 * (c0 - 1) * (c0 - 2) // 6  # 3 from count of 0\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6  # 3 from count of 1\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6  # 3 from count of 2\n    total_triples += c0 * c1 * c2  # 1 from each count\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of residues mod 3\n    residue_count = [0, 0, 0]\n    for value in a:\n        residue_count[value % 3] += 1\n\n    # Compute the number of valid triples\n    # Case 1: All three numbers have the same residue\n    for r in range(3):\n        if residue_count[r] >= 3:\n            count += residue_count[r] * (residue_count[r] - 1) * (residue_count[r] - 2) // 6\n            \n    # Case 2: One from each residue\n    count += residue_count[0] * residue_count[1] * residue_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Combinations of 3 from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Combinations of 1 from each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count the occurrences of a[i] % 3\n    remainder_count = [0, 0, 0]\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: all three have remainder 0\n    count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6\n    # Case 2: all three have remainder 1\n    count += remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2) // 6\n    # Case 3: all three have remainder 2\n    count += remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2) // 6\n    # Case 4: one of each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0 = count[0]\n    c1 = count[1]\n    c2 = count[2]\n\n    result = (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from c0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from c1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from c2\n    result += c0 * c1 * c2  # one from each\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total += count[i] * count[j] * count[k]\n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    elif i == k:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[j]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    elif i == k:\n                        result += count[i] * (count[i] - 1) // 2 * count[j]\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2)) // 6\n                    elif i == j:\n                        count += (mod_count[i] * (mod_count[i] - 1) // 2) * mod_count[k]\n                    elif j == k:\n                        count += (mod_count[j] * (mod_count[j] - 1) // 2) * mod_count[i]\n                    elif i == k:\n                        count += (mod_count[i] * (mod_count[i] - 1) // 2) * mod_count[j]\n                    else:\n                        count += mod_count[i] * mod_count[j] * mod_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value] += 1\n        \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Case 1: All three numbers are the same residue\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Case 2: One number from each residue class\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations of one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Count triples where all three elements are from the same residue class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count triples where one element from each residue class\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples where all three are from the same group\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples where one is from each group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for value in a:\n        count[value % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    \n    # Choosing triples from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n    \n    # Choosing one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total += count[i] * count[j] * count[k]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all from count[0]\n    total_triples += count[1] * count[1] * count[1] // 6  # all from count[1]\n    total_triples += count[2] * count[2] * count[2] // 6  # all from count[2]\n    total_triples += count[0] * count[1] * count[2]  # one from each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total = 0\n    # Count triples of each type\n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0\n    total += count[1] * count[1] * (count[1] - 1) // 2 * count[0]  # two are 1, one is 0\n    total += count[2] * count[2] * (count[2] - 1) // 2 * count[0]  # two are 2, one is 0\n    total += count[0] * count[1] * count[2]  # one of each\n\n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Triples of (0, 0, 0)\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6\n    \n    # Triples of (1, 1, 1)\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6\n    \n    # Triples of (2, 2, 2)\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6\n    \n    # Triples of (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Calculate triples from count\n    # 1. All three from same group\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # 2. One from each group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for number in a:\n        count[number % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * count[1] * count[1] // 6            # (1, 1, 1)\n    total_triples += count[2] * count[2] * count[2] // 6            # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]                 # (0, 1, 2)\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    \n    # Count the triples from the counts of remainders\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are multiples of 3\n    result += count[1] * count[1] * count[1] // 6              # All three give remainder 1\n    result += count[2] * count[2] * count[2] // 6              # All three give remainder 2\n    result += count[0] * count[1] * count[2]                   # One of each\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result += count[1] * count[1] * count[1] // 6\n    result += count[2] * count[2] * count[2] // 6\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```"
        ],
        "1": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += (mod_count[0] * mod_count[1] * mod_count[2])\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all 0s\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all 1s\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all 2s\n    total_triples += count[0] * count[1] * count[2]  # one of each\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All three are 0 mod 3\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All three are 1 mod 3\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All three are 2 mod 3\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One from each mod group\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2) // 6\n                    elif i == j:\n                        count += mod_count[i] * (mod_count[i] - 1) // 2 * mod_count[k]\n                    elif j == k:\n                        count += mod_count[j] * (mod_count[j] - 1) // 2 * mod_count[i]\n                    elif i == k:\n                        count += mod_count[i] * (mod_count[i] - 1) // 2 * mod_count[j]\n                    else:\n                        count += mod_count[i] * mod_count[j] * mod_count[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```"
        ],
        "2": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0,0,0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1,1,1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2,2,2)\n    total_triples += count[0] * count[1] * count[2]  # (0,1,2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0,0,0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1,1,1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2,2,2)\n    total_triples += count[0] * count[1] * count[2]  # (0,1,2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples of the same remainder\n    for r in range(3):\n        if count[r] >= 3:\n            total_triples += count[r] * (count[r] - 1) * (count[r] - 2) // 6\n    \n    # Count triples of different remainders that sum to a multiple of 3\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    result = 0\n    \n    # Count triples of all 0s\n    if c0 >= 3:\n        result += c0 * (c0 - 1) * (c0 - 2) // 6\n    \n    # Count triples of all 1s\n    if c1 >= 3:\n        result += c1 * (c1 - 1) * (c1 - 2) // 6\n    \n    # Count triples of all 2s\n    if c2 >= 3:\n        result += c2 * (c2 - 1) * (c2 - 2) // 6\n    \n    # Count mixed triples (0, 1, 2)\n    result += c0 * c1 * c2\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total = 0\n    \n    # Triples from all 0's, 1's, and 2's\n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Triples from one of each\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    result = 0\n    \n    # Triples from all same residue\n    for i in range(3):\n        if count[i] >= 3:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n            \n    # Triples from different residues\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    \n    # Combinations of 3 from the same mod group\n    for c in count:\n        if c >= 3:\n            result += c * (c - 1) * (c - 2) // 6\n    \n    # Combinations of 1 from each mod group\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[i] * count[j] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of each remainder when divided by 3\n    rem_count = [0, 0, 0]\n    for num in a:\n        rem_count[num % 3] += 1\n    \n    # Count the number of valid triples\n    count += (rem_count[0] * (rem_count[0] - 1) * (rem_count[0] - 2)) // 6  # All zeros\n    count += (rem_count[1] * (rem_count[1] - 1) * (rem_count[1] - 2)) // 6  # All ones\n    count += (rem_count[2] * (rem_count[2] - 1) * (rem_count[2] - 2)) // 6  # All twos\n    count += rem_count[0] * rem_count[1] * rem_count[2]  # One from each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for number in a:\n        count[number % 3] += 1\n    \n    total_triples = 0\n    \n    # Count combinations where all three are of the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count combinations where one is from each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```"
        ],
        "3": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are 0 mod 3\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three are 1 mod 3\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three are 2 mod 3\n    total_triples += count[0] * count[1] * count[2]  # One from each group\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0, 0, 0]\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: All three numbers with remainder 0\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    # Case 2: All three numbers with remainder 1\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    # Case 3: All three numbers with remainder 2\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    # Case 4: One number with remainder 0, one with 1, one with 2\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n        \n    for i in range(3):\n        for j in range(i, 3):\n            k = (3 - (i + j) % 3) % 3\n            if i == j == k:\n                count += (mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2)) // 6\n            elif i == j:\n                count += (mod_count[i] * (mod_count[i] - 1) // 2) * mod_count[k]\n            elif j == k:\n                count += mod_count[i] * (mod_count[j] * (mod_count[j] - 1) // 2)\n            else:\n                count += mod_count[i] * mod_count[j] * mod_count[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2) // 6\n                    elif i == j:\n                        count += remainder_count[i] * (remainder_count[i] - 1) // 2 * remainder_count[k]\n                    elif j == k:\n                        count += remainder_count[j] * (remainder_count[j] - 1) // 2 * remainder_count[i]\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0 mod 3\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three are 1 mod 3\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three are 2 mod 3\n    total_triples += count[0] * count[1] * count[2]  # one from each category\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2)) // 6\n                    elif i == j:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) // 2) * remainder_count[k]\n                    elif j == k:\n                        count += (remainder_count[j] * (remainder_count[j] - 1) // 2) * remainder_count[i]\n                    elif i == k:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) // 2) * remainder_count[j]\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += (remainder_count[0] * remainder_count[1] * remainder_count[2])\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    modulo_count = [0, 0, 0]\n    \n    for num in a:\n        modulo_count[num % 3] += 1\n    \n    count += (modulo_count[0] * (modulo_count[0] - 1) * (modulo_count[0] - 2)) // 6\n    count += (modulo_count[1] * (modulo_count[1] - 1) * (modulo_count[1] - 2)) // 6\n    count += (modulo_count[2] * (modulo_count[2] - 1) * (modulo_count[2] - 2)) // 6\n    count += modulo_count[0] * modulo_count[1] * modulo_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    result = 0\n    \n    result += c0 * (c0 - 1) * (c0 - 2) // 6\n    result += c1 * (c1 - 1) * (c1 - 2) // 6\n    result += c2 * (c2 - 1) * (c2 - 2) // 6\n    result += c0 * c1 * c2\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All zeroes\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All ones\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All twos\n    total_triples += count[0] * count[1] * count[2]  # One of each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: All remainders are 0\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    \n    # Case 2: All remainders are 1\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n\n    # Case 3: All remainders are 2\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n\n    # Case 4: One of each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total = count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three from count[0]\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three from count[1]\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three from count[2]\n    total_triples += count[0] * count[1] * count[2]  # One from each count\n    \n    return total_triples\n```"
        ],
        "4": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for number in a:\n        count[number % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    result = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    result = 0\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    c = count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    c += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    c += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    c += count[0] * count[1] * count[2]\n    \n    return c\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total += count[i] * count[j] * count[k]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6 + (c1 * (c1 - 1) * (c1 - 2)) // 6 + (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0, c1, c2 = count\n    \n    total_triples = 0\n    \n    total_triples += c0 * (c0 - 1) * (c0 - 2) // 6  # 3 from count of 0\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6  # 3 from count of 1\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6  # 3 from count of 2\n    total_triples += c0 * c1 * c2  # 1 from each count\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of residues mod 3\n    residue_count = [0, 0, 0]\n    for value in a:\n        residue_count[value % 3] += 1\n\n    # Compute the number of valid triples\n    # Case 1: All three numbers have the same residue\n    for r in range(3):\n        if residue_count[r] >= 3:\n            count += residue_count[r] * (residue_count[r] - 1) * (residue_count[r] - 2) // 6\n            \n    # Case 2: One from each residue\n    count += residue_count[0] * residue_count[1] * residue_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # all from mod 0\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6  # all from mod 1\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6  # all from mod 2\n    total_triples += count[0] * count[1] * count[2]  # one from each mod class\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    remainder_count = [0] * 3\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6\n    count += remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2) // 6\n    count += remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count combinations for (0,0,0), (1,1,1), (2,2,2)\n    for i in range(3):\n        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n    \n    # Count combinations for (0,1,2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total += count[i] * count[j] * count[k]\n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    elif i == k:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[j]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2)) // 6\n                    elif i == j:\n                        count += (mod_count[i] * (mod_count[i] - 1) // 2) * mod_count[k]\n                    elif j == k:\n                        count += (mod_count[j] * (mod_count[j] - 1) // 2) * mod_count[i]\n                    elif i == k:\n                        count += (mod_count[i] * (mod_count[i] - 1) // 2) * mod_count[j]\n                    else:\n                        count += mod_count[i] * mod_count[j] * mod_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n        \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Case 1: All three numbers are the same residue\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Case 2: One number from each residue class\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n\n    # All triples (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n\n    # All triples (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n\n    # All triples (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n\n    # Mix of (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    result = 0\n    result += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # Choose 3 from count[0]\n    result += (count[1] * count[1] * count[1]) // 6  # Choose 3 from count[1]\n    result += (count[2] * count[2] * count[2]) // 6  # Choose 3 from count[2]\n    result += (count[0] * count[1] * count[2])  # One from each count\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Calculate triples for (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Calculate triples for (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Calculate triples for (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Calculate triples for (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    \n    # Calculate triples for all combinations that are multiples of 3\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # (0, 0, 0)\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6  # (1, 1, 1)\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6  # (2, 2, 2)\n    \n    total_triples += count[0] * count[1] * count[2]  # (0, 1, 2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * count[1] * count[1] // 6            # (1, 1, 1)\n    total_triples += count[2] * count[2] * count[2] // 6            # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]                 # (0, 1, 2)\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    \n    # Count the triples from the counts of remainders\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three are multiples of 3\n    result += count[1] * count[1] * count[1] // 6              # All three give remainder 1\n    result += count[2] * count[2] * count[2] // 6              # All three give remainder 2\n    result += count[0] * count[1] * count[2]                   # One of each\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    result += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result += count[1] * count[1] * count[1] // 6\n    result += count[2] * count[2] * count[2] // 6\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples of the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with all different remainders\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of 3 from the same mod class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Count combinations of 1 from each mod class\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n\n    def nC3(x):\n        return x * (x - 1) * (x - 2) // 6 if x >= 3 else 0\n\n    total = nC3(count[0]) + nC3(count[1]) + nC3(count[2])\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    # Selecting triples from the counts\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all from mod 0\n    total_triples += count[1] * count[1] * count[1] // 6            # all from mod 1\n    total_triples += count[2] * count[2] * count[2] // 6            # all from mod 2\n    total_triples += count[0] * count[1] * count[2]                 # one from each mod\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Count triples (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Count triples (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Count triples (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations for (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Count combinations for (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Count combinations for (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Count combinations for (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n\n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all 0s\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all 1s\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all 2s\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one of each\n    \n    return count\n```"
        ],
        "1": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += (mod_count[0] * mod_count[1] * mod_count[2])\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # All three are 0 mod 3\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # All three are 1 mod 3\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # All three are 2 mod 3\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # One from each mod group\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```"
        ],
        "2": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    result = 0\n    \n    # Count triples of all 0s\n    if c0 >= 3:\n        result += c0 * (c0 - 1) * (c0 - 2) // 6\n    \n    # Count triples of all 1s\n    if c1 >= 3:\n        result += c1 * (c1 - 1) * (c1 - 2) // 6\n    \n    # Count triples of all 2s\n    if c2 >= 3:\n        result += c2 * (c2 - 1) * (c2 - 2) // 6\n    \n    # Count mixed triples (0, 1, 2)\n    result += c0 * c1 * c2\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total = 0\n    \n    # Triples from all 0's, 1's, and 2's\n    total += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Triples from one of each\n    total += count[0] * count[1] * count[2]\n    \n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count combinations of (0,0,0), (1,1,1), (2,2,2)\n    for i in range(3):\n        if count[i] >= 3:\n            total_triples += (count[i] * (count[i] - 1) * (count[i] - 2)) // 6\n    \n    # Count combinations of (0,1,2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    result = 0\n    \n    # Triplets with all same remainders\n    for c in count:\n        if c >= 3:\n            result += c * (c - 1) * (c - 2) // 6\n            \n    # Triplets with one of each remainder\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[i] * count[j] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        total_triples += (count[i] * (count[i] - 1) * (count[i] - 2)) // 6  # triples from the same group\n        for j in range(i + 1, 3):\n            total_triples += count[i] * count[j] * count[(3 - (i + j)) % 3]  # mixed groups\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    \n    # Case 1: All three indices have the same mod\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Case 2: One from each mod\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    c0, c1, c2 = count\n    return (c0 * (c0 - 1) * (c0 - 2) // 6 +\n            c1 * (c1 - 1) * (c1 - 2) // 6 +\n            c2 * (c2 - 1) * (c2 - 2) // 6 +\n            c0 * c1 * c2)\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2)) // 6\n                    elif i == j:\n                        count += (mod_count[i] * (mod_count[i] - 1) // 2) * mod_count[k]\n                    elif j == k:\n                        count += mod_count[i] * (mod_count[j] * (mod_count[j] - 1) // 2)\n                    else:\n                        count += mod_count[i] * mod_count[j] * mod_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```"
        ],
        "3": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2) // 6\n                    elif i == j:\n                        count += remainder_count[i] * (remainder_count[i] - 1) // 2 * remainder_count[k]\n                    elif j == k:\n                        count += remainder_count[j] * (remainder_count[j] - 1) // 2 * remainder_count[i]\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0, 0, 0]\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) * (remainder_count[i] - 2)) // 6\n                    elif i == j:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) // 2) * remainder_count[k]\n                    elif j == k:\n                        count += (remainder_count[j] * (remainder_count[j] - 1) // 2) * remainder_count[i]\n                    elif i == k:\n                        count += (remainder_count[i] * (remainder_count[i] - 1) // 2) * remainder_count[j]\n                    else:\n                        count += remainder_count[i] * remainder_count[j] * remainder_count[k]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += (remainder_count[0] * remainder_count[1] * remainder_count[2])\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    modulo_count = [0, 0, 0]\n    \n    for num in a:\n        modulo_count[num % 3] += 1\n    \n    count += (modulo_count[0] * (modulo_count[0] - 1) * (modulo_count[0] - 2)) // 6\n    count += (modulo_count[1] * (modulo_count[1] - 1) * (modulo_count[1] - 2)) // 6\n    count += (modulo_count[2] * (modulo_count[2] - 1) * (modulo_count[2] - 2)) // 6\n    count += modulo_count[0] * modulo_count[1] * modulo_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c1, c2, c0 = count[1], count[2], count[0]\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All zeroes\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All ones\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All twos\n    total_triples += count[0] * count[1] * count[2]  # One of each\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0] * 3\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: All remainders are 0\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    \n    # Case 2: All remainders are 1\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n\n    # Case 3: All remainders are 2\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n\n    # Case 4: One of each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # All three from count[0]\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # All three from count[1]\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # All three from count[2]\n    total_triples += count[0] * count[1] * count[2]  # One from each count\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for value in a:\n        count[value % 3] += 1\n\n    c0, c1, c2 = count\n    total_triples = 0\n\n    total_triples += c0 * (c0 - 1) * (c0 - 2) // 6\n    total_triples += c1 * (c1 - 1) * (c1 - 2) // 6\n    total_triples += c2 * (c2 - 1) * (c2 - 2) // 6\n    total_triples += c0 * c1 * c2\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    for r in range(3):\n        for r2 in range(r, 3):\n            for r3 in range(r2, 3):\n                if (r + r2 + r3) % 3 == 0:\n                    if r == r2 == r3:\n                        count += remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2) // 6\n                    elif r == r2:\n                        count += remainder_count[r] * (remainder_count[r] - 1) // 2 * remainder_count[r3]\n                    elif r2 == r3:\n                        count += remainder_count[r] * remainder_count[r2] * (remainder_count[r2] - 1) // 2\n                    else:\n                        count += remainder_count[r] * remainder_count[r2] * remainder_count[r3]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    # Count occurrences of each remainder when divided by 3\n    remainder_count = [0, 0, 0]\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    # Calculate number of valid triples\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6  # all three are 0 mod 3\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6  # all three are 1 mod 3\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6  # all three are 2 mod 3\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]  # one of each\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num] += 1\n    total = 0\n\n    # Count combinations of three from the same group\n    for c in count:\n        if c >= 3:\n            total += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations from different groups\n    total += count[0] * count[1] * count[2]\n\n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    \n    # Combinations where all are the same mod\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n            \n    # Combinations of different mods\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```"
        ],
        "4": [
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # all from mod 0\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6  # all from mod 1\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6  # all from mod 2\n    total_triples += count[0] * count[1] * count[2]  # one from each mod class\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count the occurrences of a[i] % 3\n    remainder_count = [0, 0, 0]\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: all three have remainder 0\n    count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6\n    # Case 2: all three have remainder 1\n    count += remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2) // 6\n    # Case 3: all three have remainder 2\n    count += remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2) // 6\n    # Case 4: one of each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    c0 = count[0]\n    c1 = count[1]\n    c2 = count[2]\n\n    result = (c0 * (c0 - 1) * (c0 - 2)) // 6  # all three from c0\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6  # all three from c1\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6  # all three from c2\n    result += c0 * c1 * c2  # one from each\n\n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for num in a:\n        count[num % 3] += 1\n    total = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total += count[i] * count[j] * count[k]\n    return total\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Case 1: All three numbers are the same residue\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Case 2: One number from each residue class\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value % 3] += 1\n        \n    c0, c1, c2 = count\n    result = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    result += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    result += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    result += c0 * c1 * c2\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    \n    # All values with the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n            \n    # One from each remainder group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    result = 0\n    \n    # Combinations of three with same remainder\n    for c in count:\n        if c >= 3:\n            result += c * (c - 1) * (c - 2) // 6\n            \n    # Combinations of one from each category\n    result += count[0] * count[1] * count[2]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num % 3] += 1\n    total_triples = 0\n\n    # Count triples where all elements give the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n\n    # Count triples where one element of each remainder is used\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    elif i == k:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[j]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    elif i == k:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[j]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n\n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count\n    \n    total_triples = 0\n    total_triples += (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += (c0 * c1 * c2)\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n        \n    total_triples = 0\n    \n    # Count combinations where all three indices yield the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += (c * (c - 1) * (c - 2)) // 6\n            \n    # Count combinations where indices yield different remainders\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n\n    c0, c1, c2 = count\n    triples = 0\n\n    triples += c0 * (c0 - 1) * (c0 - 2) // 6\n    triples += c1 * (c1 - 1) * (c1 - 2) // 6\n    triples += c2 * (c2 - 1) * (c2 - 2) // 6\n    triples += c0 * c1 * c2\n\n    return triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    c0, c1, c2 = count\n    \n    total_triples = (c0 * (c0 - 1) * (c0 - 2)) // 6\n    total_triples += (c1 * (c1 - 1) * (c1 - 2)) // 6\n    total_triples += (c2 * (c2 - 1) * (c2 - 2)) // 6\n    total_triples += c0 * c1 * c2\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    # Count triples where all elements are from the same group\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples where one element from each group\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    \n    # Calculate combinations\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * count[i] * (count[j] - 1) // 2\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    \n    # Count the combinations\n    # All three numbers have remainder 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    # All three numbers have remainder 1\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    # All three numbers have remainder 2\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    # One of each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```"
        ]
    }
}