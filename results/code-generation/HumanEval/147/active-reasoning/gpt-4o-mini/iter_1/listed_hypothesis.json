{
    "0": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    \n    # Count combinations of three from the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count combinations of one from each remainder\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * count[1] * count[1] // 6\n    total_triples += count[2] * count[2] * count[2] // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n\n    # Count triples where all three elements are from the same residue class\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n\n    # Count triples where one element from each residue class\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples with all three numbers having the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with one of each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # all three from count[0]\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6  # all three from count[1]\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6  # all three from count[2]\n    total_triples += count[0] * count[1] * count[2]  # one from each\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    \n    # Calculate triples from count\n    # Case 1: all three from count[0]\n    if count[0] >= 3:\n        total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    # Case 2: all three from count[1]\n    if count[1] >= 3:\n        total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    # Case 3: all three from count[2]\n    if count[2] >= 3:\n        total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    # Case 4: one from each count[0], count[1], count[2]\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for number in a:\n        count[number % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0, 0, 0)\n    total_triples += count[1] * count[1] * count[1] // 6            # (1, 1, 1)\n    total_triples += count[2] * count[2] * count[2] // 6            # (2, 2, 2)\n    total_triples += count[0] * count[1] * count[2]                 # (0, 1, 2)\n\n    return total_triples\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0, 0, 0]\n\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6  # (0, 0, 0)\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6  # (1, 1, 1)\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6  # (2, 2, 2)\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]  # (0, 1, 2)\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    \n    # Count triples where all three have the same remainder\n    for r in range(3):\n        if count[r] >= 3:\n            total_triples += count[r] * (count[r] - 1) * (count[r] - 2) // 6\n    \n    # Count triples where one of each remainder is chosen\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    c0, c1, c2 = count[0], count[1], count[2]\n    result = 0\n    \n    result += c0 * (c0 - 1) * (c0 - 2) // 6  # All zeros\n    result += c1 * (c1 - 1) * (c1 - 2) // 6  # All ones\n    result += c2 * (c2 - 1) * (c2 - 2) // 6  # All twos\n    result += c0 * c1 * c2  # One of each\n    \n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = {0: 0, 1: 0, 2: 0}\n    \n    for number in a:\n        count[number % 3] += 1\n        \n    total_triples = 0\n    \n    # Triple combinations of (0, 0, 0)\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Triple combinations of (1, 1, 1)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Triple combinations of (2, 2, 2)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Triple combinations of (0, 1, 2)\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n\n    for value in a:\n        count[value % 3] += 1\n\n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # (0,0,0)\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # (1,1,1)\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # (2,2,2)\n    total_triples += count[0] * count[1] * count[2]  # (0,1,2)\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    \n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n    \n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n    \n    result = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        result += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        result += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        result += count[i] * count[j] * count[k]\n    return result\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    \n    for value in a:\n        count[value % 3] += 1\n        \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value % 3] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    \n    # Count triples of the same remainder\n    for c in count:\n        if c >= 3:\n            total_triples += c * (c - 1) * (c - 2) // 6\n    \n    # Count triples with different remainders\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0] * 3\n    for value in a:\n        count[value] += 1\n    \n    total_triples = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        total_triples += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n                    elif i == j:\n                        total_triples += count[i] * (count[i] - 1) // 2 * count[k]\n                    elif j == k:\n                        total_triples += count[j] * (count[j] - 1) // 2 * count[i]\n                    else:\n                        total_triples += count[i] * count[j] * count[k]\n    \n    return total_triples\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of residues modulo 3\n    mod_count = [0] * 3\n    for value in a:\n        mod_count[value % 3] += 1\n\n    # Count valid triples\n    count += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6  # all three from mod 0\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6  # all three from mod 1\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6  # all three from mod 2\n    count += mod_count[0] * mod_count[1] * mod_count[2]  # one from each mod\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Count occurrences of remainders when divided by 3\n    remainder_count = [0, 0, 0]\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: All three numbers with remainder 0\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    # Case 2: All three numbers with remainder 1\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    # Case 3: All three numbers with remainder 2\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    # Case 4: One number with each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for value in a:\n        count[value] += 1\n\n    total_triples = 0\n    total_triples += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6  # all zero\n    total_triples += (count[1] * (count[1] - 1) * (count[1] - 2)) // 6  # all one\n    total_triples += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6  # all two\n    total_triples += count[0] * count[1] * count[2]  # one of each\n\n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    \n    for value in a:\n        mod_count[value % 3] += 1\n        \n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n\n    for value in a:\n        remainder_count[value % 3] += 1\n\n    for r in range(3):\n        for r2 in range(r, 3):\n            r3 = (3 - (r + r2) % 3) % 3\n            if r == r2 == r3:\n                count += remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2) // 6\n            elif r == r2:\n                count += remainder_count[r] * (remainder_count[r] - 1) // 2 * remainder_count[r3]\n            elif r2 == r3:\n                count += remainder_count[r] * remainder_count[r2] * (remainder_count[r2] - 1) // 2\n            else:\n                count += remainder_count[r] * remainder_count[r2] * remainder_count[r3]\n\n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    \n    for num in a:\n        count[num] += 1\n    \n    total_triples = 0\n    \n    total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6  # all three are 0\n    total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6  # all three are 1\n    total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6  # all three are 2\n    total_triples += count[0] * count[1] * count[2]  # one of each\n    \n    return total_triples\n```",
            "logp": null
        },
        {
            "content": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainder_count = [0] * 3\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n    \n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    \n    return count\n```",
            "logp": null
        }
    ]
}